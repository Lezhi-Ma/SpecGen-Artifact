class DominantIndex {
    
    //@ non_null
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ non_null
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ non_null
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:120: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:279: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
3 errors

class DominantIndex {
    
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ non_null
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ non_null
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:119: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:278: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

class DominantIndex {
    
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ non_null
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

class DominantIndex {
    
    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:438: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:101:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:438:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:3: verify: Precondition conjunct is false: 6 < nums.length
    //@ requires 6 < nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:437: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:100:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:437:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:3: verify: Precondition conjunct is false: 6 <= nums.length
    //@ requires 6 <= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:436: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:99:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:436:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:3: verify: Precondition conjunct is false: 6 == nums.length
    //@ requires 6 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:435: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:98:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:435:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: verify: Precondition conjunct is false: 5 < nums.length
    //@ requires 5 < nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:434: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:97:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:434:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:8: verify: Precondition conjunct is false: 5 != nums.length
    //@ requires 5 != nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:433: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:96:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:433:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 5 > nums.length
    //@ requires 5 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:432: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:95:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:432:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:11: verify: Precondition conjunct is false: 4 == nums.length
    //@ requires 4 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:431: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:94:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:431:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:12: verify: Precondition conjunct is false: 4 >= nums.length
    //@ requires 4 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:430: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:93:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:430:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:12: verify: Precondition conjunct is false: 4 > nums.length
    //@ requires 4 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:429: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:92:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:429:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:14: verify: Precondition conjunct is false: 3 == nums.length
    //@ requires 3 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:428: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:91:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:428:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Precondition conjunct is false: 3 >= nums.length
    //@ requires 3 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:427: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:427:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Precondition conjunct is false: 3 > nums.length
    //@ requires 3 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:426: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:89:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:426:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:17: verify: Precondition conjunct is false: 2 == nums.length
    //@ requires 2 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:425: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:88:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:425:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:18: verify: Precondition conjunct is false: 2 >= nums.length
    //@ requires 2 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:424: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:87:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:424:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:18: verify: Precondition conjunct is false: 2 > nums.length
    //@ requires 2 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:423: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:86:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:423:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: verify: Precondition conjunct is false: 1 == nums.length
    //@ requires 1 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:422: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:85:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:422:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:21: verify: Precondition conjunct is false: 1 >= nums.length
    //@ requires 1 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:421: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:84:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:421:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:21: verify: Precondition conjunct is false: 1 > nums.length
    //@ requires 1 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:420: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:83:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:420:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:23: verify: Precondition conjunct is false: -1 == nums.length
    //@ requires -1 == nums.length;
                    ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:419: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:82:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:419:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Precondition conjunct is false: -1 >= nums.length
    //@ requires -1 >= nums.length;
                    ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 > nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:418: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:81:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:418:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Precondition conjunct is false: -1 > nums.length
    //@ requires -1 > nums.length;
                    ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:412:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:412: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:256: verify: Precondition conjunct is false: 6 < nums.length
    //@ requires 6 < nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:411:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:411: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:256: verify: Precondition conjunct is false: 6 <= nums.length
    //@ requires 6 <= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:410:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:410: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:256: verify: Precondition conjunct is false: 6 == nums.length
    //@ requires 6 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:409:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:409: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:259: verify: Precondition conjunct is false: 5 < nums.length
    //@ requires 5 < nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:408:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:408: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:261: verify: Precondition conjunct is false: 5 != nums.length
    //@ requires 5 != nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:407:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:407: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:262: verify: Precondition conjunct is false: 5 > nums.length
    //@ requires 5 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:406:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:406: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:264: verify: Precondition conjunct is false: 4 == nums.length
    //@ requires 4 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:405:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:405: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:265: verify: Precondition conjunct is false: 4 >= nums.length
    //@ requires 4 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:404:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:404: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:265: verify: Precondition conjunct is false: 4 > nums.length
    //@ requires 4 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:403:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:403: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:267: verify: Precondition conjunct is false: 3 == nums.length
    //@ requires 3 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:402:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:402: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:268: verify: Precondition conjunct is false: 3 >= nums.length
    //@ requires 3 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:401:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:401: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:268: verify: Precondition conjunct is false: 3 > nums.length
    //@ requires 3 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:400:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:400: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:270: verify: Precondition conjunct is false: 2 == nums.length
    //@ requires 2 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:399:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:399: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:271: verify: Precondition conjunct is false: 2 >= nums.length
    //@ requires 2 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:398:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:398: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:271: verify: Precondition conjunct is false: 2 > nums.length
    //@ requires 2 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:397:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:397: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:273: verify: Precondition conjunct is false: 1 == nums.length
    //@ requires 1 == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:396:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:396: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:274: verify: Precondition conjunct is false: 1 >= nums.length
    //@ requires 1 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:395:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:395: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:274: verify: Precondition conjunct is false: 1 > nums.length
    //@ requires 1 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:394:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:394: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:276: verify: Precondition conjunct is false: -1 == nums.length
    //@ requires -1 == nums.length;
                    ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:393:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:393: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: -1 >= nums.length
    //@ requires -1 >= nums.length;
                    ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:392:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:392: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: -1 > nums.length
    //@ requires -1 > nums.length;
                    ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:391:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:391: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < -1
    //@ requires biggest_index < -1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:390:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:390: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= -1
    //@ requires biggest_index <= -1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:389:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:389: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == -1
    //@ requires biggest_index == -1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:388:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:388: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != -1
    //@ requires biggest_index != -1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:387:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:387: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= -1
    //@ requires biggest_index >= -1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:386:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:386: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > -1
    //@ requires biggest_index > -1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:385:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:385: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < 6
    //@ requires biggest_index < 6;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:384:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:384: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= 6
    //@ requires biggest_index <= 6;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:383:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:383: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == 6
    //@ requires biggest_index == 6;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:382:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:382: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != 6
    //@ requires biggest_index != 6;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:381:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:381: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= 6
    //@ requires biggest_index >= 6;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:380:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:380: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > 6
    //@ requires biggest_index > 6;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:379:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:379: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < 5
    //@ requires biggest_index < 5;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:378:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:378: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= 5
    //@ requires biggest_index <= 5;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:377:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:377: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == 5
    //@ requires biggest_index == 5;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:376:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:376: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != 5
    //@ requires biggest_index != 5;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:375:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:375: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= 5
    //@ requires biggest_index >= 5;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:374:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:374: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > 5
    //@ requires biggest_index > 5;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:373:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:373: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < 4
    //@ requires biggest_index < 4;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:372:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:372: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= 4
    //@ requires biggest_index <= 4;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:371:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:371: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == 4
    //@ requires biggest_index == 4;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:370:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:370: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != 4
    //@ requires biggest_index != 4;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:369:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:369: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= 4
    //@ requires biggest_index >= 4;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:368:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:368: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > 4
    //@ requires biggest_index > 4;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:367:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:367: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < 3
    //@ requires biggest_index < 3;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:366:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:366: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= 3
    //@ requires biggest_index <= 3;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:365:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:365: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == 3
    //@ requires biggest_index == 3;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:364:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:364: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != 3
    //@ requires biggest_index != 3;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:363:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:363: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= 3
    //@ requires biggest_index >= 3;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:362:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:362: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > 3
    //@ requires biggest_index > 3;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:361:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:361: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < nums.length
    //@ requires biggest_index < nums.length;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:360:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:360: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= nums.length
    //@ requires biggest_index <= nums.length;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:359:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:359: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == nums.length
    //@ requires biggest_index == nums.length;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:358:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:358: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != nums.length
    //@ requires biggest_index != nums.length;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:357:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:357: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= nums.length
    //@ requires biggest_index >= nums.length;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:356:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:356: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > nums.length
    //@ requires biggest_index > nums.length;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:355:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:355: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < 2
    //@ requires biggest_index < 2;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:354:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:354: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= 2
    //@ requires biggest_index <= 2;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:353:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:353: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == 2
    //@ requires biggest_index == 2;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:352:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:352: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != 2
    //@ requires biggest_index != 2;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:351:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:351: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= 2
    //@ requires biggest_index >= 2;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:350:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:350: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > 2
    //@ requires biggest_index > 2;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:349:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:349: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < 1
    //@ requires biggest_index < 1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:348:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:348: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= 1
    //@ requires biggest_index <= 1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:347:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:347: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == 1
    //@ requires biggest_index == 1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:346:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:346: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != 1
    //@ requires biggest_index != 1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:345:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:345: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= 1
    //@ requires biggest_index >= 1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:344:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:344: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > 1
    //@ requires biggest_index > 1;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:343:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:343: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index < 0
    //@ requires biggest_index < 0;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:342:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:342: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index <= 0
    //@ requires biggest_index <= 0;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:341:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:341: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index == 0
    //@ requires biggest_index == 0;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:340:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:340: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index != 0
    //@ requires biggest_index != 0;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:339:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:339: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index >= 0
    //@ requires biggest_index >= 0;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:338:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:338: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: biggest_index > 0
    //@ requires biggest_index > 0;
                               ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:337:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:337: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:336:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:336: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:335:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:335: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:334:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:334: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:333:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:333: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:332:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:332: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:331:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:331: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i < biggest_index
    //@ requires i < biggest_index;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:330:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:330: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i <= biggest_index
    //@ requires i <= biggest_index;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:329:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:329: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i == biggest_index
    //@ requires i == biggest_index;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:328:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:328: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i != biggest_index
    //@ requires i != biggest_index;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:327:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:327: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i >= biggest_index
    //@ requires i >= biggest_index;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:326:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:326: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:277: verify: Precondition conjunct is false: i > biggest_index
    //@ requires i > biggest_index;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:325:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:325: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:279: verify: Precondition conjunct is false: i == 6
    //@ requires i == 6;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:324:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:324: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:280: verify: Precondition conjunct is false: i >= 6
    //@ requires i >= 6;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:323:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:323: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:280: verify: Precondition conjunct is false: i > 6
    //@ requires i > 6;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:322:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:322: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:282: verify: Precondition conjunct is false: i == 5
    //@ requires i == 5;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:321:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:321: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:283: verify: Precondition conjunct is false: i >= 5
    //@ requires i >= 5;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:320:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:320: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:283: verify: Precondition conjunct is false: i > 5
    //@ requires i > 5;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:319:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:319: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:283: verify: Precondition conjunct is false: i < 4
    //@ requires i < 4;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:318:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:318: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i == 4
    //@ requires i == 4;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:317:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:317: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i != 4
    //@ requires i != 4;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:316:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:316: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i >= 4
    //@ requires i >= 4;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:315:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:315: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i > 4
    //@ requires i > 4;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:314:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:314: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i < 3
    //@ requires i < 3;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:313:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:313: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i <= 3
    //@ requires i <= 3;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:312:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:312: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i == 3
    //@ requires i == 3;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:311:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:311: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i != 3
    //@ requires i != 3;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:310:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:310: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i >= 3
    //@ requires i >= 3;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:309:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:309: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:284: verify: Precondition conjunct is false: i > 3
    //@ requires i > 3;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:308:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:308: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:286: verify: Precondition conjunct is false: i == nums.length
    //@ requires i == nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:307:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:307: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i >= nums.length
    //@ requires i >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:306:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:306: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i > nums.length
    //@ requires i > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:305:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:305: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i < 2
    //@ requires i < 2;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:304:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:304: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i <= 2
    //@ requires i <= 2;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:303:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:303: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i == 2
    //@ requires i == 2;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:302:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:302: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i != 2
    //@ requires i != 2;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:301:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:301: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i >= 2
    //@ requires i >= 2;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:300:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:300: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i > 2
    //@ requires i > 2;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:299:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:299: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:298:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:298: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:297:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:297: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:296:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:296: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:295:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:295: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:294:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:294: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:293:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:293: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:292:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:292: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:291:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:291: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:290:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:290: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:289:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:289: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:288:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:288: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:287: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:95: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:95:
    //@ ensures \result < -1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:94: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:94:
    //@ ensures \result <= -1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:93: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:93:
    //@ ensures \result == -1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:92: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:92:
    //@ ensures \result != -1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:91: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:91:
    //@ ensures \result >= -1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > -1;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:90: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:90:
    //@ ensures \result > -1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < 6;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:89: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:89:
    //@ ensures \result < 6;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= 6;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:88: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:88:
    //@ ensures \result <= 6;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == 6;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:87: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:87:
    //@ ensures \result == 6;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != 6;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:86: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:86:
    //@ ensures \result != 6;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= 6;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:85: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:85:
    //@ ensures \result >= 6;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > 6;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:84: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:84:
    //@ ensures \result > 6;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:83: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:83:
    //@ ensures \result < 5;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:82: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:82:
    //@ ensures \result <= 5;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:81: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:81:
    //@ ensures \result == 5;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:80: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:80:
    //@ ensures \result != 5;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:79: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:79:
    //@ ensures \result >= 5;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:78: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:78:
    //@ ensures \result > 5;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:77: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:77:
    //@ ensures \result < 4;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:76: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:76:
    //@ ensures \result <= 4;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:75: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:75:
    //@ ensures \result == 4;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:74: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:74:
    //@ ensures \result != 4;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:73: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:73:
    //@ ensures \result >= 4;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:72: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:72:
    //@ ensures \result > 4;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:71: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:71:
    //@ ensures \result < 3;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:70: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:70:
    //@ ensures \result <= 3;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:69: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:69:
    //@ ensures \result == 3;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:68: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:68:
    //@ ensures \result != 3;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:67:
    //@ ensures \result >= 3;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > 3;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:66:
    //@ ensures \result > 3;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:65:
    //@ ensures \result < nums.length;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:64:
    //@ ensures \result <= nums.length;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:63:
    //@ ensures \result == nums.length;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:62:
    //@ ensures \result != nums.length;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:61:
    //@ ensures \result >= nums.length;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:60:
    //@ ensures \result > nums.length;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:59:
    //@ ensures \result < 2;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:58:
    //@ ensures \result <= 2;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:57:
    //@ ensures \result == 2;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:56:
    //@ ensures \result != 2;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:55:
    //@ ensures \result >= 2;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:54:
    //@ ensures \result > 2;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:53:
    //@ ensures \result < 1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:52:
    //@ ensures \result <= 1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:51:
    //@ ensures \result == 1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:50:
    //@ ensures \result != 1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:49:
    //@ ensures \result >= 1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:48:
    //@ ensures \result > 1;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:47:
    //@ ensures \result < 0;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:46:
    //@ ensures \result <= 0;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:45:
    //@ ensures \result == 0;
        ^
2 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:44:
    //@ ensures \result != 0;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:29:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:243:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: verify: Precondition conjunct is false: 5 <= nums.length
    //@ requires 5 <= nums.length;
                   ^
5 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:43:
    //@ ensures \result >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:28:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:242:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: verify: Precondition conjunct is false: 5 <= nums.length
    //@ requires 5 <= nums.length;
                   ^
5 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures \result > 0;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:42:
    //@ ensures \result > 0;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:27:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:241:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: verify: Precondition conjunct is false: 5 <= nums.length
    //@ requires 5 <= nums.length;
                   ^
5 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    //@ ensures nums != null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:) in method dominantIndex
        return biggest_index;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:41:
    //@ ensures nums != null ==> \result >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:26:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:240:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: verify: Precondition conjunct is false: 5 <= nums.length
    //@ requires 5 <= nums.length;
                   ^
5 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:36: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:239:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: verify: Precondition conjunct is false: 5 <= nums.length
    //@ requires 5 <= nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:35: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:238:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: verify: Precondition conjunct is false: 5 == nums.length
    //@ requires 5 == nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:34: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:23:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:237:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:7: verify: Precondition conjunct is false: 4 < nums.length
    //@ requires 4 < nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:33: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:22:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:236:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:7: verify: Precondition conjunct is false: 4 <= nums.length
    //@ requires 4 <= nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:32: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:235: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:21:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:235:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:8: verify: Precondition conjunct is false: 3 < nums.length
    //@ requires 3 < nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:31: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:234: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:20:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:234:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:8: verify: Precondition conjunct is false: 3 <= nums.length
    //@ requires 3 <= nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:30: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:19:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:233:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 < nums.length
    //@ requires 2 < nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:29: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:18:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:232:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 <= nums.length
    //@ requires 2 <= nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:28: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:17:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:231:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:10: verify: Precondition conjunct is false: 1 < nums.length
    //@ requires 1 < nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:16:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:230:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:11: verify: Precondition conjunct is false: 1 != nums.length
    //@ requires 1 != nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:222:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:194: verify: Precondition conjunct is false: 5 <= nums.length
    //@ requires 5 <= nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:231:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:221:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:221: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:194: verify: Precondition conjunct is false: 5 == nums.length
    //@ requires 5 == nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:230:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:220:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:220: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:195: verify: Precondition conjunct is false: 4 < nums.length
    //@ requires 4 < nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:229: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:229:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:219:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:219: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:195: verify: Precondition conjunct is false: 4 <= nums.length
    //@ requires 4 <= nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:228: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:228:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:218:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:218: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:196: verify: Precondition conjunct is false: 3 < nums.length
    //@ requires 3 < nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:227:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:217:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:217: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:196: verify: Precondition conjunct is false: 3 <= nums.length
    //@ requires 3 <= nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:226:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:216:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:216: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:197: verify: Precondition conjunct is false: 2 < nums.length
    //@ requires 2 < nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:225:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:215:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:215: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:197: verify: Precondition conjunct is false: 2 <= nums.length
    //@ requires 2 <= nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:224:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:214:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:214: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:198: verify: Precondition conjunct is false: 1 < nums.length
    //@ requires 1 < nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:223:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 != nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:213:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:25:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:199: verify: Precondition conjunct is false: 1 != nums.length
    //@ requires 1 != nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:222:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:26: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:15:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:221:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:9: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 2 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:211:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:196: verify: Precondition conjunct is false: 2 != nums.length
    //@ requires 2 != nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:14:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:224:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:8: verify: Precondition conjunct is false: 3 != nums.length
    //@ requires 3 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:14:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:223:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:8: verify: Precondition conjunct is false: 3 != nums.length
    //@ requires 3 != nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 3 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:209:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:23:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:194: verify: Precondition conjunct is false: 3 != nums.length
    //@ requires 3 != nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:13:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:226:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:7: verify: Precondition conjunct is false: 4 != nums.length
    //@ requires 4 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:13:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:225:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:7: verify: Precondition conjunct is false: 4 != nums.length
    //@ requires 4 != nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 4 != nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:207:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:207: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:22:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:192: verify: Precondition conjunct is false: 4 != nums.length
    //@ requires 4 != nums.length;
                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:12:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:226:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:3: verify: Precondition conjunct is false: 6 != nums.length
    //@ requires 6 != nums.length;
                   ^
6 verification failures

class DominantIndex {
    
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:23: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:12:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:225:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:3: verify: Precondition conjunct is false: 6 != nums.length
    //@ requires 6 != nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:22: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:11:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:224:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:4: verify: Precondition conjunct is false: 6 > nums.length
    //@ requires 6 > nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:21: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:10:) in method main
        dominantIndex(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:223:
    public static int dominantIndex(int[] nums) {
                      ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:4: verify: Precondition conjunct is false: 5 >= nums.length
    //@ requires 5 >= nums.length;
                   ^
4 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:203:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:203: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:19:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:185: verify: Precondition conjunct is false: 6 != nums.length
    //@ requires 6 != nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:202:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:202: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:19:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:186: verify: Precondition conjunct is false: 6 > nums.length
    //@ requires 6 > nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 >= nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:201:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:201: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:19:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:186: verify: Precondition conjunct is false: 5 >= nums.length
    //@ requires 5 >= nums.length;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:200:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:200: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:19:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:193: verify: Precondition conjunct is false: i < 5
    //@ requires i < 5;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i <= 5;
    //@ requires i != 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:199:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:19:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:194: verify: Precondition conjunct is false: i != 5
    //@ requires i != 5;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i <= 5;
    //@ requires i <= 4;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:198:) in method dominantIndex
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:19:
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:194: verify: Precondition conjunct is false: i <= 4
    //@ requires i <= 4;
                   ^
3 verification failures

class DominantIndex {
    
    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ ensures nums == null ==> \result >= 0;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy1(nums, biggest_index, i);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        for (int i = 0; i < nums.length; i++) {
            __Loop_Invariant_Dummy2(nums, biggest_index, i);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }

    //@ requires 6 < nums.length;
    //@ requires 6 <= nums.length;
    //@ requires 6 == nums.length;
    //@ requires 6 != nums.length;
    //@ requires 6 >= nums.length;
    //@ requires 6 > nums.length;
    //@ requires 5 < nums.length;
    //@ requires 5 <= nums.length;
    //@ requires 5 == nums.length;
    //@ requires 5 != nums.length;
    //@ requires 5 >= nums.length;
    //@ requires 5 > nums.length;
    //@ requires 4 < nums.length;
    //@ requires 4 <= nums.length;
    //@ requires 4 == nums.length;
    //@ requires 4 != nums.length;
    //@ requires 4 >= nums.length;
    //@ requires 4 > nums.length;
    //@ requires 3 < nums.length;
    //@ requires 3 <= nums.length;
    //@ requires 3 == nums.length;
    //@ requires 3 != nums.length;
    //@ requires 3 >= nums.length;
    //@ requires 3 > nums.length;
    //@ requires 2 < nums.length;
    //@ requires 2 <= nums.length;
    //@ requires 2 == nums.length;
    //@ requires 2 != nums.length;
    //@ requires 2 >= nums.length;
    //@ requires 2 > nums.length;
    //@ requires 1 < nums.length;
    //@ requires 1 <= nums.length;
    //@ requires 1 == nums.length;
    //@ requires 1 != nums.length;
    //@ requires 1 >= nums.length;
    //@ requires 1 > nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 == nums.length;
    //@ requires -1 != nums.length;
    //@ requires -1 >= nums.length;
    //@ requires -1 > nums.length;
    //@ requires biggest_index < -1;
    //@ requires biggest_index <= -1;
    //@ requires biggest_index == -1;
    //@ requires biggest_index != -1;
    //@ requires biggest_index >= -1;
    //@ requires biggest_index > -1;
    //@ requires biggest_index < 6;
    //@ requires biggest_index <= 6;
    //@ requires biggest_index == 6;
    //@ requires biggest_index != 6;
    //@ requires biggest_index >= 6;
    //@ requires biggest_index > 6;
    //@ requires biggest_index < 5;
    //@ requires biggest_index <= 5;
    //@ requires biggest_index == 5;
    //@ requires biggest_index != 5;
    //@ requires biggest_index >= 5;
    //@ requires biggest_index > 5;
    //@ requires biggest_index < 4;
    //@ requires biggest_index <= 4;
    //@ requires biggest_index == 4;
    //@ requires biggest_index != 4;
    //@ requires biggest_index >= 4;
    //@ requires biggest_index > 4;
    //@ requires biggest_index < 3;
    //@ requires biggest_index <= 3;
    //@ requires biggest_index == 3;
    //@ requires biggest_index != 3;
    //@ requires biggest_index >= 3;
    //@ requires biggest_index > 3;
    //@ requires biggest_index < nums.length;
    //@ requires biggest_index <= nums.length;
    //@ requires biggest_index == nums.length;
    //@ requires biggest_index != nums.length;
    //@ requires biggest_index >= nums.length;
    //@ requires biggest_index > nums.length;
    //@ requires biggest_index < 2;
    //@ requires biggest_index <= 2;
    //@ requires biggest_index == 2;
    //@ requires biggest_index != 2;
    //@ requires biggest_index >= 2;
    //@ requires biggest_index > 2;
    //@ requires biggest_index < 1;
    //@ requires biggest_index <= 1;
    //@ requires biggest_index == 1;
    //@ requires biggest_index != 1;
    //@ requires biggest_index >= 1;
    //@ requires biggest_index > 1;
    //@ requires biggest_index < 0;
    //@ requires biggest_index <= 0;
    //@ requires biggest_index == 0;
    //@ requires biggest_index != 0;
    //@ requires biggest_index >= 0;
    //@ requires biggest_index > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < biggest_index;
    //@ requires i <= biggest_index;
    //@ requires i == biggest_index;
    //@ requires i != biggest_index;
    //@ requires i >= biggest_index;
    //@ requires i > biggest_index;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i == 6;
    //@ requires i != 6;
    //@ requires i >= 6;
    //@ requires i > 6;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i == nums.length;
    //@ requires i != nums.length;
    //@ requires i >= nums.length;
    //@ requires i > nums.length;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] nums, int biggest_index, int i) {}

    //@ requires 6 >= nums.length;
    //@ requires 1 <= nums.length;
    //@ requires -1 < nums.length;
    //@ requires -1 <= nums.length;
    //@ requires -1 != nums.length;
    //@ requires i < 6;
    //@ requires i <= 6;
    //@ requires i != 6;
    //@ requires i <= 5;
    //@ requires i < nums.length;
    //@ requires i <= nums.length;
    //@ requires i != nums.length;
    public static void __Loop_Invariant_Dummy2(int[] nums, int biggest_index, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        dominantIndex(arr);
        arr = new int[]{0};
        dominantIndex(arr);
        arr = new int[]{-2, -1};
        dominantIndex(arr);
        arr = new int[]{2, 3};
        dominantIndex(arr);
        arr = new int[]{2, 3, 114};
        dominantIndex(arr);
        arr = new int[]{2, 3, 4};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6};
        dominantIndex(arr);
        arr = new int[]{3, 4, 5, 6, 10, 11};
        dominantIndex(arr);
        arr = new int[]{0, 1, 10};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 114};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919};
        dominantIndex(arr);
        arr = new int[]{-2, -3, 5, 514, 1919, 114514};
        dominantIndex(arr);
    }
}

/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method dominantIndex
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                                              ^
1 verification failure

