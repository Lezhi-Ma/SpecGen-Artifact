public class Return100Nested {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:29:
    //@ ensures \result < 1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:28:
    //@ ensures \result <= 1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:27:
    //@ ensures \result == 1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:26:
    //@ ensures \result < 0;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:25:
    //@ ensures \result <= 0;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:24:
    //@ ensures \result == 0;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:8:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:23:
    //@ ensures \result < -1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:8:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:22:
    //@ ensures \result <= -1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:8:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:21:
    //@ ensures \result == -1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:20:
    //@ ensures \result != 1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:3:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:19:
    //@ ensures \result > 1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:18:
    //@ ensures \result >= 1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:17:
    //@ ensures \result != 0;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:16:
    //@ ensures \result >= 0;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:15:
    //@ ensures \result > 0;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:14:
    //@ ensures \result != -1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:13: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:13:
    //@ ensures \result >= -1;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result > -1;
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:12:
    //@ ensures \result > -1;
        ^
2 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:56:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:55:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:54:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:53:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:52:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:51:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:50:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:49:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:48:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:47:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:46:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:45:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:44:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:43:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:42:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:41:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:40:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:39:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:38:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:37:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:36:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:35:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:34:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:33:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:32:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:31:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:30:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:29:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:28:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:27:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:26:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:25:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:24:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:23:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:22:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:21:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:20:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:19:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:18:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:17:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:16:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:15:) in method return100
            __Loop_Invariant_Dummy1(res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:5:
    public static void __Loop_Invariant_Dummy1(int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:14: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:88:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:87:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:86:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:85:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:84:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:83:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:82:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:81:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:80:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:79:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:78:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:77:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:76:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:75:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:74:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:73:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:72:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires res > -1;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:71:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:70:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:69:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:68:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:67:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:66:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:65:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:64:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:63:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:62:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:61:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:60:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:59:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:58:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:57:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:56:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:55:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:54:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:53:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:52:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:51:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:50:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:49:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:48:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires i > -1;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:47:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:46:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j < i
    //@ requires j < i;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:45:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j <= i
    //@ requires j <= i;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:44:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j == i
    //@ requires j == i;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:43:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j != i
    //@ requires j != i;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:42:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j >= i
    //@ requires j >= i;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:41:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j > i
    //@ requires j > i;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:40:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j < res
    //@ requires j < res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:39:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j <= res
    //@ requires j <= res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:38:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j == res
    //@ requires j == res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:37:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j != res
    //@ requires j != res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:36:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j >= res
    //@ requires j >= res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:35:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j > res
    //@ requires j > res;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:34:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j < 1
    //@ requires j < 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:33:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j <= 1
    //@ requires j <= 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:32:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j == 1
    //@ requires j == 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:31:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j != 1
    //@ requires j != 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:30:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j >= 1
    //@ requires j >= 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:29:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j > 1
    //@ requires j > 1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:28:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j < 0
    //@ requires j < 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:27:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j <= 0
    //@ requires j <= 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:26:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j == 0
    //@ requires j == 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:25:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j != 0
    //@ requires j != 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:24:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j >= 0
    //@ requires j >= 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:23:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j > 0
    //@ requires j > 0;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:22:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j < -1
    //@ requires j < -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:21:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j <= -1
    //@ requires j <= -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:20:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j == -1
    //@ requires j == -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:19:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j != -1
    //@ requires j != -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:18:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j >= -1
    //@ requires j >= -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}


/home/max/Documents/JMLGPT/tmp/Return100Nested.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:17:) in method return100
                __Loop_Invariant_Dummy2(res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:7:
    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:16: verify: Precondition conjunct is false: j > -1
    //@ requires j > -1;
                   ^
3 verification failures

public class Return100Nested {
    public static int return100 () {
        int res = 0;
        for(int i = 0; i < 10; i++) {
            __Loop_Invariant_Dummy1(res, i);
            for(int j = 0; j < 10; j++) {
                __Loop_Invariant_Dummy2(res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    public static void __Loop_Invariant_Dummy1(int res, int i) {}

    public static void __Loop_Invariant_Dummy2(int res, int i, int j) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        return100();
    }
}



