class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < i; s.charAt(j) != t.charAt(j))) && (\forall int k; 0 <= k && k < s.length(); (\exists int l; 0 <= l && l < t.length(); s.charAt(k) == t.charAt(l)));
    public boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ maintaining (\forall int l; 0 <= l && l < j; (\forall int k; 0 <= k && k < i; s.charAt(k) != t.charAt(l)));
        //@ maintaining (\exists int k; 0 <= k && k < i; s.charAt(k) == t.charAt(j));
        //@ maintaining (\forall int k; 0 <= k && k < i; (\exists int l; 0 <= l && l < j; s.charAt(k) == t.charAt(l)));
        //@ decreases n - i;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isSubsequence
        //@ maintaining (\exists int k; 0 <= k && k < i; s.charAt(k) == t.charAt(j));
            ^
1 verification failure

