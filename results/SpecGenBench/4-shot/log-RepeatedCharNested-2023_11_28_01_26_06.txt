public class RepeatedCharNested {

    //@ requires s != null;
    //@ ensures (\exists int i; 0 <= i && i < s.length(); (\exists int j; i + 1 <= j && j < s.length(); s.charAt(i) == s.charAt(j))) ==> \result >= 0 && \result < s.length();
    //@ ensures !(\exists int i; 0 <= i && i < s.length(); (\exists int j; i + 1 <= j && j < s.length(); s.charAt(i) == s.charAt(j))) ==> \result == -1;
    public static int repeatedChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; i + 1 <= j && j < s.length(); s.charAt(k) != s.charAt(j)));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j <= s.length();
            //@ maintaining (\forall int k; i + 1 <= k && k < j; s.charAt(k) != c1);
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:4:) in method repeatedChar
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:21:
    //@ ensures (\exists int i; 0 <= i && i < s.length(); (\exists int j; i + 1 <= j && j < s.length(); s.charAt(i) == s.charAt(j))) ==> \result >= 0 && \result < s.length();
        ^
2 verification failures

