public class MatrixMul {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0] * b[0][0] + a[0][1] * b[1][0] && \result[0][1] == a[0][0] * b[0][1] + a[0][1] * b[1][1];
    //@ ensures \result[1][0] == a[1][0] * b[0][0] + a[1][1] * b[1][0] && \result[1][1] == a[1][0] * b[0][1] + a[1][1] * b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        //@ maintaining 0 <= i && i <= 2;
        //@ maintaining 0 <= j && j <= 2;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int l; 0 <= l && l < j; c[k][l] == a[k][0] * b[0][l] + a[k][1] * b[1][l]));
        //@ decreases 2 - i;
        for (int i = 0; i < 2; i++) {
            //@ maintaining 0 <= j && j <= 2;
            //@ maintaining (\forall int k; 0 <= k && k < i; c[i][k] == a[i][0] * b[0][k] + a[i][1] * b[1][k]);
            //@ decreases 2 - j;
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:10: error: cannot find symbol
        //@ maintaining 0 <= j && j <= 2;
                             ^
  symbol:   variable j
  location: class MatrixMul
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:10: error: cannot find symbol
        //@ maintaining 0 <= j && j <= 2;
                                  ^
  symbol:   variable j
  location: class MatrixMul
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:11: error: cannot find symbol
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int l; 0 <= l && l < j; c[k][l] == a[k][0] * b[0][l] + a[k][1] * b[1][l]));
                                                                                       ^
  symbol:   variable j
  location: class MatrixMul
3 errors

