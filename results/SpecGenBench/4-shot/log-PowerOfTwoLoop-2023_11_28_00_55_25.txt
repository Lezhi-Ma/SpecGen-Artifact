class PowerOfTwoLoop {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int k; 0 <= k; n == 2^k);
    public boolean isPowerOfTwo(int n) {
        //@ maintaining n > 0;
        //@ maintaining (\exists int k; 0 <= k; n == 2^k) <==> (\exists int k; 0 <= k; n == 2^k * 2^(n/2^k));
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfTwoLoop.java:3: error: bad operand types for binary operator '^'
    //@ ensures \result <==> (\exists int k; 0 <= k; n == 2^k);
                                                           ^
  first type:  boolean
  second type: int
/home/max/Documents/JMLGPT/tmp/PowerOfTwoLoop.java:6: error: bad operand types for binary operator '^'
        //@ maintaining (\exists int k; 0 <= k; n == 2^k) <==> (\exists int k; 0 <= k; n == 2^k * 2^(n/2^k));
                                                      ^
  first type:  boolean
  second type: int
/home/max/Documents/JMLGPT/tmp/PowerOfTwoLoop.java:6: error: bad operand types for binary operator '^'
        //@ maintaining (\exists int k; 0 <= k; n == 2^k) <==> (\exists int k; 0 <= k; n == 2^k * 2^(n/2^k));
                                                                                             ^
  first type:  boolean
  second type: int
3 errors

