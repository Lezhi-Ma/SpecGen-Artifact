import java.util.HashMap;
import java.util.Map;

class UniqueChar {
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\exists int j; 0 <= j && j < s.length() && j != i; s.charAt(i) == s.charAt(j)));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int i; 0 <= i && i < \result; s.charAt(i) != s.charAt(\result)) && (\forall int i; \result < i && i < s.length(); s.charAt(\result) != s.charAt(i));
    public int firstUniqChar(String s) {
        Map<Character, Integer> frequency = new HashMap<Character, Integer>();
        for (int i = 0; i < s.length(); ++i) {
            char ch = s.charAt(i);
            frequency.put(ch, frequency.getOrDefault(ch, 0) + 1);
        }
        for (int i = 0; i < s.length(); ++i) {
            if (frequency.get(s.charAt(i)) == 1) {
                return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/UniqueChar.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueChar.java:6:) in method firstUniqChar
                return i;
                ^
/home/max/Documents/JMLGPT/tmp/UniqueChar.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueChar.java:15:
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int i; 0 <= i && i < \result; s.charAt(i) != s.charAt(\result)) && (\forall int i; \result < i && i < s.length(); s.charAt(\result) != s.charAt(i));
        ^
2 verification failures

