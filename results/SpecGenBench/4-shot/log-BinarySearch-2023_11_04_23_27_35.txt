public class BinarySearch {

    //@ requires arr.length >= 0 && (\forall int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < i; arr[j] <= arr[i]));
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high < i && i < arr.length; key <= arr[i]);
            //@ maintaining low <= high;
            //@ decreasing high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/BinarySearch.java:4:) in method Binary
                return -1;
                ^
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BinarySearch.java:28:
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
        ^
2 verification failures

