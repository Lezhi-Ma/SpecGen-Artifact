public class BubbleSort { 
    //@ requires array != null;
    //@ ensures (\forall int i; 0 <= i && i < array.length-1; array[i] <= array[i+1]);
    public void swap(int x, int y,  int array[]) {
        int temp;     
        temp = array[x];
        array[x] = array[y];
        array[y] = temp;
    }

    //@ requires arr != null;
    //@ ensures \result != null && \result.length == arr.length && (\forall int i; 0 <= i && i < arr.length; (\exists int j; 0 <= j && j < arr.length; \result[j] == arr[i]));
    //@ ensures (\forall int i; 0 <= i && i < \result.length-1; \result[i] <= \result[i+1]);
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1 && arr != null;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\exists int j; 0 <= j && j < arr.length; arr[j] == \old(arr[k])));
        //@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1 && arr != null;
            //@ maintaining (\forall int k; 0 <= k && k < j; (\exists int l; 0 <= l && l < arr.length; arr[l] == \old(arr[k])));
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		     swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:17: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1 && arr != null;
            ^
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:4: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/BubbleSort.java:3:) in method swap
    public void swap(int x, int y,  int array[]) {
                ^
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BubbleSort.java:4:
    //@ ensures (\forall int i; 0 <= i && i < array.length-1; array[i] <= array[i+1]);
        ^
3 verification failures

