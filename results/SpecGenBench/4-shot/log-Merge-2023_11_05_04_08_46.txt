class Merge {
    //@ requires nums1 != null && nums2 != null;
    //@ ensures \result != null;
    //@ ensures \result.length == nums1.length + nums2.length;
    //@ ensures (\forall int i; 0 <= i && i < nums1.length; (\exists int j; 0 <= j && j < \result.length; \result[j] == nums1[i]));
    //@ ensures (\forall int i; 0 <= i && i < nums2.length; (\exists int j; 0 <= j && j < \result.length; \result[j] == nums2[i]));
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] <= \result[i + 1]);
    public static int[] merge(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        int p1 = 0, p2 = 0;
        int[] sorted = new int[m + n];
        int cur;
        //@ maintaining 0 <= p1 && p1 <= m;
        //@ maintaining 0 <= p2 && p2 <= n;
        //@ maintaining 0 <= p1 + p2 && p1 + p2 <= m + n;
        //@ maintaining (\forall int i; 0 <= i && i < p1; (\exists int j; 0 <= j && j < p1 + p2; sorted[j] == nums1[i]));
        //@ maintaining (\forall int i; 0 <= i && i < p2; (\exists int j; 0 <= j && j < p1 + p2; sorted[j] == nums2[i]));
        //@ maintaining (\forall int i; 0 <= i && i < p1 + p2 - 1; sorted[i] <= sorted[i + 1]);
        //@ decreases m + n - (p1 + p2);
        while (p1 < m || p2 < n) {
            if (p1 == m) {
                cur = nums2[p2++];
            } else if (p2 == n) {
                cur = nums1[p1++];
            } else if (nums1[p1] < nums2[p2]) {
                cur = nums1[p1++];
            } else {
                cur = nums2[p2++];
            }
            sorted[p1 + p2 - 1] = cur;
        }
        return sorted;
    }
}
/home/max/Documents/JMLGPT/tmp/Merge.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method merge
        //@ maintaining (\forall int i; 0 <= i && i < p1 + p2 - 1; sorted[i] <= sorted[i + 1]);
            ^
1 verification failure

