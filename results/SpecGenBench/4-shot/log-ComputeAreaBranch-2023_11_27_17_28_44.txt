class ComputeAreaBranch {
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int minX2 = bx2;
        if(ax2 < bx2) {
            minX2 = ax2;
        }
        int maxX1 = bx1;
        if(ax1 > bx1) {
            maxX1 = ax1;
        }
        int minY2 = by2;
        if(ay2 < by2) {
            minY2 = ay2;
        }
        int maxY1 = by1;
        if(ay1 > by1) {
            maxY1 = ay1;
        }
        int overlapWidth = minX2 - maxX1;
        int overlapHeight = minY2 - maxY1;
        if(overlapWidth < 0) {
            overlapWidth = 0;
        }
        if(overlapHeight < 0) {
            overlapHeight = 0;
        }
        int overlapArea = overlapWidth * overlapHeight;
        return area1 + area2 - overlapArea;
    }
}
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: A \max expression expects just 1 argument, not 2
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: A \max function expects an argument of type JMLSetType<E> rather than int
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                       ^
  where E is a type-variable:
    E extends Object declared in interface JMLSetType
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: bad operand types for binary operator '-'
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                ^
  first type:  int
  second type: Object
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: A \max expression expects just 1 argument, not 2
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                        ^
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: A \max function expects an argument of type JMLSetType<E> rather than int
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                         ^
  where E is a type-variable:
    E extends Object declared in interface JMLSetType
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: A \max expression expects just 1 argument, not 2
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: A \max function expects an argument of type JMLSetType<E> rather than int
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                                                       ^
  where E is a type-variable:
    E extends Object declared in interface JMLSetType
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: bad operand types for binary operator '-'
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                                                ^
  first type:  int
  second type: Object
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: A \max expression expects just 1 argument, not 2
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: A \max function expects an argument of type JMLSetType<E> rather than int
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                                         ^
  where E is a type-variable:
    E extends Object declared in interface JMLSetType
/home/max/Documents/JMLGPT/tmp/ComputeAreaBranch.java:2: error: bad operand types for binary operator '*'
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(0, bx2 - \max(ax1, bx1)) * \max(0, by2 - \max(ay1, by1)));
                                                                                                                  ^
  first type:  Object
  second type: Object
11 errors

