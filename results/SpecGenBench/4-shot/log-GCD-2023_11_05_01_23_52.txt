public class GCD {
	
	//@ requires num1 >= Integer.MIN_VALUE && num1 <= Integer.MAX_VALUE;
	//@ requires num2 >= Integer.MIN_VALUE && num2 <= Integer.MAX_VALUE;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; 1 <= i && i <= \result; (num1 % i == 0 && num2 % i == 0));
	public static int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ ghost int i_counter;
		//@ set i_counter = 0;
		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int k; 1 <= k && k <= i_counter; (num1 % k == 0 && num2 % k == 0));
		//@ decreases num1 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
				//@ set i_counter = i_counter + 1;
			}
        }
		//@ assert i_counter == result;
		return result;
	}
}
