class CalcComplement {
    //@ requires num >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\forall int i; 0 <= i && i <= 30; num >= 1 << i ==> \result == num ^ ((highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1)));
    public int calcComplement(int num) {
        int highbit = 0;
        //@ maintaining 1 <= i && i <= 30;
        //@ maintaining (\forall int j; 1 <= j && j < i; num >= 1 << j ==> highbit == j);
        //@ decreases 30 - i;
        for (int i = 1; i <= 30; ++i) {
            if (num >= 1 << i) {
                highbit = i;
            } else {
                break;
            }            
        }
        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;
        return num ^ mask;
    }
}
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:4: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i <= 30; num >= 1 << i ==> \result == num ^ ((highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1)));
                                                                                        ^
  symbol:   variable highbit
  location: class CalcComplement
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:4: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i <= 30; num >= 1 << i ==> \result == num ^ ((highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1)));
                                                                                                                            ^
  symbol:   variable highbit
  location: class CalcComplement
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:4: error: bad operand types for binary operator '^'
    //@ ensures (\forall int i; 0 <= i && i <= 30; num >= 1 << i ==> \result == num ^ ((highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1)));
                                                                                    ^
  first type:  boolean
  second type: int
3 errors

