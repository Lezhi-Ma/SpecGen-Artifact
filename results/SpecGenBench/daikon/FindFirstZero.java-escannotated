public class FindFirstZero {

    /*@ requires x != null; */
    /*@ ensures \result <= x.length-1; */
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    /*@ requires x != null; */
    /*@ requires index >= 0; */
    /*@ requires index <= x.length-1; */
    /*@ ensures \old(index) <= x.length-1; */
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	/*@ requires args != null; */
	/*@ requires \typeof(args) == \type(java.lang.String[]); */
	/*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
	/*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
        arr = new int[]{0, 1, 213, 703, 713, -32};
        FindFirstZero(arr);
        arr = new int[]{-2, 2, 114, 514, 810, 114514};
        FindFirstZero(arr);
        arr = new int[]{114, 512, 513, 514, 810, 927, 999, 0, 114514};
        FindFirstZero(arr);
    }
}

