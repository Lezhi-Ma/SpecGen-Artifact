public class Biggest {

    /*@ ensures (\forall int i; (0 <= i && i <= a.length-1) ==> (a[i] <= a[\result])); */
    /*@ ensures \result <= a.length-1; */
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;

        while (a.length - index > 0) {
            __Loop_Invariant_Dummy1(a, index, biggest);
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        return biggest;
    }

    /*@ requires a != null; */
    /*@ requires index >= 0; */
    /*@ requires biggest >= 0; */
    /*@ requires index >= biggest; */
    /*@ requires index <= a.length-1; */
    /*@ requires biggest <= a.length-1; */
    /*@ ensures \old(index) <= a.length-1; */
    /*@ ensures \old(biggest) <= a.length-1; */
    public static void __Loop_Invariant_Dummy1(int[] a, int index, int biggest) {}

    /*@ requires args != null; */
    /*@ requires \typeof(args) == \type(java.lang.String[]); */
    /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
    /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        biggest(arr);
        arr = new int[]{0};
        biggest(arr);
        arr = new int[]{-2, -1};
        biggest(arr);
        arr = new int[]{2, 3};
        biggest(arr);
        arr = new int[]{0, 1};
        biggest(arr);
        arr = new int[]{-2, -3};
        biggest(arr);
        arr = new int[]{0, 4};
        biggest(arr);
        arr = new int[]{-2, -1, 8};
        biggest(arr);
        arr = new int[]{2, 3};
        biggest(arr);
        arr = new int[]{0, 1};
        biggest(arr);
        arr = new int[]{-2, -3, 2, 114, 514, 810, 114514};
        biggest(arr);
    }
}
