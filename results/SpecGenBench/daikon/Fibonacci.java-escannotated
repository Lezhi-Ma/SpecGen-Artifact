public class Fibonacci {

	/*@ ensures \result >= -1; */
	public static int fibCompute(int n) {
		if(n < 0) return -1;
		else if(n == 0) return 0;

		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int index = 2;

		while (index < fib.length) {
			__Loop_Invariant_Dummy1(n, fib, index);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;         
		}

		return fib[n];
	}

	/*@ requires n == fib.length-1; */
	/*@ requires fib[n] == fib[index]; */
	/*@ requires fib != null; */
	/*@ requires (\forall int i; (0 <= i && i <= fib.length-1) ==> (fib[i] >= 0)); */
	/*@ requires index >= 2; */
	/*@ requires fib[n] == 0; */
	/*@ requires fib[index-1] >= 1; */
	/*@ requires n >= index; */
	/*@ requires (\forall int i; (0 <= i && i <= fib.length-1) ==> (fib[i] >= fib[n])); */
	/*@ requires (\forall int i; (0 <= i && i <= fib.length-1) ==> (fib[i] <= fib[index-1])); */
	/*@ requires fib[n] <= fib[n-1]; */
	/*@ requires fib[n] < fib[index-1]; */
	/*@ requires fib[n-1] % fib[index-1] == 0; */
	/*@ requires fib[n-1] <= fib[index-1]; */
	/*@ ensures \old(n) == fib.length-1; */
	/*@ ensures fib[\old(n)] == fib[\old(index)]; */
	/*@ ensures fib[\old(n)] == \old(fib[index]); */
	/*@ ensures (\forall int i; (0 <= i && i <= fib.length-1) ==> (fib[i] >= 0)); */
	/*@ ensures fib[\old(n)] == 0; */
	/*@ ensures fib[\old(index)-1] >= 1; */
	/*@ ensures (\forall int i; (0 <= i && i <= fib.length-1) ==> (fib[i] >= fib[\old(n)])); */
	/*@ ensures (\forall int i; (0 <= i && i <= fib.length-1) ==> (fib[i] <= fib[\old(index)-1])); */
	/*@ ensures fib[\old(n)] <= fib[\old(n)-1]; */
	/*@ ensures fib[\old(n)] < fib[\old(index)-1]; */
	/*@ ensures fib[\old(n)-1] % fib[\old(index)-1] == 0; */
	/*@ ensures fib[\old(n)-1] <= fib[\old(index)-1]; */
	public static void __Loop_Invariant_Dummy1(int n, int[] fib, int index) {}

	/*@ requires args != null; */
	/*@ requires \typeof(args) == \type(java.lang.String[]); */
	/*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
	/*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
	public static void main(String[] args) {
		fibCompute(-1);
		fibCompute(-2);
		fibCompute(0);
		fibCompute(1);
		fibCompute(2);
		fibCompute(3);
		fibCompute(4);
		fibCompute(5);
		fibCompute(6);
		fibCompute(7);
		fibCompute(8);
		fibCompute(9);
		fibCompute(10);
	}
}
