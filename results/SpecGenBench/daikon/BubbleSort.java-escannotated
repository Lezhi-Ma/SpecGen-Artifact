public class BubbleSort { 
    
    /*@ requires array[x] == array[y-1]; */
    /*@ requires x >= 0; */
    /*@ requires y >= 1; */
    /*@ requires array != null; */
    /*@ requires x - y + 1 == 0; */
    /*@ requires x < array.length-1; */
    /*@ requires y <= array.length-1; */
    /*@ requires array[x] > array[y]; */
    /*@ modifies array[*]; */
    /*@ ensures array[\old(x)] == array[\old(y)-1]; */
    /*@ ensures array[\old(x)] == \old(array[y]); */
    /*@ ensures array[\old(y)] == \old(array[x]); */
    /*@ ensures array[\old(y)] == \old(array[y-1]); */
    /*@ ensures \old(x) < array.length-1; */
    /*@ ensures \old(y) <= array.length-1; */
    /*@ ensures array[\old(x)] < array[\old(y)]; */
    static void swap(int x, int y,  int array[]) {
        int temp;     
        temp = array[x];
        array[x] = array[y];
        array[y] = temp;
    }

    /*@ modifies arr[*]; */
    /*@ ensures \result == \old(arr); */
    /*@ ensures (\forall int i, j; (0 <= i && i <= arr.length-1 && 0 <= j && j <= arr.length-1) ==> ((i+1 == j) ==> (arr[i] <= arr[j]))); */
    /*@ ensures (\forall int i, j; (0 <= i && i <= \result.length-1 && 0 <= j && j <= \result.length-1) ==> ((i+1 == j) ==> (\result[i] <= \result[j]))); */
    public static int[] bubbleSort(int arr[]) {
        int n = arr.length;

        for (int i = 0; i < n-1; i++) {	
            __Loop_Invariant_Dummy1(arr, n, i);
            for (int j = 0; j < n-i-1; j++) {
                __Loop_Invariant_Dummy2(arr, n, i, j);
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    }

    /*@ requires n == arr.length; */
    /*@ requires arr != null; */
    /*@ requires i >= 0; */
    /*@ requires i < arr.length-1; */
    /*@ ensures \old(i) < arr.length-1; */
    public static void __Loop_Invariant_Dummy1(int[] arr, int n, int i) {}

    /*@ requires n == arr.length; */
    /*@ requires arr != null; */
    /*@ requires i >= 0; */
    /*@ requires j >= 0; */
    /*@ requires i < arr.length-1; */
    /*@ requires j < arr.length-1; */
    /*@ ensures \old(i) < arr.length-1; */
    /*@ ensures \old(j) < arr.length-1; */
    public static void __Loop_Invariant_Dummy2(int[] arr, int n, int i, int j) {}

    /*@ requires args != null; */
    /*@ requires \typeof(args) == \type(java.lang.String[]); */
    /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
    /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
    public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        bubbleSort(arr);
        arr = new int[]{};
        bubbleSort(arr);
        arr = new int[]{0};
        bubbleSort(arr);
        arr = new int[]{-2, -1};
        bubbleSort(arr);
        arr = new int[]{2, 3};
        bubbleSort(arr);
        arr = new int[]{0, 1, 1, 3, 2, -3};
        bubbleSort(arr);
        arr = new int[]{-2, -3};
        bubbleSort(arr);
        arr = new int[]{2, 1, 0, -1, -2, -3, -4};
        bubbleSort(arr);
        arr = new int[]{12306, -2, 2, 114, 514, 810, 927, 999, 11514, 512, 513};
        bubbleSort(arr);
        arr = new int[]{-10000, 114514, 572, -2, 2, 11824, 512, 513, -10000};
        bubbleSort(arr);
    }
}
