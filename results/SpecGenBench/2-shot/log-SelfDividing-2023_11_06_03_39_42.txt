class SelfDeviding {
    //@ requires num >= 0;
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
    public static boolean isSelfDividable(int num) {
        int temp = num;
        //@ maintaining temp >= 0;
        //@ maintaining (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
        //@ decreases temp;
        while (temp > 0) {
            int digit = temp % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            temp /= 10;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: ')' expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                    ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: <identifier> expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                       ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: <identifier> expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                               ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: <identifier> expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                                                         ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: <identifier> expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: ';' expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                                                                             ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: <identifier> expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                                                                                                           ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: <identifier> expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                                                                                                                                     ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: <identifier> expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                                                                                                                                                    ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:3: error: ';' expected
    //@ ensures \result <==> (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                                                                                                                                                         ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:7: error: ')' expected
        //@ maintaining (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                               ^
/home/max/Documents/JMLGPT/tmp/SelfDividing.java:7: error: Expected loop specifications while in JML: i is not a loop specification keyword
        //@ maintaining (\forall int i; i = 0; i < String.valueOf(num).length(); i++) (int)Character.getNumericValue(String.valueOf(num).charAt(i)) != 0 && num % (int)Character.getNumericValue(String.valueOf(num).charAt(i)) == 0;
                                                                                 ^
12 errors

