class DominantIndex {
    
    //@ requires nums != null;
    //@ requires nums.length > 0;
    //@ ensures \result >= -1 && \result < nums.length;
    //@ ensures (\result == -1) || (nums[\result] >= 2 * (\forall int i; 0 <= i && i < nums.length && i != \result; nums[i]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining (\forall int i; 0 <= i && i < nums.length && i != index; nums[i] <= m1);
        //@ maintaining (\forall int i; 0 <= i && i < nums.length && i != index; nums[i] <= m2);
        //@ maintaining m1 >= m2;
        //@ maintaining index >= -1 && index < nums.length;
        //@ decreases nums.length - index;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: error: incompatible types: int cannot be converted to boolean
    //@ ensures (\result == -1) || (nums[\result] >= 2 * (\forall int i; 0 <= i && i < nums.length && i != \result; nums[i]));
                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:6: error: bad operand types for binary operator '*'
    //@ ensures (\result == -1) || (nums[\result] >= 2 * (\forall int i; 0 <= i && i < nums.length && i != \result; nums[i]));
                                                       ^
  first type:  int
  second type: boolean
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:11: error: variable i is already defined in method dominantIndex(int[])
        //@ maintaining (\forall int i; 0 <= i && i < nums.length && i != index; nums[i] <= m1);
                                     ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:12: error: variable i is already defined in method dominantIndex(int[])
        //@ maintaining (\forall int i; 0 <= i && i < nums.length && i != index; nums[i] <= m2);
                                     ^
4 errors

