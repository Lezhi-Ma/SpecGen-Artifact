import java.util.HashMap;
import java.util.Map;

class UniqueChar {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); s.charAt(i) != s.charAt(j) || i == j));
    public int firstUniqChar(String s) {
        Map<Character, Integer> frequency = new HashMap<Character, Integer>();
        //@ maintaining (\forall char ch; frequency.containsKey(ch); frequency.get(ch) >= 0);
        //@ maintaining (\forall char ch; !frequency.containsKey(ch); frequency.get(ch) == 0);
        //@ maintaining 0 <= i && i <= s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char ch = s.charAt(i);
            frequency.put(ch, frequency.getOrDefault(ch, 0) + 1);
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            if (frequency.get(s.charAt(i)) == 1) {
                return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/UniqueChar.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method firstUniqChar
        //@ maintaining (\forall char ch; !frequency.containsKey(ch); frequency.get(ch) == 0);
            ^
1 verification failure

