class PerfectNumber {
    //@ requires num > 0;
    //@ ensures \result <==> (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == num;
    public boolean isPerfectNumber(int num) {
        if (num == 1) {
            return false;
        }

        int sum = 1;
        //@ maintaining (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == sum;
        //@ decreasing num - d;
        for (int d = 2; d * d <= num; ++d) {
            if (num % d == 0) {
                sum += d;
                if (d * d < num) {
                    sum += num / d;
                }
            }
        }
        return sum == num;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:3: error: cannot find symbol
    //@ ensures \result <==> (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == num;
                                                                                      ^
  symbol:   variable sum
  location: class PerfectNumber
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:3: error: Assignments are not allowed where pure expressions are expected
    //@ ensures \result <==> (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == num;
                                                                                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:3: error: cannot find symbol
    //@ ensures \result <==> (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == num;
                                                                                                                      ^
  symbol:   variable sum
  location: class PerfectNumber
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:3: error: Assignments are not allowed where pure expressions are expected
    //@ ensures \result <==> (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == num;
                                                                                                                          ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:3: error: The value expression of a sum or product expression must be a numeric type, not boolean
    //@ ensures \result <==> (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == num;
                                                                                 ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:10: error: variable d is already defined in method isPerfectNumber(int)
        //@ maintaining (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == sum;
                                  ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:10: error: bad operand types for binary operator '&&'
        //@ maintaining (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == sum;
                                                                                           ^
  first type:  int
  second type: boolean
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:10: error: incompatible types: int cannot be converted to boolean
        //@ maintaining (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == sum;
                                                                                                                     ^
/home/max/Documents/JMLGPT/tmp/PerfectNumber.java:10: error: The value expression of a sum or product expression must be a numeric type, not boolean
        //@ maintaining (\sum int d; 2 <= d && d * d <= num; (num % d == 0) ==> (sum += d) && (d * d < num) ==> (sum += num / d)) == sum;
                                                                            ^
9 errors

