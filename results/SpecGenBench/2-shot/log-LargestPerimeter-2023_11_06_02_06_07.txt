import java.util.Arrays;

class LargestPerimeter {
    //@ requires A != null;
    //@ requires A.length >= 3;
    //@ ensures \result >= 0;
    //@ ensures \result == largestPerimeter(A);
    public int largestPerimeter(int[] A) {
        Arrays.sort(A);
        for (int i = A.length - 1; i >= 2; --i) {
            if (A[i - 2] + A[i - 1] > A[i]) {
                return A[i - 2] + A[i - 1] + A[i];
            }
        }
        return 0;
    }

    //@ requires A != null;
    //@ requires A.length >= 3;
    //@ ensures \result >= 0;
    //@ ensures \result == largestPerimeter(A);
    public /*@ pure @*/ int largestPerimeter(int[] A) {
        int maxPerimeter = 0;
        for (int i = 0; i < A.length - 2; i++) {
            for (int j = i + 1; j < A.length - 1; j++) {
                for (int k = j + 1; k < A.length; k++) {
                    if (A[i] + A[j] > A[k] && A[j] + A[k] > A[i] && A[i] + A[k] > A[j]) {
                        maxPerimeter = Math.max(maxPerimeter, A[i] + A[j] + A[k]);
                    }
                }
            }
        }
        return maxPerimeter;
    }
}
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:22: error: method largestPerimeter(int[]) is already defined in class LargestPerimeter
    public /*@ pure @*/ int largestPerimeter(int[] A) {
                            ^
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:7: warning: A non-pure method is being called where it is not permitted: LargestPerimeter.largestPerimeter(int[])
    //@ ensures \result == largestPerimeter(A);
                                           ^
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:21: warning: A non-pure method is being called where it is not permitted: LargestPerimeter.largestPerimeter(int[])
    //@ ensures \result == largestPerimeter(A);
                                           ^
1 error
2 warnings

