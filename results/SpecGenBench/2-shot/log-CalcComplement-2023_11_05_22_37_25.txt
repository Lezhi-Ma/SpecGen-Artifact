class CalcComplement {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
    public int calcComplement(int num) {
        int highbit = 0;
        //@ maintaining 1 <= i && i <= 31;
        //@ maintaining highbit == (\max int j; 1 <= j && j < i; num >= 1 << j ? j : highbit);
        //@ decreases 31 - i;
        for (int i = 1; i <= 30; ++i) {
            if (num >= 1 << i) {
                highbit = i;
            } else {
                break;
            }            
        }
        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;
        return num ^ mask;
    }
}
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:7: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \max
        //@ maintaining highbit == (\max int j; 1 <= j && j < i; num >= 1 << j ? j : highbit);
                                    ^
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:7: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \max
        //@ maintaining highbit == (\max int j; 1 <= j && j < i; num >= 1 << j ? j : highbit);
                                    ^
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:7: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \max
        //@ maintaining highbit == (\max int j; 1 <= j && j < i; num >= 1 << j ? j : highbit);
                                    ^
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcComplement
        //@ maintaining highbit == (\max int j; 1 <= j && j < i; num >= 1 << j ? j : highbit);
            ^
3 warnings
1 verification failure

