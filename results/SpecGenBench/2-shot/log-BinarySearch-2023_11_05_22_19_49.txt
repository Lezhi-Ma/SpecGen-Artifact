//arr.length should be less than half of Integer.MAX_VALUE. Array size greater than ((Integer.MAX_VALUE/2)+1) can lead to sum overfllowing  for "int mid = high / 2;".
public class BinarySearch {

    //@ requires 0 <= arr.length && arr.length <= (Integer.MAX_VALUE/2)+1; 
    //@ ensures \result < arr.length;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high < i && i < arr.length; key <= arr[i]);
            //@ maintaining low <= high;
            //@ maintaining low <= mid && mid < high;
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method Binary
            //@ maintaining (\forall int i; high < i && i < arr.length; key <= arr[i]);
                ^
1 verification failure

