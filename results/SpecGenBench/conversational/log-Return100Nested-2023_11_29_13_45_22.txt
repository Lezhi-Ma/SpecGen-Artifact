public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (\sum int k; 0 <= k && k < j; 10);
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int k; 0 <= k && k < j; 10);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int k; 0 <= k && k < j; 10);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int k; 0 <= k && k < j; 10);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
            ^
6 warnings
1 verification failure

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (\sum int k; 0 <= k && k < j; 10);
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
            //@ assert res == (\sum int k; 0 <= k && k < i + 1; 10);
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int k; 0 <= k && k < j; 10);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int k; 0 <= k && k < j; 10);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int k; 0 <= k && k < j; 10);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:15: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ assert res == (\sum int k; 0 <= k && k < i + 1; 10);
                               ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == (\sum int k; 0 <= k && k < i; 10);
            ^
7 warnings
1 verification failure

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == i * 10;
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == i * 10 + j;
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
            //@ assert res == (i + 1) * 10;
        }
        return res;
    }
}

