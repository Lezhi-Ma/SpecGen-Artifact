class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < chars.length; chars[i] == 'a');
    public boolean checkString(String s) {
        char[] chars = s.toCharArray();
        int i = 0;
        //@ maintaining 0 <= i && i <= chars.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; chars[j] == 'a');
        while (i < chars.length && chars[i] == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= chars.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; chars[j] == 'b');
        while (i < chars.length && chars[i] == 'b') {
            i++;
        }
        return i == chars.length;
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < chars.length; chars[i] == 'a');
                                                           ^
  symbol:   variable chars
  location: class CheckABeforeB
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < chars.length; chars[i] == 'a');
                                                                         ^
  symbol:   variable chars
  location: class CheckABeforeB
2 errors

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && (s.charAt(i) == 'a' || s.charAt(i) == 'b')) {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'b');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:3:) in method checkString
        return i == s.length();
        ^
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:17:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
        ^
2 verification failures

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:3:) in method checkString
        return i == s.length();
        ^
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:17:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
        ^
2 verification failures

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method checkString
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method checkString
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
            ^
1 verification failure

class CheckABeforeB {
    //@ requires s != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == 'a');
    public boolean checkString(String s) {
        int i = 0;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'a') {
            i++;
        }
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'a');
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != 'b');
        while (i < s.length() && s.charAt(i) == 'b') {
            i++;
        }
        return i == s.length();
    }
}
/home/max/Documents/JMLGPT/tmp/CheckABeforeB.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkString
        //@ maintaining (\forall int j; i <= j && j < s.length(); s.charAt(j) != 'a');
            ^
1 verification failure

