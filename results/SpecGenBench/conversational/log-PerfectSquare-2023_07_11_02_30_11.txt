class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        for(int i = 1; i < num; i++) {
            //@ maintaining 1 <= i && i <= num;
            //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
            //@ decreases num - i;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6: error: Loop specifications must immediately precede a loop statement
            //@ maintaining 1 <= i && i <= num;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num; i++) {
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining 1 <= i && i <= num;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method isPerfectSquare: overflow in int sum
        for(int i = 1; i < num + 1; i++) {
                               ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method isPerfectSquare
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        //@ loop_invariant 1 <= i && i <= num + 1;
        //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
        for(int i = 1; i < num + 1; i++) {
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method isPerfectSquare
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        //@ loop_invariant 1 <= i && i <= num + 1;
        //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:12: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result == (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ assume num + 1 <= Integer.MAX_VALUE && 1 <= num + 1;
        //@ maintaining 1 <= i && i <= num + 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num + 1; i++) {
            //@ loop_invariant 1 <= i && i <= num + 1;
            //@ loop_invariant (\forall int j; 1 <= j && j < i; j * j != num);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 1 <= i && i <= num + 1;
                ^
1 error

