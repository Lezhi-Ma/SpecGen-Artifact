import java.util.Arrays;

class LargestPerimeter {
    /*@ requires A != null;
      @ requires (\forall int i; 0 <= i && i < A.length; A[i] >= 0);
      @ ensures (\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] <= A[j]));
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1])) ==> 
      @         (\exists int i; 0 <= i && i < A.length - 2; (\exists int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1] && \result == A[i] + A[j] + A[j+1]));
      @ ensures !((\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1]))) ==> \result == 0;
      @*/
    public int largestPerimeter(int[] A) {
        Arrays.sort(A);
        for (int i = A.length - 1; i >= 2; --i) {
            if (A[i - 2] + A[i - 1] > A[i]) {
                return A[i - 2] + A[i - 1] + A[i];
            }
        }
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method largestPerimeter: overflow in int sum
                return A[i - 2] + A[i - 1] + A[i];
                                           ^
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:15: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method largestPerimeter
            if (A[i - 2] + A[i - 1] > A[i]) {
                            ^
2 verification failures

import java.util.Arrays;

class LargestPerimeter {
    /*@ requires A != null;
      @ requires (\forall int i; 0 <= i && i < A.length; A[i] >= 0);
      @ ensures (\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] <= A[j]));
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1])) ==> 
      @         (\exists int i; 0 <= i && i < A.length - 2; (\exists int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1] && \result == A[i] + A[j] + A[j+1]));
      @ ensures !((\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1]))) ==> \result == 0;
      @*/
    public int largestPerimeter(int[] A) {
        Arrays.sort(A);
        for (int i = A.length - 1; i >= 2; --i) {
            //@ assume i - 2 >= 0;
            //@ assume i - 1 >= 0;
            if (A[i - 2] + A[i - 1] > A[i]) {
                return A[i - 2] + A[i - 1] + A[i];
            }
        }
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method largestPerimeter: overflow in int sum
            if (A[i - 2] + A[i - 1] > A[i]) {
                         ^
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:17: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method largestPerimeter
            if (A[i - 2] + A[i - 1] > A[i]) {
                 ^
2 verification failures

import java.util.Arrays;

class LargestPerimeter {
    /*@ requires A != null;
      @ requires (\forall int i; 0 <= i && i < A.length; A[i] >= 0);
      @ ensures (\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] <= A[j]));
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1])) ==> 
      @         (\exists int i; 0 <= i && i < A.length - 2; (\exists int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1] && \result == A[i] + A[j] + A[j+1]));
      @ ensures !((\forall int i; 0 <= i && i < A.length - 2; (\forall int j; i < j && j < A.length - 1; A[i] + A[j] > A[j+1]))) ==> \result == 0;
      @*/
    public int largestPerimeter(int[] A) {
        Arrays.sort(A);
        for (int i = A.length - 1; i >= 2; --i) {
            //@ assume i - 2 >= 0;
            //@ assume i - 1 >= 0;
            if ((long)A[i - 2] + (long)A[i - 1] > A[i]) {
                return A[i - 2] + A[i - 1] + A[i];
            }
        }
        return 0;
    }
}
