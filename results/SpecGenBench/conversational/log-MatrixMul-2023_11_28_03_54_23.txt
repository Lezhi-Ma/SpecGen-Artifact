public class MatrixMul {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:11: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
                  ^
  Reason: Double rewriting of ident: i i_596_596___43 i_596_610___46
1 error

public class MatrixMul {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        //@ maintaining 0 <= i && i <= 2;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < 2; c[k][j] == a[k][0] * b[0][j] + a[k][1] * b[1][j]));
        //@ decreases 2 - i;
        for (int i = 0; i < 2; i++) {
            //@ maintaining 0 <= j && j <= 2;
            //@ maintaining (\forall int k; 0 <= k && k <= i; c[k][j] == a[k][0] * b[0][j] + a[k][1] * b[1][j]);
            //@ decreases 2 - j;
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:17: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
                  ^
  Reason: Double rewriting of ident: i i_809_809___42 i_809_823___48
1 error

public class MatrixMul {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        //@ maintaining 0 <= i && i <= 1;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < 2; c[k][j] == a[k][0] * b[0][j] + a[k][1] * b[1][j]));
        //@ decreases 1 - i;
        for (int i = 0; i < 2; i++) {
            //@ maintaining 0 <= j && j <= 1;
            //@ maintaining (\forall int k; 0 <= k && k <= i; c[k][j] == a[k][0] * b[0][j] + a[k][1] * b[1][j]);
            //@ decreases 1 - j;
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:17: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
                  ^
  Reason: Double rewriting of ident: i i_809_809___42 i_809_823___48
1 error

public class MatrixMul {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
        c[0][1] = a[0][0]*b[0][1] + a[0][1]*b[1][1];
        c[1][0] = a[1][0]*b[0][0] + a[1][1]*b[1][0];
        c[1][1] = a[1][0]*b[0][1] + a[1][1]*b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:9: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method multiply
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
            ^
1 verification failure

public class MatrixMul {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        if (a != null && b != null) {
            if (a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2) {
                c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
                c[0][1] = a[0][0]*b[0][1] + a[0][1]*b[1][1];
                c[1][0] = a[1][0]*b[0][0] + a[1][1]*b[1][0];
                c[1][1] = a[1][0]*b[0][1] + a[1][1]*b[1][1];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:11: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method multiply
                c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
                    ^
1 verification failure

public class MatrixMul {
    
    //@ requires a != null && b != null;
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
        c[0][1] = a[0][0]*b[0][1] + a[0][1]*b[1][1];
        c[1][0] = a[1][0]*b[0][0] + a[1][1]*b[1][0];
        c[1][1] = a[1][0]*b[0][1] + a[1][1]*b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:10: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method multiply
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
            ^
1 verification failure

public class MatrixMul {
    
    //@ requires a != null && b != null;
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
        c[0][1] = a[0][0]*b[0][1] + a[0][1]*b[1][1];
        c[1][0] = a[1][0]*b[0][0] + a[1][1]*b[1][0];
        c[1][1] = a[1][0]*b[0][1] + a[1][1]*b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:10: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method multiply
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
            ^
1 verification failure

public class MatrixMul {
    
    //@ requires a != null && b != null;
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        if (a == null || b == null) {
            return null;
        }
        
        if (a.length != 2 || b.length != 2 || a[0].length != 2 || a[1].length != 2 || b[0].length != 2 || b[1].length != 2) {
            return null;
        }
        
        int[][] c = new int[2][2];
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
        c[0][1] = a[0][0]*b[0][1] + a[0][1]*b[1][1];
        c[1][0] = a[1][0]*b[0][0] + a[1][1]*b[1][0];
        c[1][1] = a[1][0]*b[0][1] + a[1][1]*b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:18: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method multiply
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
            ^
1 verification failure

public class MatrixMul {
    
    //@ requires a != null && b != null;
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        if (a == null || b == null) {
            return null;
        }
        
        if (a.length != 2 || b.length != 2 || a[0].length != 2 || a[1].length != 2 || b[0].length != 2 || b[1].length != 2) {
            return null;
        }
        
        int[][] c = new int[2][2];
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
        c[0][1] = a[0][0]*b[0][1] + a[0][1]*b[1][1];
        c[1][0] = a[1][0]*b[0][0] + a[1][1]*b[1][0];
        c[1][1] = a[1][0]*b[0][1] + a[1][1]*b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:18: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method multiply
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
            ^
1 verification failure

public class MatrixMul {
    
    //@ requires a != null && b != null;
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && a[1].length == 2 && b[0].length == 2 && b[1].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0].length == 2 && \result[1].length == 2;
    //@ ensures \result[0][0] == a[0][0]*b[0][0] + a[0][1]*b[1][0] && \result[0][1] == a[0][0]*b[0][1] + a[0][1]*b[1][1];
    //@ ensures \result[1][0] == a[1][0]*b[0][0] + a[1][1]*b[1][0] && \result[1][1] == a[1][0]*b[0][1] + a[1][1]*b[1][1];
    public int[][] multiply(int[][] a, int[][] b) {
        if (a == null || b == null) {
            return null;
        }
        
        if (a.length != 2 || b.length != 2 || a[0].length != 2 || a[1].length != 2 || b[0].length != 2 || b[1].length != 2) {
            return null;
        }
        
        int[][] c = new int[2][2];
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
        c[0][1] = a[0][0]*b[0][1] + a[0][1]*b[1][1];
        c[1][0] = a[1][0]*b[0][0] + a[1][1]*b[1][0];
        c[1][1] = a[1][0]*b[0][1] + a[1][1]*b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixMul.java:18: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method multiply
        c[0][0] = a[0][0]*b[0][0] + a[0][1]*b[1][0];
            ^
1 verification failure

