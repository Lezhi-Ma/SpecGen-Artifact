import java.util.Arrays;

class LargestPerimeter {
    //@ requires A != null && A.length > 0;
    //@ ensures \result == 0 || (\exists int i; 0 <= i && i < A.length - 2; A[i] + A[i+1] > A[i+2] && \result == A[i] + A[i+1] + A[i+2]);
    public int largestPerimeter(int[] A) {
        Arrays.sort(A);
        //@ maintaining (\forall int i; 0 <= i && i < A.length - 2; A[i] <= A[i+1] && A[i+1] <= A[i+2]);
        //@ decreasing A.length;
        for (int i = A.length - 1; i >= 2; --i) {
            //@ maintaining (\forall int j; i < j && j < A.length; A[i] + A[i+1] > A[j]);
            //@ decreasing i;
            if (A[i - 2] + A[i - 1] > A[i]) {
                return A[i - 2] + A[i - 1] + A[i];
            }
        }
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:11: error: Loop specifications must immediately precede a loop statement
            //@ maintaining (\forall int j; i < j && j < A.length; A[i] + A[i+1] > A[j]);
                ^
1 error

import java.util.Arrays;

class LargestPerimeter {
    //@ requires A != null && A.length > 0;
    //@ ensures \result == 0 || (\exists int i; 0 <= i && i < A.length - 2; A[i] + A[i+1] > A[i+2] && \result == A[i] + A[i+1] + A[i+2]);
    public int largestPerimeter(int[] A) {
        Arrays.sort(A);
        //@ maintaining (\forall int i; 0 <= i && i < A.length - 2; A[i] <= A[i+1] && A[i+1] <= A[i+2]);
        //@ decreasing A.length;
        for (int i = A.length - 1; i >= 2; --i) {
            //@ maintaining (\forall int j; i < j && j < A.length; A[i] + A[i+1] > A[j]);
            //@ decreasing i;
            if (A[i - 2] + A[i - 1] > A[i]) {
                return A[i - 2] + A[i - 1] + A[i];
            }
        }
        //@ assert (\forall int i; 0 <= i && i < A.length - 2; !(A[i] + A[i+1] > A[i+2])) ==> \result == 0;
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:11: error: Loop specifications must immediately precede a loop statement
            //@ maintaining (\forall int j; i < j && j < A.length; A[i] + A[i+1] > A[j]);
                ^
1 error

import java.util.Arrays;

class LargestPerimeter {
    //@ requires A != null && A.length > 0;
    //@ ensures \result == 0 || (\exists int i; 0 <= i && i < A.length - 2; A[i] + A[i+1] > A[i+2] && \result == A[i] + A[i+1] + A[i+2]);
    public int largestPerimeter(int[] A) {
        Arrays.sort(A);
        //@ maintaining (\forall int i; 0 <= i && i < A.length - 2; A[i] <= A[i+1] && A[i+1] <= A[i+2]);
        //@ decreasing A.length;
        for (int i = A.length - 1; i >= 2; --i) {
            //@ maintaining (\forall int j; i < j && j < A.length; A[i] + A[i+1] > A[j]);
            //@ decreasing i;
            if (A[i - 2] + A[i - 1] > A[i]) {
                return A[i - 2] + A[i - 1] + A[i];
            }
        }
        //@ assert (\forall int i; 0 <= i && i < A.length - 2; !(A[i] + A[i+1] > A[i+2])) ==> \result == 0;
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/LargestPerimeter.java:11: error: Loop specifications must immediately precede a loop statement
            //@ maintaining (\forall int j; i < j && j < A.length; A[i] + A[i+1] > A[j]);
                ^
1 error

