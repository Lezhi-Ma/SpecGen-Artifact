public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result ==> txt.endsWith(pat);
    //@ ensures !\result ==> !txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining (\forall int k; k >= i && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining 0 <= i && i <= pat.length();
            ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining 0 <= j && j <= txt.length();
            ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result ==> txt.endsWith(pat);
    //@ ensures !\result ==> !txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:12: verify: The prover cannot establish an assertion (LoopDecreasesNonNegative) in method isSuffix
        //@ decreases i + j;
            ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:20:
    //@ ensures \result ==> txt.endsWith(pat);
        ^
3 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result ==> txt.endsWith(pat);
    //@ ensures !\result ==> !txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:20:
    //@ ensures \result ==> txt.endsWith(pat);
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:4:) in method isSuffix
                return false;
                ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:15:
    //@ ensures !\result ==> !txt.endsWith(pat);
        ^
4 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

public class IsSuffix {
    //@ requires pat != null && txt != null;
    //@ ensures \result <==> txt.endsWith(pat);
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j + k - i));
        //@ decreases i + j + 2;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:3:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:19:
    //@ ensures \result <==> txt.endsWith(pat);
        ^
2 verification failures

