
public class AddLoop {
    
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining 0 <= n && n <= y;
            //@ maintaining sum == x + y - n;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining 0 <= n && n <= -y;
            //@ maintaining sum == x + y + n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:26: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    
    /*@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
      @ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
      @ ensures Integer.MIN_VALUE <= \result && \result <= Integer.MAX_VALUE;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining Integer.MIN_VALUE <= sum && sum <= Integer.MAX_VALUE;
            //@ maintaining Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
            //@ maintaining sum == x + y - n;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining Integer.MIN_VALUE <= sum && sum <= Integer.MAX_VALUE;
            //@ maintaining Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
            //@ maintaining sum == x + y + n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

/home/max/Documents/JMLGPT/tmp/AddLoop.java:27: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
1 verification failure


public class AddLoop {
    
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE - 1;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE - 1;
      @ ensures Integer.MIN_VALUE + 1 <= \result && \result <= Integer.MAX_VALUE - 1;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:28: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE - 1;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE - 1;
      @ ensures Integer.MIN_VALUE + 1 <= \result && \result <= Integer.MAX_VALUE - 1;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}



/home/max/Documents/JMLGPT/tmp/AddLoop.java:29: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE - 1;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE - 1;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE - 1;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE - 1;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    
    /*@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
      @ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
      @ ensures Integer.MIN_VALUE <= \result && \result <= Integer.MAX_VALUE;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:24: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE < x + y && x + y < Integer.MAX_VALUE;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:22: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE - 1;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE - 1;
      @ ensures Integer.MIN_VALUE + 1 <= \result && \result <= Integer.MAX_VALUE - 1;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:29: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:22: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE - 1;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE - 1;
      @ ensures Integer.MIN_VALUE + 1 <= \result && \result <= Integer.MAX_VALUE - 1;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:29: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE - 1;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE - 1;
      @ ensures Integer.MIN_VALUE + 1 <= \result && \result <= Integer.MAX_VALUE - 1;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ maintaining x + y == sum + n;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ maintaining x + y == sum - n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:33: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    
    /*@ requires Integer.MIN_VALUE + 1 <= x && x <= Integer.MAX_VALUE - 1;
      @ requires Integer.MIN_VALUE + 1 <= y && y <= Integer.MAX_VALUE - 1;
      @ ensures Integer.MIN_VALUE + 1 <= \result && \result <= Integer.MAX_VALUE - 1;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:28: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: underflow in int difference
                sum = sum - 1;
                          ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:25: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

/home/max/Documents/JMLGPT/tmp/AddLoop.java:24: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
1 verification failure


public class AddLoop {
    
    
    /*@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            
            //@ maintaining sum == x + y - n;
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            
            //@ maintaining sum == x + y + n;
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

/home/max/Documents/JMLGPT/tmp/AddLoop.java:21: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
1 verification failure


public class AddLoop {
    
    /*@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
      @ ensures \result == x + y;
      @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
1 verification failure


public class AddLoop {
    
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ maintaining n >= 0;
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ maintaining n >= 0;
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

/home/max/Documents/JMLGPT/tmp/AddLoop.java:21: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
1 verification failure


public class AddLoop {
    
    //@ requires Integer.MIN_VALUE <= x + y <= Integer.MAX_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            
            //@ maintaining sum == x + y - n;
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            
            //@ maintaining sum == x + y + n;
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

/home/max/Documents/JMLGPT/tmp/AddLoop.java:20: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
1 verification failure


public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x+y && x+y <= Integer.MAX_VALUE;
    //@ ensures \result == x+y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

/home/max/Documents/JMLGPT/tmp/AddLoop.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
1 verification failure

