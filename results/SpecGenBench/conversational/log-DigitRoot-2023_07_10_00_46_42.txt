class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        while (num >= 10) {
            int sum = 0;
            //@ maintaining 0 <= num;
            //@ maintaining 0 <= sum && sum <= num;
            //@ decreases num;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitalRoot.java:3:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitalRoot.java:16:
    //@ ensures \result >= 0 && \result < 10;
        ^
2 verification failures

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitalRoot.java:3:) in method digitRoot
        return result;
        ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18:
    //@ ensures \result >= 0 && \result < 10;
        ^
2 verification failures

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:18: verify: The prover cannot establish an assertion (Assert) in method digitRoot
        //@ assert result >= 0 && result < 10;
            ^
1 verification failure

class DigitRoot {
    //@ requires 0 <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result < 10;
    public int digitRoot(int num) {
        int result = num;
        while (result >= 10) {
            int sum = 0;
            int temp = result;
            //@ maintaining 0 <= temp && temp <= result;
            //@ maintaining 0 <= sum && sum <= temp;
            //@ decreases temp;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            result = sum;
        }
        //@ assert result >= 0 && result < 10;
        return result;
    }
}
