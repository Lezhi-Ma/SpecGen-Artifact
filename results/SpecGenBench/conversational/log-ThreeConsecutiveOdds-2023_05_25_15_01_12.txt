public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ requires (\forall int i; 0 <= i && i < arr.length; Integer.MIN_VALUE + 1 < arr[i] && arr[i] < Integer.MAX_VALUE);
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= arr.length - 3; arr[i] % 2 != 0 && arr[i+1] % 2 != 0 && arr[i+2] % 2 != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n - 3;
        //@ maintaining (\forall int j; 0 <= j && j < i; (arr[j] % 2 == 0) || (j+1 < i && arr[j+1] % 2 == 0) || (j+2 < i && arr[j+2] % 2 == 0));
        //@ decreases n - i;
        for (int i = 0; i <= n - 3; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method threeConsecutiveOdds
        //@ maintaining (\forall int j; 0 <= j && j < i; (arr[j] % 2 == 0) || (j+1 < i && arr[j+1] % 2 == 0) || (j+2 < i && arr[j+2] % 2 == 0));
            ^
2 verification failures

public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ requires (\forall int i; 0 <= i && i < arr.length; Integer.MIN_VALUE + 1 < arr[i] && arr[i] < Integer.MAX_VALUE);
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= arr.length - 3; arr[i] % 2 != 0 && arr[i+1] % 2 != 0 && arr[i+2] % 2 != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n - 3;
        //@ maintaining (\forall int j; 0 <= j && j < i; (arr[j] % 2 == 0) || (j+1 < i && arr[j+1] % 2 == 0) || (j+2 < i && arr[j+2] % 2 == 0));
        //@ decreases n - i;
        for (int i = 0; i <= n - 3; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        //@ assert (\forall int i; 0 <= i && i < n; (arr[i] % 2 == 0) ==> (\forall int j; i <= j && j < n && j < i + 3; arr[j] % 2 == 0));
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
2 verification failures

public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ requires (\forall int i; 0 <= i && i < arr.length; Integer.MIN_VALUE + 1 < arr[i] && arr[i] < Integer.MAX_VALUE);
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= arr.length - 3; arr[i] % 2 != 0 && arr[i+1] % 2 != 0 && arr[i+2] % 2 != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n - 3;
        //@ maintaining (\forall int j; 0 <= j && j < i; (arr[j] % 2 == 0) || (j+1 < i && arr[j+1] % 2 == 0) || (j+2 < i && arr[j+2] % 2 == 0));
        //@ decreases n - i;
        for (int i = 0; i <= n - 3; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        //@ assert (\forall int i; 0 <= i && i < n - 2; (arr[i] % 2 == 0) ==> (arr[i+1] % 2 == 0) ==> (arr[i+2] % 2 == 0));
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
2 verification failures

public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ requires (\forall int i; 0 <= i && i < arr.length; Integer.MIN_VALUE + 1 < arr[i] && arr[i] < Integer.MAX_VALUE);
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= arr.length - 3; arr[i] % 2 != 0 && arr[i+1] % 2 != 0 && arr[i+2] % 2 != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n - 3;
        //@ maintaining (\forall int j; 0 <= j && j < i; (arr[j] % 2 == 0) || (j+1 < i && arr[j+1] % 2 == 0) || (j+2 < i && arr[j+2] % 2 == 0));
        //@ decreases n - i;
        for (int i = 0; i <= n - 3; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        //@ assert (\forall int i; 0 <= i && i < n - 2; (arr[i] % 2 == 0) ==> (arr[i+1] % 2 == 0) ==> (arr[i+2] % 2 == 0));
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
2 verification failures

public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ requires (\forall int i; 0 <= i && i < arr.length; Integer.MIN_VALUE + 1 < arr[i] && arr[i] < Integer.MAX_VALUE);
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= arr.length - 3; arr[i] % 2 != 0 && arr[i+1] % 2 != 0 && arr[i+2] % 2 != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n - 3;
        //@ maintaining (\forall int j; 0 <= j && j < i; (arr[j] % 2 == 0) || (j+1 < i && arr[j+1] % 2 == 0) || (j+2 < i && arr[j+2] % 2 == 0));
        //@ decreases n - i;
        for (int i = 0; i <= n - 3; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        //@ assert (\forall int i; 0 <= i && i < n - 2; (arr[i] % 2 == 0) ==> (arr[i+1] % 2 == 0) ==> (arr[i+2] % 2 == 0));
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
2 verification failures

public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ requires (\forall int i; 0 <= i && i < arr.length; Integer.MIN_VALUE + 1 < arr[i] && arr[i] < Integer.MAX_VALUE);
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= arr.length - 3; arr[i] % 2 != 0 && arr[i+1] % 2 != 0 && arr[i+2] % 2 != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n - 3;
        //@ maintaining (\forall int j; 0 <= j && j < i; (arr[j] % 2 == 0) || (j+1 < i && arr[j+1] % 2 == 0) || (j+2 < i && arr[j+2] % 2 == 0));
        //@ decreases n - i;
        for (int i = 0; i <= n - 3; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        //@ assert (\forall int i; 0 <= i && i < n - 2; (arr[i] % 2 == 0) ==> (arr[i+1] % 2 == 0) ==> (arr[i+2] % 2 == 0));
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method threeConsecutiveOdds
        //@ maintaining 0 <= i && i <= n - 3;
            ^
2 verification failures

public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ requires (\forall int i; 0 <= i && i < arr.length; Integer.MIN_VALUE + 1 < arr[i] && arr[i] < Integer.MAX_VALUE);
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= arr.length - 3; arr[i] % 2 != 0 && arr[i+1] % 2 != 0 && arr[i+2] % 2 != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n - 3;
        //@ maintaining (\forall int j; 0 <= j && j < i; (arr[j] % 2 == 0) || (j+1 < i && arr[j+1] % 2 == 0) || (j+2 < i && arr[j+2] % 2 == 0));
        //@ decreases n - i;
        for (int i = 0; i <= n - 3; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        //@ assert (\forall int i; 0 <= i && i < n - 2; (arr[i] % 2 == 0) ==> (arr[i+1] % 2 == 0) ==> (arr[i+2] % 2 == 0));
        return false;
    }
}
