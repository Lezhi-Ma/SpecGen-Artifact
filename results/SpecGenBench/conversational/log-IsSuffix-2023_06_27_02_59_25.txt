public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining -1 <= i && i <= pat.length();
        //@ maintaining -1 <= j && j <= txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

public class IsSuffix {

    /*@ requires pat != null;
      @ requires txt != null;
      @ requires 0 <= pat.length() && pat.length() <= txt.length();
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length() - 1;
        int j = txt.length() - 1;

        //@ maintaining -1 <= i && i < pat.length();
        //@ maintaining -1 <= j && j < txt.length();
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(j))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:6:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
      @ ensures \result <==> (\exists int i; 0 <= i && i <= pat.length(); pat.substring(i).equals(txt.substring(txt.length() - pat.length() + i))); @*/
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i < k && k < pat.length(); pat.charAt(k) == txt.charAt(j - pat.length() + k + 1));
            ^
3 verification failures

