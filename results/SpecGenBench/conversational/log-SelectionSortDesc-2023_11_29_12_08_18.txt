public class SelectionSortDesc {

    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < arr.length; \forall int j; i <= j && j < arr.length; arr[i] >= arr[j];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:13: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method selectionSort
                if (arr[j] > arr[index]){  
                                ^
1 verification failure

public class SelectionSortDesc {

    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < arr.length; \forall int j; i <= j && j < arr.length; arr[i] >= arr[j];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume 0 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4:) in method selectionSort
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:5:
    //@ ensures \forall int i; 0 <= i && i < arr.length; \forall int j; i <= j && j < arr.length; arr[i] >= arr[j];
        ^
2 verification failures

public class SelectionSortDesc {

    //@ requires arr != null && arr.length > 0;
    //@ ensures \forall int i; 0 <= i && i < arr.length; \forall int j; i <= j && j < arr.length; arr[i] >= arr[j];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume i+1 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4:) in method selectionSort
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:5:
    //@ ensures \forall int i; 0 <= i && i < arr.length; \forall int j; i <= j && j < arr.length; arr[i] >= arr[j];
        ^
2 verification failures

public class SelectionSortDesc {

    //@ requires arr != null && arr.length > 0;
    //@ ensures \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume i+1 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4:) in method selectionSort
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:5:
    //@ ensures \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
        ^
2 verification failures

public class SelectionSortDesc {

    //@ requires arr != null && arr.length > 0;
    //@ ensures \forall int i; 0 <= i && i < arr.length; \forall int j; i <= j && j < arr.length; arr[i] >= arr[j];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume i+1 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
            ^
1 verification failure

public class SelectionSortDesc {

    //@ requires arr != null && arr.length > 0;
    //@ ensures \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume i+1 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

public class SelectionSortDesc {

    //@ requires arr != null && arr.length > 0;
    //@ ensures \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume i+1 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert isSorted(arr);
    }
    
    //@ ensures \result == (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static boolean isSorted(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] < arr[i+1]) {
                return false;
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:24: warning: A non-pure method is being called where it is not permitted: SelectionSortDesc.isSorted(int[])
        //@ assert isSorted(arr);
                           ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:30: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isSorted
            if (arr[i] < arr[i+1]) {
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 warning
2 verification failures

public class SelectionSortDesc {

    //@ requires arr != null && arr.length > 0;
    //@ ensures \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume i+1 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert isSorted(arr);
    }
    
    //@ ensures \result == (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static /*@ pure @*/ boolean isSorted(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] < arr[i+1]) {
                return false;
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:30: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method isSorted
            if (arr[i] < arr[i+1]) {
                   ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
2 verification failures

public class SelectionSortDesc {

    //@ requires arr != null && arr.length > 0;
    //@ ensures \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume i+1 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert isSorted(arr);
    }
    
    //@ ensures \result == (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static /*@ pure @*/ boolean isSorted(int[] arr) {
        //@ assume arr.length >= 2;
        for (int i = 0; i < arr.length - 1; i++) {
            //@ assume i >= 0;
            if (arr[i] < arr[i+1]) {
                return false;
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27:) in method isSorted
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36:
    //@ ensures \result == (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
3 verification failures

public class SelectionSortDesc {

    //@ requires arr != null && arr.length > 0;
    //@ ensures \forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1];
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ assume 0 <= index && index < arr.length;
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[index] >= arr[k]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                //@ assume i+1 <= j && j < arr.length;
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert isSorted(arr);
    }
    
    //@ ensures \result == (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static /*@ pure @*/ boolean isSorted(int[] arr) {
        //@ assume arr.length >= 2;
        for (int i = 0; i < arr.length - 1; i++) {
            //@ assume i >= 0;
            if (arr[i] < arr[i+1]) {
                return false;
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27:) in method isSorted
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:36:
    //@ ensures \result == (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:23: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
3 verification failures

