public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures \result == num1 / num2 <==> operator == '/';
    //@ ensures \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:28: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
            	output = num1 / num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 > Integer.MIN_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 > Integer.MIN_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 < Integer.MAX_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 < Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 > Integer.MIN_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 > Integer.MIN_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 < Integer.MAX_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 < Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 > Integer.MIN_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 > Integer.MIN_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 < Integer.MAX_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 < Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 > Integer.MIN_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 > Integer.MIN_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 < Integer.MAX_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 < Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 > Integer.MIN_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 > Integer.MIN_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 < Integer.MAX_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 < Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:4:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:43:
    //@ ensures \result == num1 - num2 <==> operator == '-';
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 <==> operator == '+';
    //@ ensures \result == num1 - num2 <==> operator == '-';
    //@ ensures \result == num1 * num2 <==> operator == '*';
    //@ ensures num2 != 0 ==> \result == num1 / num2 <==> operator == '/';
    //@ ensures num2 != 0 ==> \result == num1 % num2 <==> operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 + num2 > Integer.MIN_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 > Integer.MIN_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 > Integer.MIN_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
	    	//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
