
public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining n >= 0;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining n >= 0;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}



/home/max/Documents/JMLGPT/tmp/AddLoop.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:17: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
2 verification failures


public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining n >= 0;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining n >= 0;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

/home/max/Documents/JMLGPT/tmp/AddLoop.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:17: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
2 verification failures



public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures



public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}


/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures




public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}



/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures




public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}



/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures




public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}



/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures





public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}




/home/max/Documents/JMLGPT/tmp/AddLoop.java:20: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures





public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}




/home/max/Documents/JMLGPT/tmp/AddLoop.java:20: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures





public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}




/home/max/Documents/JMLGPT/tmp/AddLoop.java:20: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures





public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}




/home/max/Documents/JMLGPT/tmp/AddLoop.java:20: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x + y + n;
                ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
2 verification failures






public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining sum == x + y - n;
            //@ maintaining 0 <= n && n <= y;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n;
            //@ maintaining 0 <= n && n <= -y;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}





