public class BubbleSort { 
    //@ requires array != null;
    //@ ensures (\forall int i; 0 <= i && i < array.length - 1; array[i] <= array[i+1]);
    //@ ensures \result != null && \result.length == array.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:2: error: cannot find symbol
    //@ requires array != null;
                 ^
  symbol:   variable array
  location: class BubbleSort
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:3: error: non-static variable length cannot be referenced from a static context
    //@ ensures (\forall int i; 0 <= i && i < array.length - 1; array[i] <= array[i+1]);
                                                   ^
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:3: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < array.length - 1; array[i] <= array[i+1]);
                                                                ^
  symbol:   variable array
  location: class BubbleSort
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:3: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < array.length - 1; array[i] <= array[i+1]);
                                                                            ^
  symbol:   variable array
  location: class BubbleSort
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:4: error: non-static variable length cannot be referenced from a static context
    //@ ensures \result != null && \result.length == array.length;
                                                          ^
5 errors

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

public class BubbleSort { 
    //@ requires arr != null;
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i+1]);
    //@ ensures \result != null && \result.length == arr.length;
    public int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; arr[k] <= arr[k+1]);
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method bubbleSort
        //@ maintaining 0 <= i && i <= n-1;
            ^
1 verification failure

