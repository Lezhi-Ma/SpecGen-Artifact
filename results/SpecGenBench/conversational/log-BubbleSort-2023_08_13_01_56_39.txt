public class BubbleSort { 
    //@ requires array.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] <= \result[i+1]);
    public /*@ pure @*/ int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int l; 0 <= l && l < arr.length - k - 1; arr[l] <= arr[l+1]));
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:2: error: non-static variable length cannot be referenced from a static context
    //@ requires array.length > 0;
                      ^
1 error

public class BubbleSort { 
    //@ requires arr.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] <= \result[i+1]);
    public /*@ pure @*/ int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int l; 0 <= l && l < arr.length - k - 1; arr[l] <= arr[l+1]));
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:17: verify: The prover cannot establish an assertion (Assignable: /home/max/Documents/JMLGPT/tmp/BubbleSort.java:4:) in method bubbleSort: \everything
		            swap(j, j + 1, arr); 
		                ^
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BubbleSort.java:17:
    public /*@ pure @*/ int[] bubbleSort(int arr[]) {
               ^
2 verification failures

public class BubbleSort { 
    //@ requires arr.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] <= \result[i+1]);
    public /*@ pure @*/ int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int l; 0 <= l && l < arr.length - k - 1; arr[l] <= arr[l+1]));
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:17: verify: The prover cannot establish an assertion (Assignable: /home/max/Documents/JMLGPT/tmp/BubbleSort.java:4:) in method bubbleSort: \everything
		            swap(j, j + 1, arr); 
		                ^
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BubbleSort.java:17:
    public /*@ pure @*/ int[] bubbleSort(int arr[]) {
               ^
2 verification failures

public class BubbleSort { 
    //@ requires arr.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] <= \result[i+1]);
    public /*@ pure @*/ int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int l; 0 <= l && l < arr.length - k - 1; arr[l] <= arr[l+1]));
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:17: verify: The prover cannot establish an assertion (Assignable: /home/max/Documents/JMLGPT/tmp/BubbleSort.java:4:) in method bubbleSort: \everything
		            swap(j, j + 1, arr); 
		                ^
/home/max/Documents/JMLGPT/tmp/BubbleSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BubbleSort.java:17:
    public /*@ pure @*/ int[] bubbleSort(int arr[]) {
               ^
2 verification failures

public class BubbleSort { 
    //@ requires arr.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] <= \result[i+1]);
    public /*@ pure @*/ int[] bubbleSort(int arr[]) {
        int n = arr.length;

        //@ maintaining 0 <= i && i <= n-1;
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int l; 0 <= l && l < arr.length - k - 1; arr[l] <= arr[l+1]));
        //@ decreases n - 1 - i;
        for (int i = 0; i < n-1; i++) {	

            //@ maintaining 0 <= j && j <= n-i-1;
            //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[k+1]);
            //@ decreases n - i - 1 - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		            swap(j, j + 1, arr); 
                } 
	        }
	    } 
	    return arr;
    } 

    //@ requires 0 <= x && x < array.length && 0 <= y && y < array.length;
    //@ ensures array[x] == \old(array[y]) && array[y] == \old(array[x]);
    private void swap(int x, int y,  int array[]) {
	   int temp;     
       temp = array[x];
       array[x] = array[y];
       array[y] = temp;
    }
}
