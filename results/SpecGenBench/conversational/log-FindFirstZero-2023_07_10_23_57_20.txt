public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (x.length - index > 0 && x[index] != 0) {
                index = index + 1;
            }
            if (x.length - index == 0) {
                index = -1;
            }
            return index;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return index;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (x.length - index > 0 && x[index] != 0) {
                index = index + 1;
            }
            if (x.length - index == 0) {
                index = -1;
            }
            return index;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return index;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length && x[index] != 0) {
                index = index + 1;
            }
            if (index == x.length) {
                index = -1;
            }
            return index;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return index;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

public class FindFirstZero {

    /*@ requires x.length >= 0;
      @ ensures \result == -1 <==> x.length == 0;
      @ ensures -1 < \result ==> (0 <= \result && \result < x.length && x[\result] == 0);
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);
      @*/
    public static int FindFirstZero(int[] x) {
        assert x.length >= 0;
        if (x.length == 0) {
            return -1;
        } else {
            int index = 0;

            //@ maintaining 0 <= index && index <= x.length;
            //@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);
            //@ decreases x.length - index;
            while (index < x.length) {
                if (x[index] == 0) {
                    return index;
                }
                index = index + 1;
            }
            return -1;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4:) in method FindFirstZero
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:24:
      @ ensures \result == -1 <==> x.length == 0;
        ^
2 verification failures

