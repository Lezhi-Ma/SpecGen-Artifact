public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        for(int i = 0; i < n ; i++) {
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:9: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        for(int i = 0; i < n ; i++) {
            //@ assume n - i - 1 >= 0;
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:11: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        for(int i = 0; i < n ; i++) {
            //@ assume n - i - 1 >= 0;
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:11: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        for(int i = 0; i < n ; i++) {
            //@ assume n - i - 1 >= 0;
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:11: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        for(int i = 0; i < n ; i++) {
            //@ assume n - i - 1 >= 0;
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:11: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        for(int i = 0; i < n ; i++) {
            //@ assume 0 <= n - i - 1;
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:11: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        for(int i = 0; i < n ; i++) {
            //@ assume n - i - 1 >= 0;
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:11: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        //@ assume (\forall int i; 0 <= i && i < n; n - i - 1 >= 0);
        for(int i = 0; i < n ; i++) {
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:11: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        //@ assume (\forall int i; 0 <= i && i < n; n - i - 1 >= 0);
        for(int i = 0; i < n ; i++) {
            //@ assume n - i - 1 >= 0;
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:12: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

public class ReverseArray {
    //@ requires original != null;
    //@ ensures \result != null && \result.length == original.length;
    //@ ensures (\forall int i; 0 <= i && i < original.length; \result[i] == original[original.length - i - 1]);
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        //@ assume n >= 0;
        //@ assume (\forall int i; 0 <= i && i < n; n - i - 1 >= 0);
        for(int i = 0; i < n ; i++) {
            //@ assume 0 <= n - i - 1;
            res[i] = original[n - i - 1];
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:12: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method reverse
            res[i] = original[n - i - 1];
               ^
1 verification failure

