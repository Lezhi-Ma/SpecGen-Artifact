public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:6:) in method isPrefix
                return false;
                ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:16:
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:7:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:7:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length() && i < txt.length()) {
            if(pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return pat.length() <= txt.length();
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:6:) in method isPrefix
        return pat.length() <= txt.length();
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length() && i < txt.length()) {
            if(pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:7:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length() && i < txt.length()) {
            if(pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return pat.length() <= txt.length() && i == pat.length();
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:6:) in method isPrefix
        return pat.length() <= txt.length() && i == pat.length();
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length() && i < txt.length()) {
            if(pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length();
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:6:) in method isPrefix
        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length();
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length() && i < txt.length()) {
            if(pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length() && i >= 0;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:6:) in method isPrefix
        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length() && i >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length() && i < txt.length()) {
            if(pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length() && i >= 0 && i <= pat.length();
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:6:) in method isPrefix
        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length() && i >= 0 && i <= pat.length();
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length() && i < txt.length()) {
            if(pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length() && i >= 0 && i <= pat.length() && i <= txt.length();
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:6:) in method isPrefix
        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length() && i >= 0 && i <= pat.length() && i <= txt.length();
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    /*@ requires pat != null && txt != null;
      @ requires (\forall int i; 0 <= i && i < pat.length(); (int)Character.MIN_VALUE <= (int)pat.charAt(i) && (int)pat.charAt(i) <= (int)Character.MAX_VALUE);
      @ requires (\forall int i; 0 <= i && i < txt.length(); (int)Character.MIN_VALUE <= (int)txt.charAt(i) && (int)txt.charAt(i) <= (int)Character.MAX_VALUE);
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
      @ ensures \result <==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    */
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j < txt.length(); pat.charAt(j) == txt.charAt(j));
        //@ decreases pat.length() - i;
        while(i < pat.length() && i < txt.length()) {
            if(pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length() && i >= 0 && i <= pat.length() && i <= txt.length() && i >= 0;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:6:) in method isPrefix
        return pat.length() <= txt.length() && i == pat.length() && i <= txt.length() && i >= 0 && i <= pat.length() && i <= txt.length() && i >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:21:
      @ ensures \result <==> (\forall int i; 0 <= i && i < pat.length() && i < txt.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

