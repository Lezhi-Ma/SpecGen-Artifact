public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:37: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining 2 <= index && index <= fib.length;
		    ^
1 verification failure

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == 0);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == 0);
		    ^
1 verification failure

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		    ^
1 verification failure

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		    ^
1 verification failure

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: error: Loop specifications must immediately precede a loop statement
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
		//@ assert (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
			fib[index] = fib[index - 2] + fib[index - 1];
			                            ^
1 verification failure

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE && Long.MIN_VALUE <= fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
		//@ assert (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:37: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining 2 <= index && index <= fib.length;
		    ^
1 verification failure

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size;
	//@ ensures fib[0] == 0;
	//@ ensures fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ assignable fib[*];
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ maintaining 2 <= index && index <= fib.length;
			//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
			//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ maintaining 2 <= index && index <= fib.length;
			    ^
1 error

