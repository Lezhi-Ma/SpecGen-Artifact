public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == (\sum int i; 0 <= i && i < 10; 10);
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (\sum int j; 0 <= j && j < 10; 1) * (i + 1);
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: error: variable i is already defined in method return100()
        //@ maintaining res == (\sum int i; 0 <= i && i < 10; 10);
                                         ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: error: variable j is already defined in method return100()
            //@ maintaining res == (\sum int j; 0 <= j && j < 10; 1) * (i + 1);
                                             ^
2 errors

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (\sum int j; 0 <= j && j < 10; 1) * (i + 1);
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: error: variable j is already defined in method return100()
            //@ maintaining res == (\sum int j; 0 <= j && j < 10; 1) * (i + 1);
                                             ^
1 error

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 < 10; 1) * (i + 1);
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 < 10; 1) * (i + 1);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 < 10; 1) * (i + 1);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 < 10; 1) * (i + 1);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
            ^
6 warnings
1 verification failure

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 <= i; 1) * 10;
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 <= i; 1) * 10;
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 <= i; 1) * 10;
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 <= i; 1) * 10;
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
            ^
6 warnings
1 verification failure

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 < 10; 1) * (i + 1);
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 < 10; 1) * (i + 1);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 < 10; 1) * (i + 1);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
            //@ maintaining res == (\sum int j1; 0 <= j1 && j1 < 10; 1) * (i + 1);
                                    ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
                                ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == (\sum int i1; 0 <= i1 && i1 < 10; 10);
            ^
6 warnings
1 verification failure

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == 100;
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (i + 1) * 10;
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
        //@ maintaining res == 100;
            ^
1 verification failure

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == 0;
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (i + 1) * 10;
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
            //@ maintaining res == (i + 1) * 10;
                ^
1 verification failure

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == 0;
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (i + 1) * 10 + j;
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
            //@ maintaining res == (i + 1) * 10 + j;
                ^
1 verification failure

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == 0;
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (i + 1) * 10 + j;
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
            res = res + i * 10;
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:2:) in method return100
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Return100Nested.java:17:
    //@ ensures \result == 100;
        ^
2 verification failures

public class Return100Nested {
    //@ ensures \result == 100;
    public static int return100 () {
        int res = 0;
        //@ maintaining res == 0;
        //@ maintaining 0 <= i && i <= 10;
        //@ decreases 10 - i;
        for(int i = 0; i < 10; i++) {
            //@ maintaining res == (i + 1) * 10 + j;
            //@ maintaining 0 <= j && j <= 10;
            //@ decreases 10 - j;
            for(int j = 0; j < 10; j++) {
                res = res + 1;
            }
            res = res + i * 10;
        }
        //@ assert res == 100;
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/Return100Nested.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method return100
            //@ maintaining res == (i + 1) * 10 + j;
                ^
1 verification failure

