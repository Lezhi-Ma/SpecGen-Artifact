public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*j*k;
        //@ maintaining 0 <= i && i <= x;
        //@ maintaining 0 <= j && j <= x;
        //@ maintaining 0 <= k && k <= x;
        //@ decreases x - i;
        for(int i = 0; i < x; i++) {
            //@ decreases x - j;
            for(int j = 0; j < x; j++) {
                //@ decreases x - k;
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                }
            }
        }
        return (neg ? -res : res);
    }

}
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: error: cannot find symbol
        //@ maintaining res == i*j*k;
                                 ^
  symbol:   variable j
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: error: cannot find symbol
        //@ maintaining res == i*j*k;
                                   ^
  symbol:   variable k
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:14: error: cannot find symbol
        //@ maintaining 0 <= j && j <= x;
                             ^
  symbol:   variable j
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:14: error: cannot find symbol
        //@ maintaining 0 <= j && j <= x;
                                  ^
  symbol:   variable j
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:15: error: cannot find symbol
        //@ maintaining 0 <= k && k <= x;
                             ^
  symbol:   variable k
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:15: error: cannot find symbol
        //@ maintaining 0 <= k && k <= x;
                                  ^
  symbol:   variable k
  location: class IntCube
6 errors

public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*j*k;
        //@ maintaining 0 <= i && i <= x;
        //@ maintaining 0 <= j && j <= x;
        //@ maintaining 0 <= k && k <= x;
        //@ decreases x - i;
        for(int i = 0; i < x; i++) {
            //@ decreases x - j;
            for(int j = 0; j < x; j++) {
                //@ decreases x - k;
                for(int k = 0; k < x; k++) {
                    res = res + 1;
                }
            }
        }
        return (neg ? -res : res);
    }

}
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: error: cannot find symbol
        //@ maintaining res == i*j*k;
                                 ^
  symbol:   variable j
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: error: cannot find symbol
        //@ maintaining res == i*j*k;
                                   ^
  symbol:   variable k
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:14: error: cannot find symbol
        //@ maintaining 0 <= j && j <= x;
                             ^
  symbol:   variable j
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:14: error: cannot find symbol
        //@ maintaining 0 <= j && j <= x;
                                  ^
  symbol:   variable j
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:15: error: cannot find symbol
        //@ maintaining 0 <= k && k <= x;
                             ^
  symbol:   variable k
  location: class IntCube
/home/max/Documents/JMLGPT/tmp/IntCube.java:15: error: cannot find symbol
        //@ maintaining 0 <= k && k <= x;
                                  ^
  symbol:   variable k
  location: class IntCube
6 errors

public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*i*i;
        //@ maintaining 0 <= i && i <= x;
        //@ decreases x - i;
        for(int i = 0; i < x; i++) {
            res = res + i*i*i;
        }
        return (neg ? -res : res);
    }

}
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: The prover cannot establish an assertion (LoopInvariant) in method cubeOf
        //@ maintaining res == i*i*i;
            ^
1 verification failure

public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*i*i;
        //@ maintaining 0 <= i && i <= x;
        //@ decreases x - i;
        for(int i = 0; i <= x; i++) {
            res = res + i*i*i;
        }
        return (neg ? -res : res);
    }

}
/home/max/Documents/JMLGPT/tmp/IntCube.java:12: verify: The prover cannot establish an assertion (LoopInvariant) in method cubeOf
        //@ maintaining res == i*i*i;
            ^
1 verification failure

public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*i*i;
        //@ maintaining 0 <= i && i <= x+1;
        //@ decreases x - i;
        for(int i = 0; i <= x; i++) {
            res = res + i*i*i;
        }
        return (neg ? -res : res);
    }

}
/home/max/Documents/JMLGPT/tmp/IntCube.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:4:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:18:
    //@ ensures \result == x*x*x;
        ^
2 verification failures

public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*i*i;
        //@ maintaining 0 <= i && i <= x+1;
        //@ decreases x - i;
        for(int i = 0; i <= x; i++) {
            res = res + i*i*i;
        }
        return (neg ? -res : res);
    }

}
/home/max/Documents/JMLGPT/tmp/IntCube.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntCube.java:4:) in method cubeOf
        return (neg ? -res : res);
        ^
/home/max/Documents/JMLGPT/tmp/IntCube.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntCube.java:18:
    //@ ensures \result == x*x*x;
        ^
2 verification failures

public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*i*i;
        //@ maintaining 0 <= i && i <= x+1;
        //@ decreases x - i;
        for(int i = 0; i <= x; i++) {
            res = res + i*i*i;
        }
        int result = (neg ? -res : res);
        assert result == x*x*x;
        return result;
    }

}
/home/max/Documents/JMLGPT/tmp/IntCube.java:19: verify: The prover cannot establish an assertion (Assert) in method cubeOf
        assert result == x*x*x;
        ^
1 verification failure

public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*i*i;
        //@ maintaining 0 <= i && i <= x+1;
        //@ decreases x - i;
        for(int i = 0; i <= x; i++) {
            res = res + i*i*i;
        }
        int result = (neg ? -res : res);
        assert result == x*x*x : "Cube calculation is incorrect";
        return result;
    }

}
/home/max/Documents/JMLGPT/tmp/IntCube.java:19: verify: The prover cannot establish an assertion (Assert) in method cubeOf: Cube calculation is incorrect
        assert result == x*x*x : "Cube calculation is incorrect";
        ^
1 verification failure

public class IntCube {

    //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
    //@ ensures \result == x*x*x;
    public static int cubeOf(int x) {
        boolean neg = false;
        if(x < 0) {
            neg = true;
            x = -x;
        }
        int res = 0;
        //@ maintaining res == i*i*i;
        //@ maintaining 0 <= i && i <= x+1;
        //@ decreases x - i;
        for(int i = 0; i <= x; i++) {
            res = res + i*i*i;
        }
        int result = (neg ? -res : res);
        assert result == x*x*x : "Cube calculation is incorrect: " + result + " != " + (x*x*x);
        return result;
    }

}
