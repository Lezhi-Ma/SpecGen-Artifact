public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> \result >= 0 && \result < arr.length;
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> \result == -1;
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:13: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method uniqueNum
                if(i != j && arr[i] == arr[j])
                                ^
1 verification failure

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> \result >= 0 && \result < arr.length;
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> \result == -1;
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> \result >= 0 && \result < arr.length;
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> \result >= 0 && \result < arr.length;
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> \result == -1;
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> \result >= 0 && \result < arr.length;
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> (\result == -1);
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> (\result == -1);
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> (\result == -1);
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> (\result == -1);
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> (\result == -1);
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> (\result == -1);
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires arr != null && arr.length > 0;
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
    //@ ensures !(\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j])) ) ==> (\result == -1);
    public static int uniqueNum(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ assume 0 <= i && i < arr.length;
            //@ assume 0 <= j && j < arr.length;
            //@ assume i != j ==> arr[i] != arr[j];
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; (k != i ==> arr[i] != arr[k]));
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:23:
    //@ ensures (\exists int i; 0 <= i && i < arr.length; (\forall int j; 0 <= j && j < arr.length; (i != j ==> arr[i] != arr[j]))) ==> (\result >= 0 && \result < arr.length);
        ^
2 verification failures

