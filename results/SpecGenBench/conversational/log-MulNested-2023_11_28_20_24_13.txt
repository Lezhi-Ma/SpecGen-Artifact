public class MulNested {
    //@ requires Integer.MIN_VALUE <= x * y && x * y <= Integer.MAX_VALUE;
    //@ ensures \result == x * y;
    public static int mulNested(int x, int y) {
        int res = 0, m = x, n = y, sign = 1;
        if(x < 0){
            m = -x;
            sign = -sign;
        }
        if(y < 0){
            n = -y;
            sign = -sign;
        }
        //@ maintaining res == sign * (x - m) * y + sign * (m - x) * y + sign * (x - m) * (y - n) + sign * (m - x) * (y - n);
        //@ maintaining 0 <= m && m <= x && 0 <= n && n <= y;
        //@ decreases m;
        for(int i = 0; i < m; i++) {
            //@ maintaining res == sign * (x - m) * y + sign * (m - i) * y + sign * (x - m) * (y - n) + sign * (m - i) * (y - n);
            //@ maintaining 0 <= i && i <= m;
            //@ decreases n;
            for(int j = 0; j < n; j++) {
                res = res + 1;
            }
        }
        return sign * res;
    }
}
/home/max/Documents/JMLGPT/tmp/MulNested.java:15: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulNested
        //@ maintaining 0 <= m && m <= x && 0 <= n && n <= y;
            ^
1 verification failure

public class MulNested {
    //@ requires Integer.MIN_VALUE <= x * y && x * y <= Integer.MAX_VALUE;
    //@ ensures \result == x * y;
    public static int mulNested(int x, int y) {
        int res = 0, m = x, n = y, sign = 1;
        if(x < 0){
            m = -x;
            sign = -sign;
        }
        if(y < 0){
            n = -y;
            sign = -sign;
        }
        //@ maintaining res == sign * (x - m) * y + sign * (m - x) * y + sign * (x - m) * (y - n) + sign * (m - x) * (y - n);
        //@ maintaining 0 <= m && m <= x && 0 <= n && n <= y;
        //@ decreases m;
        for(int i = 0; i < m; i++) {
            //@ maintaining res == sign * (x - m) * y + sign * (m - i) * y + sign * (x - m) * (y - n) + sign * (m - i) * (y - n);
            //@ maintaining 0 <= i && i <= m;
            //@ decreases n;
            for(int j = 0; j < n; j++) {
                res = res + 1;
            }
        }
        return sign * res;
    }
}
/home/max/Documents/JMLGPT/tmp/MulNested.java:15: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulNested
        //@ maintaining 0 <= m && m <= x && 0 <= n && n <= y;
            ^
1 verification failure

public class MulNested {
    //@ requires Integer.MIN_VALUE <= x * y && x * y <= Integer.MAX_VALUE;
    //@ ensures \result == x * y;
    public static int mulNested(int x, int y) {
        int res = 0, m = x, n = y, sign = 1;
        if(x < 0){
            m = -x;
            sign = -sign;
        }
        if(y < 0){
            n = -y;
            sign = -sign;
        }
        //@ maintaining res == sign * (x - m) * y + sign * (m - x) * y + sign * (x - m) * (y - n) + sign * (m - x) * (y - n);
        //@ maintaining 0 <= m && m <= x && 0 <= n && n <= y;
        //@ decreases m;
        for(int i = 0; i <= m; i++) {
            //@ maintaining res == sign * (x - m) * y + sign * (m - i) * y + sign * (x - m) * (y - n) + sign * (m - i) * (y - n);
            //@ maintaining 0 <= i && i <= m;
            //@ decreases n;
            for(int j = 0; j <= n; j++) {
                res = res + 1;
            }
        }
        return sign * res;
    }
}
/home/max/Documents/JMLGPT/tmp/MulNested.java:15: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulNested
        //@ maintaining 0 <= m && m <= x && 0 <= n && n <= y;
            ^
1 verification failure

public class MulNested {
    //@ requires Integer.MIN_VALUE <= x * y && x * y <= Integer.MAX_VALUE;
    //@ ensures \result == x * y;
    public static int mulNested(int x, int y) {
        int res = 0, m = x, n = y, sign = 1;
        if(x < 0){
            m = -x;
            sign = -sign;
        }
        if(y < 0){
            n = -y;
            sign = -sign;
        }
        //@ maintaining res == sign * (x - m) * y + sign * (m - x) * y + sign * (x - m) * (y - n) + sign * (m - x) * (y - n);
        //@ maintaining 0 <= m && m <= x && 0 <= n && n <= y;
        //@ decreases m;
        for(int i = 0; i <= m; i++) {
            //@ maintaining res == sign * (x - m) * y + sign * (m - i) * y + sign * (x - m) * (y - n) + sign * (m - i) * (y - n);
            //@ maintaining 0 <= i && i <= m;
            //@ decreases n;
            for(int j = 0; j <= n; j++) {
                res = res + 1;
            }
        }
        return sign * res;
    }
}
/home/max/Documents/JMLGPT/tmp/MulNested.java:15: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulNested
        //@ maintaining 0 <= m && m <= x && 0 <= n && n <= y;
            ^
1 verification failure

public class MulNested {
    //@ requires Integer.MIN_VALUE <= x * y && x * y <= Integer.MAX_VALUE;
    //@ ensures \result == x * y;
    public static int mulNested(int x, int y) {
        int res = 0, m = x, n = y, sign = 1;
        if(x < 0){
            m = -x;
            sign = -sign;
        }
        if(y < 0){
            n = -y;
            sign = -sign;
        }
        //@ maintaining res == sign * (x - m) * y + sign * (m - x) * y + sign * (x - m) * (y - n) + sign * (m - x) * (y - n);
        //@ maintaining 0 <= m && m <= Math.abs(x) && 0 <= n && n <= Math.abs(y);
        //@ decreases m;
        for(int i = 0; i <= m; i++) {
            //@ maintaining res == sign * (x - m) * y + sign * (m - i) * y + sign * (x - m) * (y - n) + sign * (m - i) * (y - n);
            //@ maintaining 0 <= i && i <= m;
            //@ decreases n;
            for(int j = 0; j <= n; j++) {
                res = res + 1;
            }
        }
        return sign * res;
    }
}
