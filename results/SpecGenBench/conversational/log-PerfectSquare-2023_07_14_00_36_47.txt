class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        //@ maintaining (\forall int i; 1 <= i && i < \old(i); i * i != num);
        //@ maintaining (\exists int i; 1 <= i && i * i <= num; i * i == num);
        //@ decreases num - i * i;
        for(int i = 1; i * i <= num; i++) {
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: error: variable i is already defined in method isPerfectSquare(int)
        //@ maintaining (\forall int i; 1 <= i && i < \old(i); i * i != num);
                                     ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: error: variable i is already defined in method isPerfectSquare(int)
        //@ maintaining (\exists int i; 1 <= i && i * i <= num; i * i == num);
                                     ^
2 errors

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j * j <= num; j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j * j <= num; j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
        //@ decreases num - i * i;
        while(i <= num/i) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i <= num/i) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i * i <= num) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
        //@ decreases num - i * i;
        while(i <= num/i) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i <= num/i) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
        //@ decreases num - i * i;
        while(i <= num/i) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining (\exists int j; 1 <= j && j <= i && j * j == num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> num == 0 || (\exists int i; 1 <= i && i * i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        if(num == 0)
            return true;

        int i = 1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ maintaining (\exists int j; 1 <= j && j < i && j * j == num);
        //@ decreases num - i * i;
        while(i <= num/i) {
            if(i * i == num)
                return true;
            i++;
        }
        return false;
    }
}
