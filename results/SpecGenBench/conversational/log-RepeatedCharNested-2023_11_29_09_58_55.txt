public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ ghost int j_counter;
            //@ set j_counter = 0;
            //@ maintaining i + 1 <= j && j < s.length();
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
                //@ set j_counter = j_counter + 1;
            }
            //@ assert j_counter == s.length() - (i + 1);
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == s.length();
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method repeatedChar
            //@ maintaining i + 1 <= j && j < s.length();
                ^
1 verification failure

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ ghost int j_counter;
            //@ set j_counter = 0;
            //@ maintaining i + 1 <= j && j < s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(i) != s.charAt(k));
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
                //@ set j_counter = j_counter + 1;
            }
            //@ assert j_counter == s.length() - (i + 1);
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == s.length();
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method repeatedChar
        //@ maintaining -1 <= i && i < s.length();
            ^
1 verification failure

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ maintaining -1 <= i && i < s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j < s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(i) != s.charAt(k));
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:6: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method repeatedChar
        //@ maintaining -1 <= i && i < s.length();
            ^
1 verification failure

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ maintaining 0 <= i && i < s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j < s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(i) != s.charAt(k));
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method repeatedChar
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(i) != s.charAt(k));
                ^
1 verification failure

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ maintaining 0 <= i && i < s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j < s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(k) != c1);
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:6: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method repeatedChar
        //@ maintaining 0 <= i && i < s.length();
            ^
1 verification failure

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j <= s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(k) != c1);
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3:) in method repeatedChar
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
        ^
2 verification failures

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j <= s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(k) != c1);
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        //@ assert (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j)) <==> \result == -1;
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: error: A \result expression may not be in a assert clause
        //@ assert (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j)) <==> \result == -1;
                                                                                                                             ^
1 error

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j <= s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(k) != c1);
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3:) in method repeatedChar
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:19:
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
        ^
2 verification failures

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j)) ==> \result == -1;
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j <= s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(k) != c1);
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:4:) in method repeatedChar
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:20:
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j));
        ^
2 verification failures

public class RepeatedCharNested {
    //@ requires (\forall int i; 0 <= i && i < s.length(); (int)Character.MIN_VALUE <= (int)s.charAt(i) && (int)s.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures (\forall int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) != s.charAt(j)) ==> \result == -1;
    //@ ensures (\exists int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) == s.charAt(j)) ==> -1 < \result;
    //@ ensures -1 < \result ==> s.charAt(\result) == s.charAt(\result + 1);
    public static int repeatedChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ maintaining i + 1 <= j && j <= s.length();
            //@ maintaining (\forall int k; i <= k && k < j; s.charAt(k) != c1);
            //@ decreases s.length() - j;
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
            }
        }
        return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:4:) in method repeatedChar
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/RepeatedCharNested.java:20:
    //@ ensures (\exists int i, j; 0 <= i && i < s.length() && i < j && j < s.length(); s.charAt(i) == s.charAt(j)) ==> -1 < \result;
        ^
2 verification failures

