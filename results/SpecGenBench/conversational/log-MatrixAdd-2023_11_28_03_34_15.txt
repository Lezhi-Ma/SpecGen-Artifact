public class MatrixAdd {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][j] + b[i][j];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:10: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                c[i][j] = a[i][j] + b[i][j];
                  ^
  Reason: Double rewriting of ident: i i_387_387___37 i_387_401___40
1 error

public class MatrixAdd {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        //@ maintaining 0 <= i && i <= 2;
        //@ maintaining (\forall int k, l; 0 <= k && k < i && 0 <= l && l < 2; c[k][l] == a[k][l] + b[k][l]);
        //@ decreases 2 - i;
        for (int i = 0; i < 2; i++) {
            //@ maintaining 0 <= j && j <= 2;
            //@ maintaining (\forall int l; 0 <= l && l < j; c[i][l] == a[i][l] + b[i][l]);
            //@ decreases 2 - j;
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][j] + b[i][j];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:16: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                c[i][j] = a[i][j] + b[i][j];
                  ^
  Reason: Double rewriting of ident: i i_568_568___36 i_568_582___42
1 error

public class MatrixAdd {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        //@ maintaining 0 <= i && i <= 1;
        //@ maintaining (\forall int k, l; 0 <= k && k <= i && 0 <= l && l < 2; c[k][l] == a[k][l] + b[k][l]);
        //@ decreases 2 - i;
        for (int i = 0; i < 2; i++) {
            //@ maintaining 0 <= j && j <= 1;
            //@ maintaining (\forall int l; 0 <= l && l <= j; c[i][l] == a[i][l] + b[i][l]);
            //@ decreases 2 - j;
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][j] + b[i][j];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:16: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                c[i][j] = a[i][j] + b[i][j];
                  ^
  Reason: Double rewriting of ident: i i_569_569___36 i_569_583___42
1 error

public class MatrixAdd {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        c[0][0] = a[0][0] + b[0][0];
        c[0][1] = a[0][1] + b[0][1];
        c[1][0] = a[1][0] + b[1][0];
        c[1][1] = a[1][1] + b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:8: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method add
        c[0][0] = a[0][0] + b[0][0];
            ^
1 verification failure

public class MatrixAdd {
    
    //@ requires a.length == 2 && b.length == 2 && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result.length == 2 && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        c[0][0] = a[0][0] + b[0][0];
        c[0][1] = a[0][1] + b[0][1];
        c[1][0] = a[1][0] + b[1][0];
        c[1][1] = a[1][1] + b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:8: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method add
        c[0][0] = a[0][0] + b[0][0];
            ^
1 verification failure

public class MatrixAdd {
    
    //@ requires a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0] != null && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        c[0][0] = a[0][0] + b[0][0];
        c[0][1] = a[0][1] + b[0][1];
        c[1][0] = a[1][0] + b[1][0];
        c[1][1] = a[1][1] + b[1][1];
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:8: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method add
        c[0][0] = a[0][0] + b[0][0];
            ^
1 verification failure

public class MatrixAdd {
    
    //@ requires a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0] != null && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        if (a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2) {
            c[0][0] = a[0][0] + b[0][0];
            c[0][1] = a[0][1] + b[0][1];
            c[1][0] = a[1][0] + b[1][0];
            c[1][1] = a[1][1] + b[1][1];
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:9: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method add
            c[0][0] = a[0][0] + b[0][0];
                ^
1 verification failure

public class MatrixAdd {
    
    //@ requires a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0] != null && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        if (a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2) {
            if (a[0][0] != null && b[0][0] != null) {
                c[0][0] = a[0][0] + b[0][0];
            }
            if (a[0][1] != null && b[0][1] != null) {
                c[0][1] = a[0][1] + b[0][1];
            }
            if (a[1][0] != null && b[1][0] != null) {
                c[1][0] = a[1][0] + b[1][0];
            }
            if (a[1][1] != null && b[1][1] != null) {
                c[1][1] = a[1][1] + b[1][1];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:9: error: bad operand types for binary operator '!='
            if (a[0][0] != null && b[0][0] != null) {
                        ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:9: error: bad operand types for binary operator '!='
            if (a[0][0] != null && b[0][0] != null) {
                                           ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:12: error: bad operand types for binary operator '!='
            if (a[0][1] != null && b[0][1] != null) {
                        ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:12: error: bad operand types for binary operator '!='
            if (a[0][1] != null && b[0][1] != null) {
                                           ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:15: error: bad operand types for binary operator '!='
            if (a[1][0] != null && b[1][0] != null) {
                        ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:15: error: bad operand types for binary operator '!='
            if (a[1][0] != null && b[1][0] != null) {
                                           ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:18: error: bad operand types for binary operator '!='
            if (a[1][1] != null && b[1][1] != null) {
                        ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:18: error: bad operand types for binary operator '!='
            if (a[1][1] != null && b[1][1] != null) {
                                           ^
  first type:  int
  second type: <null>
8 errors

public class MatrixAdd {
    
    //@ requires a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0] != null && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        if (a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2) {
            if (a[0][0] != 0 && b[0][0] != 0) {
                c[0][0] = a[0][0] + b[0][0];
            }
            if (a[0][1] != 0 && b[0][1] != 0) {
                c[0][1] = a[0][1] + b[0][1];
            }
            if (a[1][0] != 0 && b[1][0] != 0) {
                c[1][0] = a[1][0] + b[1][0];
            }
            if (a[1][1] != 0 && b[1][1] != 0) {
                c[1][1] = a[1][1] + b[1][1];
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:15: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method add
            if (a[1][0] != 0 && b[1][0] != 0) {
                    ^
1 verification failure

public class MatrixAdd {
    
    //@ requires a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2;
    //@ ensures \result != null && \result.length == 2 && \result[0] != null && \result[0].length == 2;
    //@ ensures \forall int i, j; 0 <= i && i < 2 && 0 <= j && j < 2; \result[i][j] == a[i][j] + b[i][j];
    public int[][] add(int[][] a, int[][] b) {
        int[][] c = new int[2][2];
        if (a != null && b != null && a.length == 2 && b.length == 2 && a[0] != null && b[0] != null && a[0].length == 2 && b[0].length == 2) {
            if (a.length > 1 && b.length > 1 && a[0].length > 0 && b[0].length > 0) {
                if (a[0][0] != 0 && b[0][0] != 0) {
                    c[0][0] = a[0][0] + b[0][0];
                }
                if (a[0][1] != 0 && b[0][1] != 0) {
                    c[0][1] = a[0][1] + b[0][1];
                }
                if (a[1][0] != 0 && b[1][0] != 0) {
                    c[1][0] = a[1][0] + b[1][0];
                }
                if (a[1][1] != 0 && b[1][1] != 0) {
                    c[1][1] = a[1][1] + b[1][1];
                }
            }
        }
        return c;
    }

}
/home/max/Documents/JMLGPT/tmp/MatrixAdd.java:16: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method add
                if (a[1][0] != 0 && b[1][0] != 0) {
                        ^
1 verification failure

