public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int j; i <= j && j < arr.length; arr[j] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:9: error: variable j is already defined in method selectionSort(int[])
            //@ maintaining (\forall int j; i <= j && j < arr.length; arr[j] <= arr[index]);
                                         ^
1 error

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:3:) in method selectionSort
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:4:
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        ^
2 verification failures

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 2; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 2; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 3; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

public class SelectionSortDesc {

    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < arr.length; arr[k] <= arr[index]);
            //@ decreases arr.length - index;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] > arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 2; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 3; arr[i] >= arr[i+1]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 4; arr[i] >= arr[i+1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSortDesc.java:20: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] >= arr[i+1]);
            ^
1 verification failure

