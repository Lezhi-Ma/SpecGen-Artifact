class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> n == 1;
    public boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int[] factors = {2, 3, 5};
        for (int factor : factors) {
            //@ maintaining n > 0;
            //@ maintaining (\forall int i; i >= 0 && i < factor; n % (int)Math.pow(factor, i) != 0);
            //@ decreasing n;
            while (n % factor == 0) {
                n /= factor;
            }
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNum.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNum.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNum.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNum.java:17:
    //@ ensures \result <==> n == 1;
        ^
2 verification failures

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> n == 1;
    public boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int[] factors = {2, 3, 5};
        for (int factor : factors) {
            //@ maintaining n > 0;
            //@ maintaining (\forall int i; i >= 0 && i < factor; n % (int)Math.pow(factor, i) != 0);
            //@ decreasing n;
            while (n % factor == 0) {
                n /= factor;
            }
        }
        //@ assert n == 1;
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNum.java:17: verify: The prover cannot establish an assertion (Assert) in method isUgly
        //@ assert n == 1;
            ^
1 verification failure

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> n == 1;
    public boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        int[] factors = {2, 3, 5};
        for (int factor : factors) {
            //@ maintaining n > 0;
            //@ maintaining (\forall int i; i >= 0 && i < factor; n % (int)Math.pow(factor, i) != 0);
            //@ decreasing n;
            while (n % factor == 0) {
                n /= factor;
            }
        }
        boolean isUgly = n == 1;
        //@ assert isUgly;
        return isUgly;
    }
}
