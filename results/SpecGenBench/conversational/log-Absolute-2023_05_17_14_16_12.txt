
public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    //@ ensures num >= 0 ==> \result == num;
    //@ ensures num < 0 ==> \result == -num;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    //@ ensures num >= 0 ==> \result == num;
    //@ ensures num < 0 ==> \result == -num;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    //@ ensures num >= 0 ==> \result == num;
    //@ ensures num < 0 ==> \result == -num;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:11: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:22: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:33: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result == (num >= 0 ? num : (short)-num);
    public short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result == (num >= 0 ? num : -num);
    public int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result == (num >= 0 ? num : -num);
    public long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    //@ ensures \result == num || \result == -num;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    //@ ensures \result == num || \result == -num;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0;
    //@ ensures \result == num || \result == -num;
    public  long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:10: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:20: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:30: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
            return -num;    
                   ^
3 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public  short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0;
    public  int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >=
/home/max/Documents/JMLGPT/tmp/Absolute.java:22: error: reached end of file while parsing
    //@ ensures \result >=
                          ^
1 error


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0;
    public short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN
