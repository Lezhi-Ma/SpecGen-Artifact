public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] >= arr[index]);
            //@ decreases arr.length - i;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSort.java:4:) in method selectionSort
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSort.java:5:
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        ^
2 verification failures

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSort.java:4:) in method selectionSort
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSort.java:5:
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        ^
2 verification failures

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:21: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
            ^
1 verification failure

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:21: verify: The prover cannot establish an assertion (Assert) in method selectionSort
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
            ^
1 verification failure

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SelectionSort.java:4:) in method selectionSort
    public static void selectionSort(int[] arr){  
                       ^
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SelectionSort.java:6:
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        ^
2 verification failures

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:12: verify: The prover cannot establish an assertion (LoopDecreases) in method selectionSort
            //@ decreases arr.length - i;
                ^
1 verification failure

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i - 1;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:12: verify: The prover cannot establish an assertion (LoopDecreases) in method selectionSort
            //@ decreases arr.length - i - 1;
                ^
1 verification failure

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:12: verify: The prover cannot establish an assertion (LoopDecreases) in method selectionSort
            //@ decreases arr.length - i;
                ^
1 verification failure

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i - 1;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:12: verify: The prover cannot establish an assertion (LoopDecreases) in method selectionSort
            //@ decreases arr.length - i - 1;
                ^
1 verification failure

public class SelectionSort {

    //@ requires arr != null;
    //@ ensures (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
    //@ ensures (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            //@ maintaining i <= index && index < arr.length;
            //@ maintaining (\forall int k; i <= k && k < index; arr[k] <= arr[index]);
            //@ decreases arr.length - i;
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
        //@ assert (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);
        //@ assert (\forall int i; 0 <= i && i < arr.length - 1; arr[i] <= arr[i + 1]);
    }
    
}
/home/max/Documents/JMLGPT/tmp/SelectionSort.java:12: verify: The prover cannot establish an assertion (LoopDecreases) in method selectionSort
            //@ decreases arr.length - i;
                ^
1 verification failure

