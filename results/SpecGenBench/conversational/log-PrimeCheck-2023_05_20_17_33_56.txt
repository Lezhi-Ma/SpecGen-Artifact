
class PrimeCheck {
   
   /*@ requires a >= 2 && a <= Integer.MAX_VALUE;
     @ ensures \result <==> (\forall int i; 2 <= i && i <= a/2; a%i != 0);
     @*/
   public boolean isPrime(int a) {
	
	int i = 2;
	int mid = a/2;

	while (i <= mid) {
	   if (a%d == 0)
		return false;
	   i++;
	}
	return true;
   }
}

/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:13: error: cannot find symbol
	   if (a%d == 0)
	         ^
  symbol:   variable d
  location: class PrimeCheck
1 error


class PrimeCheck {
   
   /*@ requires a >= 2 && a <= Integer.MAX_VALUE;
     @ ensures \result <==> (\forall int i; 2 <= i && i <= a/2; a%i != 0);
     @*/
   public boolean isPrime(int a) {
	
	int i = 2;
	int mid = a/2;

	while (i <= mid) {
	   if (a%i == 0)
		return false;
	   i++;
	}
	return true;
   }
}


/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:13: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method isPrime
	   if (a%i == 0)
	        ^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:5:) in method isPrime
	return true;
	^
/home/max/Documents/JMLGPT/tmp/PrimeCheck.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PrimeCheck.java:17:
     @ ensures \result <==> (\forall int i; 2 <= i && i <= a/2; a%i != 0);
       ^
3 verification failures



class PrimeCheck {
   
   /*@ requires a >= 2 && a <= Integer.MAX_VALUE;
     @ ensures \result <==> (\forall int i; 2 <= i && i <= a/2; a%i != 0);
     @*/
   public boolean isPrime(int a) {
	
	int i = 2;
	int mid = a/2;

	//@ loop_invariant 2 <= i && i <= mid + 1;
	//@ loop_invariant (\forall int j; 2 <= j && j < i; a%j != 0);
	//@ decreases mid - i + 1;
	while (i <= mid) {
	   if (a%i == 0)
		return false;
	   i++;
	}
	return true;
   }
}



error: An error while executing a proof script for isPrime: (error "Solver has unexpectedly terminated")
1 error



class PrimeCheck {
   
   /*@ requires a >= 2 && a <= Integer.MAX_VALUE;
     @ ensures \result <==> (\forall int i; 2 <= i && i <= a/2; a%i != 0);
     @*/
   public boolean isPrime(int a) {
	
	int i = 2;
	int mid = a/2;

	//@ loop_invariant 2 <= i && i <= mid + 1;
	//@ loop_invariant (\forall int j; 2 <= j && j < i; a%j != 0);
	//@ decreases mid - i + 1;
	while (i <= mid) {
	   if (a%i == 0)
		return false;
	   i++;
	}
	return true;
   }
}


