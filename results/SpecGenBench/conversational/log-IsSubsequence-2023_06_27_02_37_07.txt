class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: warning: A non-pure method is being called where it is not permitted: IsSubsequence.isSubsequence(java.lang.String,java.lang.String)
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
                                                                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:11: verify: The prover cannot establish an assertion (LoopDecreases) in method isSubsequence
        //@ decreasing n-i;
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method isSubsequence
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
            ^
1 warning
2 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:18:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method isSubsequence
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
            ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:11: verify: The prover cannot establish an assertion (LoopDecreases) in method isSubsequence
        //@ decreasing n-i;
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method isSubsequence
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
            ^
2 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method isSubsequence
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
            ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> isSubsequence(s.substring(i), t);
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> isSubsequence(s.substring(i), t);
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length(); isSubsequence(s.substring(k), t));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length(); isSubsequence(s.substring(k), t));
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length(); isSubsequence(s.substring(k), t));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length(); isSubsequence(s.substring(k), t));
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j)));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j)));
            ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j)));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j)));
            ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j)));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j)));
            ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j)));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j)));
            ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

class IsSubsequence {
    //@ requires s != null && t != null;
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
    public /*@ pure @*/ boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        //@ maintaining 0 <= i && i <= n;
        //@ maintaining 0 <= j && j <= m;
        //@ maintaining (\forall int k; 0 <= k && k < i; s.charAt(k) == t.charAt(k));
        //@ decreasing n-i+m-j;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        //@ assert i == n || i < n;
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
        return i == n;
    }
}
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Assert) in method isSubsequence
        //@ assert i == n ==> (\exists int k; 0 <= k && k <= s.length() - n + i; isSubsequence(s.substring(k), t.substring(j - (n - i))));
            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures \result == (\exists int i; 0 <= i && i <= s.length(); isSubsequence(s.substring(i), t));
        ^
3 verification failures

