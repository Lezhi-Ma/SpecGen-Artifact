public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining low <= mid && mid < high;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:17: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:17: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:17: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  (low + high) / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = (low + high) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  (low + high) / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = (low + high) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  (low + high) / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid < i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = (low + high) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:17: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  (low + high) / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = (low + high) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  (low + high) / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid < i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = (low + high) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:17: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
                ^
1 verification failure

public class BinarySearch {

    //@ ensures arr.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key && (\forall int i; 0 <= i && i < \result; arr[i] != key);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  (low + high) / 2;

            //@ maintaining 0 <= low && low <= mid && mid < high && high <= arr.length;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; arr[i] >= key);
            //@ maintaining (\forall int i; low <= i && i < mid; arr[i] < key);
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = (low + high) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/BinarySearch.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method Binary
            //@ maintaining (\forall int i; mid <= i && i < high; arr[i] >= key);
                ^
1 verification failure

