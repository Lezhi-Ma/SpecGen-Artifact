public class Fibonacci {
   	private  long fib[];

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib[0] == 0 && fib[1] == 1;
	  @ ensures (\forall int i; 2 <= i && i < size; fib[i] == 0); @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:4: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	//@ ensures fib[0] == 0 && fib[1] == 1;
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:4: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	//@ ensures fib[0] == 0 && fib[1] == 1;
	                           ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:12: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	  @ ensures fib[0] == 0 && fib[1] == 1;
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:12: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	  @ ensures fib[0] == 0 && fib[1] == 1;
	                           ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	  @ ensures (\forall int i; 2 <= i && i < size; fib[i] == 0); @*/
	                                                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: error: An identifier with private visibility may not be used in a requires clause with public visibility
	//@ requires 0 <= index && index < fib.length;
	                                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures \result == fib[index];
	                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	                                          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	                                                      ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	                                                                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	                                                                             ^
11 errors

public class Fibonacci {
   	private  /*@ spec_public @*/ long fib[];

	/*@ ensures fib[0] == 0 && fib[1] == 1;
	  @ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0); @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib[0] == 0 && fib[1] == 1;
	  @ ensures (\forall int i; 2 <= i && i < size; fib[i] == 0); @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]); @*/
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
			fib[index] = fib[index - 2] + fib[index - 1];
			                            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method fibCompute
			fib[index] = fib[index - 2] + fib[index - 1];
			                ^
2 verification failures

public class Fibonacci {
   	private  /*@ spec_public @*/ long fib[];

	/*@ ensures fib[0] == 0 && fib[1] == 1;
	  @ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0); @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib[0] == 0 && fib[1] == 1;
	  @ ensures (\forall int i; 2 <= i && i < size; fib[i] == 0); @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 1; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		long prev1 = fib[0];
		long prev2 = fib[1];
		long current = 0;
      
		while (index < fib.length) {
			current = prev1 + prev2;
			prev1 = prev2;
			prev2 = current;
			fib[index] = current;
			index++;                        
		}
	}
}
