class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \num_of
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
                                ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \num_of
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
                                ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \num_of
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
                                ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method countNegInArray
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
            ^
3 warnings
1 verification failure

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            //@ maintaining 0 <= cnt && cnt <= i;
            //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:12: error: Loop specifications must immediately precede a loop statement
            //@ maintaining 0 <= cnt && cnt <= i;
                ^
1 error

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            //@ loop_invariant 0 <= cnt && cnt <= i;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:12: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= cnt && cnt <= i;
                ^
1 error

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
        //@ decreases arr.length - i;
        //@ loop_invariant 0 <= cnt && cnt <= i;
        //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \num_of
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
                                ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \num_of
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
                                ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:9: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \num_of
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
                                ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method countNegInArray
        //@ maintaining cnt == (\num_of int j; 0 <= j && j < i; arr[j] < 0);
            ^
3 warnings
1 verification failure

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:12: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
                ^
1 error

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:12: error: Loop specifications must immediately precede a loop statement
            //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] < 0);
                ^
1 error

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:12: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
                ^
1 error

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:12: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
                ^
1 error

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:12: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
                ^
1 error

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ decreases arr.length - i;
        //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:11: verify: The prover cannot establish an assertion (LoopInvariant) in method countNegInArray
        //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
            ^
1 verification failure

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ decreases arr.length - i;
        //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
        for (int i = 0; i < arr.length; i++) {
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:13: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
                ^
1 error

class NegCounter {

    //@ requires arr != null;
    //@ ensures \result >= 0;
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            //@ loop_invariant 0 <= i && i <= arr.length;
            //@ loop_invariant 0 <= cnt && cnt <= i;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; arr[j] < 0);
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
