
public class Inverse {
    //@ requires x.length == y.length;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;

        while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}


/home/max/Documents/JMLGPT/tmp/Inverse.java:10: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method Inverse
            if (x[index] != y[x.length - 1 - index]) {
                 ^
/home/max/Documents/JMLGPT/tmp/Inverse.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Inverse.java:4:) in method Inverse
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/Inverse.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Inverse.java:16:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
        ^
3 verification failures


public class Inverse {
    //@ requires x.length == y.length;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;

        //@ maintaining 0 <= index && index <= x.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}


