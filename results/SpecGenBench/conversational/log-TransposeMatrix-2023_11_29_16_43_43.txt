public class TransposeMatrix {
 
       //@ requires matrix != null;
       //@ requires matrix.length > 0;
       //@ requires (\forall int[] row; row \in matrix; row != null && row.length == matrix[0].length);
       //@ ensures \result != null;
       //@ ensures \result.length == matrix[0].length;
       //@ ensures (\forall int[] row; row \in \result; row != null && row.length == matrix.length);
       //@ ensures (\forall int i, j; 0 <= i && i < matrix.length && 0 <= j && j < matrix[0].length; \result[j][i] == matrix[i][j]);
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < m; transpose[j][i] == matrix[i][j]);
          //@ decreases n - c;
          for (int c = 0; c < n; c++) {

              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < d; transpose[j][i] == matrix[i][j]);
              //@ decreases m - d;
              for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }

          }
          return transpose;
       }
}
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:5: error: This backslash token is unknown: \in
       //@ requires (\forall int[] row; row \in matrix; row != null && row.length == matrix[0].length);
                                            ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:5: error: ')' expected
       //@ requires (\forall int[] row; row \in matrix; row != null && row.length == matrix[0].length);
                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:8: error: This backslash token is unknown: \in
       //@ ensures (\forall int[] row; row \in \result; row != null && row.length == matrix.length);
                                           ^
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:8: error: ')' expected
       //@ ensures (\forall int[] row; row \in \result; row != null && row.length == matrix.length);
                                                                                                   ^
4 errors

public class TransposeMatrix {
 
       //@ requires matrix != null;
       //@ requires matrix.length > 0;
       //@ requires (\forall int[] row; java.util.Arrays.asList(matrix).contains(row); row != null && row.length == matrix[0].length);
       //@ ensures \result != null;
       //@ ensures \result.length == matrix[0].length;
       //@ ensures (\forall int[] row; java.util.Arrays.asList(\result).contains(row); row != null && row.length == matrix.length);
       //@ ensures (\forall int i, j; 0 <= i && i < matrix.length && 0 <= j && j < matrix[0].length; \result[j][i] == matrix[i][j]);
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < m; transpose[j][i] == matrix[i][j]);
          //@ decreases n - c;
          for (int c = 0; c < n; c++) {

              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < d; transpose[j][i] == matrix[i][j]);
              //@ decreases m - d;
              for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }

          }
          return transpose;
       }
}
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:26: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                  transpose[c][d] = matrix[d][c];
                            ^
  Reason: Double rewriting of ident: c c_1001_1001___32 c_1001_1015___38
1 error

public class TransposeMatrix {
 
       //@ requires matrix != null;
       //@ requires matrix.length > 0;
       //@ requires (\forall int[] row; java.util.Arrays.asList(matrix).contains(row); row != null && row.length == matrix[0].length);
       //@ ensures \result != null;
       //@ ensures \result.length == matrix[0].length;
       //@ ensures (\forall int[] row; java.util.Arrays.asList(\result).contains(row); row != null && row.length == matrix.length);
       //@ ensures (\forall int i, j; 0 <= i && i < matrix.length && 0 <= j && j < matrix[0].length; \result[j][i] == matrix[i][j]);
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < m; transpose[j][i] == matrix[i][j]);
          //@ decreases n - c;
          for (int c_1001_1001___32 = 0; c_1001_1001___32 < n; c_1001_1001___32++) {

              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int i, j; 0 <= i && i < c_1001_1001___32 && 0 <= j && j < d; transpose[j][i] == matrix[i][j]);
              //@ decreases m - d;
              for (int d_1001_1015___38 = 0; d_1001_1015___38 < m; d_1001_1015___38++) {
                  transpose[c_1001_1001___32][d_1001_1015___38] = matrix[d_1001_1015___38][c_1001_1001___32];
              }

          }
          return transpose;
       }
}
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:17: error: cannot find symbol
          //@ maintaining 0 <= c && c <= n;
                               ^
  symbol:   variable c
  location: class TransposeMatrix
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:17: error: cannot find symbol
          //@ maintaining 0 <= c && c <= n;
                                    ^
  symbol:   variable c
  location: class TransposeMatrix
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:18: error: cannot find symbol
          //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < m; transpose[j][i] == matrix[i][j]);
                                                           ^
  symbol:   variable c
  location: class TransposeMatrix
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:19: error: cannot find symbol
          //@ decreases n - c;
                            ^
  symbol:   variable c
  location: class TransposeMatrix
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:22: error: cannot find symbol
              //@ maintaining 0 <= d && d <= m;
                                   ^
  symbol:   variable d
  location: class TransposeMatrix
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:22: error: cannot find symbol
              //@ maintaining 0 <= d && d <= m;
                                        ^
  symbol:   variable d
  location: class TransposeMatrix
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:23: error: cannot find symbol
              //@ maintaining (\forall int i, j; 0 <= i && i < c_1001_1001___32 && 0 <= j && j < d; transpose[j][i] == matrix[i][j]);
                                                                                                 ^
  symbol:   variable d
  location: class TransposeMatrix
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:24: error: cannot find symbol
              //@ decreases m - d;
                                ^
  symbol:   variable d
  location: class TransposeMatrix
8 errors

public class TransposeMatrix {
 
       //@ requires matrix != null;
       //@ requires matrix.length > 0;
       //@ requires (\forall int[] row; java.util.Arrays.asList(matrix).contains(row); row != null && row.length == matrix[0].length);
       //@ ensures \result != null;
       //@ ensures \result.length == matrix[0].length;
       //@ ensures (\forall int[] row; java.util.Arrays.asList(\result).contains(row); row != null && row.length == matrix.length);
       //@ ensures (\forall int i, j; 0 <= i && i < matrix.length && 0 <= j && j < matrix[0].length; \result[j][i] == matrix[i][j]);
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ maintaining 0 <= c_1001_1001___32 && c_1001_1001___32 <= n;
          //@ maintaining (\forall int i, j; 0 <= i && i < c_1001_1001___32 && 0 <= j && j < m; transpose[j][i] == matrix[i][j]);
          //@ decreases n - c_1001_1001___32;
          for (int c_1001_1001___32 = 0; c_1001_1001___32 < n; c_1001_1001___32++) {

              //@ maintaining 0 <= d_1001_1015___38 && d_1001_1015___38 <= m;
              //@ maintaining (\forall int i, j; 0 <= i && i < c_1001_1001___32 && 0 <= j && j < d_1001_1015___38; transpose[j][i] == matrix[i][j]);
              //@ decreases m - d_1001_1015___38;
              for (int d_1001_1015___38 = 0; d_1001_1015___38 < m; d_1001_1015___38++) {
                  transpose[c_1001_1001___32][d_1001_1015___38] = matrix[d_1001_1015___38][c_1001_1001___32];
              }

          }
          return transpose;
       }
}
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:26: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                  transpose[c_1001_1001___32][d_1001_1015___38] = matrix[d_1001_1015___38][c_1001_1001___32];
                            ^
  Reason: Double rewriting of ident: c_1001_1001___32 c_1001_1001___32_1061_1061___32 c_1001_1001___32_1061_1105___38
1 error

public class TransposeMatrix {
 
       //@ requires matrix != null;
       //@ requires matrix.length > 0;
       //@ requires (\forall int[] row; java.util.Arrays.asList(matrix).contains(row); row != null && row.length == matrix[0].length);
       //@ ensures \result != null;
       //@ ensures \result.length == matrix[0].length;
       //@ ensures (\forall int[] row; java.util.Arrays.asList(\result).contains(row); row != null && row.length == matrix.length);
       //@ ensures (\forall int i, j; 0 <= i && i < matrix.length && 0 <= j && j < matrix[0].length; \result[j][i] == matrix[i][j]);
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < m; transpose[j][i] == matrix[i][j]);
          //@ decreases n - c;
          for (int c = 0; c < n; c++) {

              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < d; transpose[j][i] == matrix[i][j]);
              //@ decreases m - d;
              for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }

          }
          return transpose;
       }
}
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:26: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                  transpose[c][d] = matrix[d][c];
                            ^
  Reason: Double rewriting of ident: c c_1001_1001___32 c_1001_1015___38
1 error

public class TransposeMatrix {
 
       //@ requires matrix != null;
       //@ requires matrix.length > 0;
       //@ requires (\forall int[] row; java.util.Arrays.asList(matrix).contains(row); row != null && row.length == matrix[0].length);
       //@ ensures \result != null;
       //@ ensures \result.length == matrix[0].length;
       //@ ensures (\forall int[] row; java.util.Arrays.asList(\result).contains(row); row != null && row.length == matrix.length);
       //@ ensures (\forall int i, j; 0 <= i && i < matrix.length && 0 <= j && j < matrix[0].length; \result[j][i] == matrix[i][j]);
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < m; transpose[j][i] == matrix[i][j]);
          //@ decreases n - c;
          for (int c = 0; c < n; c++) {

              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int i, j; 0 <= i && i < c && 0 <= j && j < d; transpose[j][i] == matrix[i][j]);
              //@ decreases m - d;
              for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }

          }
          return transpose;
       }
}
/home/max/Documents/JMLGPT/tmp/TransposeMatrix.java:26: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
                  transpose[c][d] = matrix[d][c];
                            ^
  Reason: Double rewriting of ident: c c_1001_1001___32 c_1001_1015___38
1 error

