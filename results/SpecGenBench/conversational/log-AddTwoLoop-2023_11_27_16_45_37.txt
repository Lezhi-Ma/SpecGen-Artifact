public class AddTwoLoop {
    //@ ensures \result == a + b;
    public static int add(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        //@ maintaining 0 <= i && i <= m;
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((a < 0) ? -1 : 1));
        //@ decreases m - i;
        for(int i = 0; i < m; i++){
            res = res + ((a < 0) ? -1 : 1);
        }
        //@ maintaining 0 <= i && i <= n;
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((b < 0) ? -1 : 1));
        //@ decreases n - i;
        for(int i = 0; i < n; i++){
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((a < 0) ? -1 : 1));
                                ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((a < 0) ? -1 : 1));
                                ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((a < 0) ? -1 : 1));
                                ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((b < 0) ? -1 : 1));
                                ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((b < 0) ? -1 : 1));
                                ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((b < 0) ? -1 : 1));
                                ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method add
        //@ maintaining res == (\sum int k; 0 <= k && k < i; ((a < 0) ? -1 : 1));
            ^
6 warnings
1 verification failure

public class AddTwoLoop {
    //@ ensures \result == a + b;
    public static int add(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        //@ maintaining 0 <= i && i <= m;
        //@ maintaining res == i * ((a < 0) ? -1 : 1);
        //@ decreases m - i;
        for(int i = 0; i < m; i++){
            res = res + ((a < 0) ? -1 : 1);
        }
        //@ maintaining 0 <= i && i <= n;
        //@ maintaining res == m * ((a < 0) ? -1 : 1) + (i - m) * ((b < 0) ? -1 : 1);
        //@ decreases n - i;
        for(int i = m; i < n; i++){
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }
}
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method add
        //@ maintaining 0 <= i && i <= n;
            ^
1 verification failure

public class AddTwoLoop {
    //@ ensures \result == a + b;
    public static int add(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        //@ maintaining 0 <= i && i <= m;
        //@ maintaining res == i * ((a < 0) ? -1 : 1);
        //@ decreases m - i;
        for(int i = 0; i < m; i++){
            res = res + ((a < 0) ? -1 : 1);
        }
        //@ maintaining m <= i && i <= m + n;
        //@ maintaining res == m * ((a < 0) ? -1 : 1) + (i - m) * ((b < 0) ? -1 : 1);
        //@ decreases m + n - i;
        for(int i = m; i < m + n; i++){
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }
}

