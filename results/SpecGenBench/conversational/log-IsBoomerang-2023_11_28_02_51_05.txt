class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> (points[1][0] - points[0][0]) * (points[2][1] - points[0][1]) - (points[1][1] - points[0][1]) * (points[2][0] - points[0][0]) != 0;
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return v1[0] * v2[1] - v1[1] * v2[0] != 0;
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4:) in method isBoomerang
        return v1[0] * v2[1] - v1[1] * v2[0] != 0;
        ^
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8:
    //@ ensures \result <==> (points[1][0] - points[0][0]) * (points[2][1] - points[0][1]) - (points[1][1] - points[0][1]) * (points[2][0] - points[0][0]) != 0;
        ^
2 verification failures

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> (points[1][0] - points[0][0]) * (points[2][1] - points[0][1]) != (points[1][1] - points[0][1]) * (points[2][0] - points[0][0]);
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return (v1[0] * v2[1]) != (v1[1] * v2[0]);
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4:) in method isBoomerang
        return (v1[0] * v2[1]) != (v1[1] * v2[0]);
        ^
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8:
    //@ ensures \result <==> (points[1][0] - points[0][0]) * (points[2][1] - points[0][1]) != (points[1][1] - points[0][1]) * (points[2][0] - points[0][0]);
        ^
2 verification failures

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0]));
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return ((v1[0] * v2[1]) != (v1[1] * v2[0]));
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4:) in method isBoomerang
        return ((v1[0] * v2[1]) != (v1[1] * v2[0]));
        ^
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8:
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0]));
        ^
2 verification failures

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> (points[1][0] - points[0][0]) * (points[2][1] - points[0][1]) != (points[1][1] - points[0][1]) * (points[2][0] - points[0][0]);
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return ((v1[0] * v2[1]) - (v1[1] * v2[0])) != 0;
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4:) in method isBoomerang
        return ((v1[0] * v2[1]) - (v1[1] * v2[0])) != 0;
        ^
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8:
    //@ ensures \result <==> (points[1][0] - points[0][0]) * (points[2][1] - points[0][1]) != (points[1][1] - points[0][1]) * (points[2][0] - points[0][0]);
        ^
2 verification failures

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && points[0] != points[1] && points[0] != points[2] && points[1] != points[2];
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: error: cannot find symbol
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                        ^
  symbol:   variable Arrays
  location: class IsBoomerang
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: error: cannot find symbol
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                                                                ^
  symbol:   variable Arrays
  location: class IsBoomerang
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: error: cannot find symbol
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                                                                                                        ^
  symbol:   variable Arrays
  location: class IsBoomerang
3 errors

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4: error: cannot find symbol
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                                                                                                                                    ^
  symbol:   variable Arrays
  location: class IsBoomerang
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4: error: cannot find symbol
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                                                                                                                                                                            ^
  symbol:   variable Arrays
  location: class IsBoomerang
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:4: error: cannot find symbol
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                                                                                                                                                                                                                    ^
  symbol:   variable Arrays
  location: class IsBoomerang
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: error: cannot find symbol
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                        ^
  symbol:   variable Arrays
  location: class IsBoomerang
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: error: cannot find symbol
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                                                                ^
  symbol:   variable Arrays
  location: class IsBoomerang
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:8: error: cannot find symbol
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
                                                                                                                                        ^
  symbol:   variable Arrays
  location: class IsBoomerang
6 errors

import java.util.Arrays;

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:6:) in method isBoomerang
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
        ^
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:10:
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
        ^
2 verification failures

import java.util.Arrays;

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return ((v1[0] * v2[1]) - (v1[1] * v2[0])) != 0 && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:6:) in method isBoomerang
        return ((v1[0] * v2[1]) - (v1[1] * v2[0])) != 0 && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
        ^
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:10:
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
        ^
2 verification failures

import java.util.Arrays;

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:6:) in method isBoomerang
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
        ^
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:10:
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
        ^
2 verification failures

import java.util.Arrays;

class IsBoomerang {
    //@ requires points.length == 3;
    //@ requires points[0].length == 2 && points[1].length == 2 && points[2].length == 2;
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    public boolean isBoomerang(int[][] points) {
        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};
        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
    }
}
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:6:) in method isBoomerang
        return ((v1[0] * v2[1]) != (v1[1] * v2[0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
        ^
/home/max/Documents/JMLGPT/tmp/IsBoomerang.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsBoomerang.java:10:
    //@ ensures \result <==> ((points[1][0] - points[0][0]) * (points[2][1] - points[0][1])) != ((points[1][1] - points[0][1]) * (points[2][0] - points[0][0])) && !Arrays.equals(points[0], points[1]) && !Arrays.equals(points[0], points[2]) && !Arrays.equals(points[1], points[2]);
        ^
2 verification failures

