public class IsSuffix {

    //@ requires pat != null && txt != null;
    //@ ensures \result ==> (\exists int k; 0 <= k && k <= pat.length(); pat.charAt(k) != txt.charAt(k));
    //@ ensures !\result ==> (\forall int k; 0 <= k && k <= pat.length(); pat.charAt(k) == txt.charAt(k));
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining \forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k);
        //@ maintaining \forall int k; j <= k && k < txt.length(); pat.charAt(k) == txt.charAt(k);
        //@ decreases i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining 0 <= i && i <= pat.length();
            ^
1 verification failure

public class IsSuffix {

    //@ requires pat != null && txt != null;
    //@ ensures \result ==> (\exists int k; 0 <= k && k <= pat.length(); pat.charAt(k) != txt.charAt(k));
    //@ ensures !\result ==> (\forall int k; 0 <= k && k <= pat.length(); pat.charAt(k) == txt.charAt(k));
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining (\forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        //@ maintaining (\forall int k; j <= k && k < txt.length(); pat.charAt(k) == txt.charAt(k));
        //@ decreasing i;
        while(i > 0) {
            if(j < 0 || pat.charAt(i-1) != txt.charAt(j-1))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:4:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
    //@ ensures \result ==> (\exists int k; 0 <= k && k <= pat.length(); pat.charAt(k) != txt.charAt(k));
        ^
2 verification failures

public class IsSuffix {

    //@ requires pat != null && txt != null;
    //@ ensures \result ==> (\exists int k; 0 <= k && k <= pat.length(); pat.charAt(k) != txt.charAt(k));
    //@ ensures !\result ==> (\forall int k; 0 <= k && k <= pat.length(); pat.charAt(k) == txt.charAt(k));
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining (\forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        //@ maintaining (\forall int k; j <= k && k < txt.length(); pat.charAt(k) == txt.charAt(k));
        //@ decreasing i;
        while(i > 0) {
            if(j <= 0 || pat.charAt(i-1) != txt.charAt(j-1))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:4:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:22:
    //@ ensures \result ==> (\exists int k; 0 <= k && k <= pat.length(); pat.charAt(k) != txt.charAt(k));
        ^
2 verification failures

public class IsSuffix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (\exists int k; 0 <= k && k <= pat.length() && k <= txt.length(); pat.charAt(k) != txt.charAt(k));
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining (\forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        //@ maintaining (\forall int k; j <= k && k < txt.length(); pat.charAt(k) == txt.charAt(k));
        //@ decreasing i;
        while(i > 0) {
            if(j <= 0 || pat.charAt(i-1) != txt.charAt(j-1))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:4:) in method isSuffix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:21:
    //@ ensures \result <==> (\exists int k; 0 <= k && k <= pat.length() && k <= txt.length(); pat.charAt(k) != txt.charAt(k));
        ^
2 verification failures

public class IsSuffix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (\exists int k; 0 <= k && k <= pat.length() && k <= txt.length(); pat.charAt(k) != txt.charAt(k));
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining (\forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        //@ maintaining (\forall int k; j <= k && k < txt.length(); pat.charAt(k) == txt.charAt(k));
        //@ decreasing i;
        while(i > 0) {
            if(j <= 0 || pat.charAt(i-1) != txt.charAt(j-1))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return (j == 0);
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:4:) in method isSuffix
        return (j == 0);
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:21:
    //@ ensures \result <==> (\exists int k; 0 <= k && k <= pat.length() && k <= txt.length(); pat.charAt(k) != txt.charAt(k));
        ^
2 verification failures

public class IsSuffix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (\exists int k; 0 <= k && k <= pat.length() && k <= txt.length(); pat.charAt(k) != txt.charAt(k));
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining (\forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        //@ maintaining (\forall int k; j <= k && k < txt.length(); pat.charAt(k) == txt.charAt(k));
        //@ decreasing i;
        while(i > 0) {
            if(j <= 0 || pat.charAt(i-1) != txt.charAt(j-1))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return (j >= 0);
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:4:) in method isSuffix
        return (j >= 0);
        ^
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSuffix.java:21:
    //@ ensures \result <==> (\exists int k; 0 <= k && k <= pat.length() && k <= txt.length(); pat.charAt(k) != txt.charAt(k));
        ^
2 verification failures

public class IsSuffix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (\exists int k; 0 <= k && k <= pat.length() && k <= txt.length(); pat.charAt(k) != txt.charAt(k));
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining (\forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        //@ maintaining (\forall int k; j <= k && k < txt.length(); pat.charAt(k) == txt.charAt(k));
        //@ decreasing i;
        while(i > 0) {
            if(j <= 0 || pat.charAt(i-1) != txt.charAt(j-1))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return (j >= -1);
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:11: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining (\forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
            ^
1 verification failure

public class IsSuffix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (\exists int k; 0 <= k && k <= pat.length() && k <= txt.length(); pat.charAt(k) != txt.charAt(k));
    public boolean isSuffix (String pat, String txt) {
        int i = pat.length();
        int j = txt.length();

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining 0 <= j && j <= txt.length();
        //@ maintaining (\forall int k; i <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        //@ maintaining (\forall int k; j <= k && k < txt.length(); pat.charAt(k) == txt.charAt(k));
        //@ decreasing i;
        while(i >= 0) {
            if(j < 0 || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i - 1;
            j = j - 1;
        }

        return (j >= -1);
    }

}
/home/max/Documents/JMLGPT/tmp/IsSuffix.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method isSuffix
        //@ maintaining 0 <= i && i <= pat.length();
            ^
1 verification failure

