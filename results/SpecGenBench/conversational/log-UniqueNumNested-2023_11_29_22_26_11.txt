public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\exists int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j && arr[i] == arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length;
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
                return i;
                ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:22:
    //@ ensures \result == -1 <==> (\exists int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j && arr[i] == arr[j]);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\exists int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j && arr[i] == arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length;
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
                return i;
                ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:22:
    //@ ensures \result == -1 <==> (\exists int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j && arr[i] == arr[j]);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\exists int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j && arr[i] == arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length;
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4:) in method uniqueNum
                return i;
                ^
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:22:
    //@ ensures \result == -1 <==> (\exists int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j && arr[i] == arr[j]);
        ^
2 verification failures

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j ==> arr[i] != arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length;
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method uniqueNum
        //@ maintaining -1 <= i && i < arr.length;
            ^
1 verification failure

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j ==> arr[i] != arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length + 1;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length;
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:25: verify: The prover cannot establish an assertion (Assert) in method uniqueNum
        //@ assert i_counter == arr.length;
            ^
1 verification failure

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j ==> arr[i] != arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length + 1;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length;
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:25: verify: The prover cannot establish an assertion (Assert) in method uniqueNum
        //@ assert i_counter == arr.length;
            ^
1 verification failure

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j ==> arr[i] != arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length + 1;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length;
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:25: verify: The prover cannot establish an assertion (Assert) in method uniqueNum
        //@ assert i_counter == arr.length;
            ^
1 verification failure

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j ==> arr[i] != arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length + 1;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length : "All elements are unique";
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:25: verify: The prover cannot establish an assertion (Assert) in method uniqueNum: All elements are unique
        //@ assert i_counter == arr.length : "All elements are unique";
            ^
1 verification failure

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j ==> arr[i] != arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length + 1;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length : "All elements are unique";
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:25: verify: The prover cannot establish an assertion (Assert) in method uniqueNum: All elements are unique
        //@ assert i_counter == arr.length : "All elements are unique";
            ^
1 verification failure

public class UniqueNumNested {

    //@ requires (\forall int i; 0 <= i && i < arr.length; (int)Integer.MIN_VALUE <= arr[i] && arr[i] <= (int)Integer.MAX_VALUE);
    //@ ensures \result == -1 <==> (\forall int i, j; 0 <= i && i < arr.length && 0 <= j && j < arr.length && i != j ==> arr[i] != arr[j]);
    //@ ensures -1 < \result ==> (\forall int j; 0 <= j && j < arr.length; \result != j ==> arr[\result] != arr[j]);
    public static int uniqueNum(int[] arr) {
        //@ ghost int i_counter;
        //@ set i_counter = 0;
        //@ maintaining -1 <= i && i < arr.length + 1;
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; ++i) {
            int j = 0;
            //@ maintaining 0 <= j && j <= arr.length;
            //@ maintaining (\forall int k; 0 <= k && k < j; k != i ==> arr[i] != arr[k]);
            //@ decreases arr.length - j;
            while(j < arr.length) {
                if(i != j && arr[i] == arr[j])
                    break;
                j++;
            }
            if(j == arr.length)
                return i;
            //@ set i_counter = i_counter + 1;
        }
        //@ assert i_counter == arr.length : "All elements are unique";
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueNumNested.java:25: verify: The prover cannot establish an assertion (Assert) in method uniqueNum: All elements are unique
        //@ assert i_counter == arr.length : "All elements are unique";
            ^
1 verification failure

