class IsAllUnique {
    /*@ public normal_behavior
      @    requires str != null;
      @    ensures \result <==> (\forall int i; 0 <= i && i < str.length(); (\forall int j; 0 <= j && j < i; str.charAt(i) != str.charAt(j)));
      @*/
    boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        //@ maintaining 0 <= i && i <= len;
        //@ maintaining (\forall int j; 0 <= j && j < i; (\forall int k; 0 <= k && k < j; str.charAt(j) != str.charAt(k)));
        //@ decreases len - i;
        for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:2: warning: There is no point to a specification case having more visibility than its method
    /*@ public normal_behavior
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:18: verify: The prover cannot establish an assertion (PossiblyLargeShift) in method isAllUnique
            if ((num & (1 << index)) != 0) {
                          ^
1 warning
1 verification failure

class IsAllUnique {
    /*@ public normal_behavior
      @    requires str != null;
      @    ensures \result <==> (\forall int i; 0 <= i && i < str.length(); (\forall int j; 0 <= j && j < i; str.charAt(i) != str.charAt(j)));
      @*/
    public boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        //@ maintaining 0 <= i && i <= len;
        //@ maintaining (\forall int j; 0 <= j && j < i; (\forall int k; 0 <= k && k < j; str.charAt(j) != str.charAt(k)));
        //@ decreases len - i;
        for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:18: verify: The prover cannot establish an assertion (PossiblyLargeShift) in method isAllUnique
            if ((num & (1 << index)) != 0) {
                          ^
1 verification failure

class IsAllUnique {
    /*@ public normal_behavior
      @    requires str != null;
      @    ensures \result <==> (\forall int i; 0 <= i && i < str.length(); (\forall int j; 0 <= j && j < i; str.charAt(i) != str.charAt(j)));
      @*/
    public boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        //@ maintaining 0 <= i && i <= len;
        //@ maintaining (\forall int j; 0 <= j && j < i; (\forall int k; 0 <= k && k < j; str.charAt(j) != str.charAt(k)));
        //@ decreases len - i;
        for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
            int index = c - 'a';
            //@ assert 0 <= index && index < 26;
            if (((num >> index) & 1) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:18: verify: The prover cannot establish an assertion (Assert) in method isAllUnique
            //@ assert 0 <= index && index < 26;
                ^
1 verification failure

class IsAllUnique {
    /*@ public normal_behavior
      @    requires str != null;
      @    ensures \result <==> (\forall int i; 0 <= i && i < str.length(); (\forall int j; 0 <= j && j < i; str.charAt(i) != str.charAt(j)));
      @*/
    public boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        //@ maintaining 0 <= i && i <= len;
        //@ maintaining (\forall int j; 0 <= j && j < i; (\forall int k; 0 <= k && k < j; str.charAt(j) != str.charAt(k)));
        //@ decreases len - i;
        for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
            int index = c - 'a';
            //@ assert 0 <= index && index < 26 : "Character index out of range";
            if (((num >> index) & 1) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:18: verify: The prover cannot establish an assertion (Assert) in method isAllUnique: Character index out of range
            //@ assert 0 <= index && index < 26 : "Character index out of range";
                ^
1 verification failure

class IsAllUnique {
    /*@ public normal_behavior
      @    requires str != null;
      @    ensures \result <==> (\forall int i; 0 <= i && i < str.length(); (\forall int j; 0 <= j && j < i; str.charAt(i) != str.charAt(j)));
      @*/
    public boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        //@ maintaining 0 <= i && i <= len;
        //@ maintaining (\forall int j; 0 <= j && j < i; (\forall int k; 0 <= k && k < j; str.charAt(j) != str.charAt(k)));
        //@ decreases len - i;
        for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
            int index = c - 'a';
            //@ assert 0 <= index && index < 26 : "Character index out of range";
            if (index < 0 || index >= 26) {
                throw new IllegalArgumentException("Character index out of range");
            }
            if (((num >> index) & 1) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }
}
error: An error while executing a proof script for isAllUnique: (error "line 2367 column 305: invalid function application, sort mismatch on argument at position 2")
  >>>(define-fun BL_251_afterIf_150__A2 () Bool (forall ((|QQHIS| REF) ) (! (=> (and (distinct |QQHIS| NULL) (and (distinct |QQHIS| NULL) (javaSubType (javaTypeOf |QQHIS|) T_java_util_Collection))) (= (java_util_List_size$_H3_1582 |QQHIS|) (arrLength0 (select |java.lang.Iterable_values_209_209___63| |QQHIS|)))) :pattern ( (java_util_List_size$_H3_1582 |QQHIS|) ))))
1 error

class IsAllUnique {
    /*@ public normal_behavior
      @    requires str != null;
      @    ensures \result <==> (\forall int i; 0 <= i && i < str.length(); (\forall int j; 0 <= j && j < i; str.charAt(i) != str.charAt(j)));
      @*/
    public boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        //@ maintaining 0 <= i && i <= len;
        //@ maintaining (\forall int j; 0 <= j && j < i; (\forall int k; 0 <= k && k < j; str.charAt(j) != str.charAt(k)));
        //@ decreases len - i;
        for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
            int index = c - 'a';
            //@ assert 0 <= index && index < 26 : "Character index out of range";
            if (index < 0 || index >= 26) {
                throw new IllegalArgumentException("Character index out of range");
            }
            if (((num >> index) & 1) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }
}
error: An error while executing a proof script for isAllUnique: (error "line 2367 column 305: invalid function application, sort mismatch on argument at position 2")
  >>>(define-fun BL_251_afterIf_150__A2 () Bool (forall ((|QQHIS| REF) ) (! (=> (and (distinct |QQHIS| NULL) (and (distinct |QQHIS| NULL) (javaSubType (javaTypeOf |QQHIS|) T_java_util_Collection))) (= (java_util_List_size$_H3_1582 |QQHIS|) (arrLength0 (select |java.lang.Iterable_values_209_209___63| |QQHIS|)))) :pattern ( (java_util_List_size$_H3_1582 |QQHIS|) ))))
1 error

class IsAllUnique {
    /*@ public normal_behavior
      @    requires str != null;
      @    ensures \result <==> (\forall int i; 0 <= i && i < str.length(); (\forall int j; 0 <= j && j < i; str.charAt(i) != str.charAt(j)));
      @*/
    public boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        //@ maintaining 0 <= i && i <= len;
        //@ maintaining (\forall int j; 0 <= j && j < i; (\forall int k; 0 <= k && k < j; str.charAt(j) != str.charAt(k)));
        //@ decreases len - i;
        for (int i = 0; i < len; i++) {
            char c = str.charAt(i);
            int index = c - 'a';
            //@ assert 0 <= index && index < 26 : "Character index out of range";
            if (index < 0 || index >= 26) {
                throw new IllegalArgumentException("Character index out of range");
            }
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }
}
