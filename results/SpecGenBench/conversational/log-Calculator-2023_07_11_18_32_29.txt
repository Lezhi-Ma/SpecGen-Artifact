public class Calculator {
    
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public  int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public  int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume num1 <= Integer.MAX_VALUE - num2 && num1 >= Integer.MIN_VALUE - num2;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 <= Integer.MAX_VALUE + num2 && num1 >= Integer.MIN_VALUE + num2;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 <= Integer.MAX_VALUE / num2 && num1 >= Integer.MIN_VALUE / num2;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	//@ assume num1 <= Integer.MAX_VALUE * num2 && num1 >= Integer.MIN_VALUE * num2;
            	output = num1 / num2;
                break;

            case '%':
            	//@ assume num2 != 0;
            	//@ assume num1 <= Integer.MAX_VALUE % num2 && num1 >= Integer.MIN_VALUE % num2;
            	output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
