public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 || \result == num1 - num2 || \result == num1 * num2 || \result == num1 / num2 || \result == num1 % num2 || \result == -1;
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:15: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int difference
            	output = num1 - num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:15: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int difference
            	output = num1 - num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2 || \result == num1 - num2 || \result == num1 * num2 || \result == num1 / num2 || \result == num1 % num2 || \result == -1;
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume Integer.MIN_VALUE <= num1 - num2 && num1 - num2 <= Integer.MAX_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume Integer.MIN_VALUE <= num1 * num2 && num1 * num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:29: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:25: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
            	output = num1 / num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator == '/' ==> num2 != 0;
    //@ requires operator == '%' ==> num2 != 0;
    //@ ensures \result == num1 + num2 || \result == num1 - num2 || \result == num1 * num2 || \result == num1 / num2 || \result == num1 % num2 || \result == -1;
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume Integer.MIN_VALUE <= num1 - num2 && num1 - num2 <= Integer.MAX_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume Integer.MIN_VALUE <= num1 * num2 && num1 * num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
		//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:13: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:28: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int divide
            	output = num1 / num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator == '/' ==> num2 != 0;
    //@ requires operator == '%' ==> num2 != 0;
    //@ ensures \result == num1 + num2 || \result == num1 - num2 || \result == num1 * num2 || \result == num1 / num2 || \result == num1 % num2 || \result == -1;
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume Integer.MIN_VALUE <= num1 + num2 && num1 + num2 <= Integer.MAX_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume Integer.MIN_VALUE <= num1 - num2 && num1 - num2 <= Integer.MAX_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume Integer.MIN_VALUE <= num1 * num2 && num1 * num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
		//@ assume num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:29: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int divide
            	output = num1 / num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:5:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:40:
    //@ ensures \result == num1 + num2 || \result == num1 - num2 || \result == num1 * num2 || \result == num1 / num2 || \result == num1 % num2 || \result == -1;
        ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator == '/' ==> num2 != 0;
    //@ requires operator == '%' ==> num2 != 0;
    //@ ensures \result == num1 + num2 || \result == num1 - num2 || \result == num1 * num2 || \result == num1 / num2 || \result == num1 % num2 || \result == -1;
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	//@ assume Integer.MIN_VALUE <= num1 + num2 && num1 + num2 <= Integer.MAX_VALUE;
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume Integer.MIN_VALUE <= num1 - num2 && num1 - num2 <= Integer.MAX_VALUE;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume Integer.MIN_VALUE <= num1 * num2 && num1 * num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	//@ assume num2 != 0;
            	//@ assume Integer.MIN_VALUE <= num1 / num2 && num1 / num2 <= Integer.MAX_VALUE;
            	output = num1 / num2;
		break;

	    case '%':
		//@ assume num2 != 0;
		//@ assume Integer.MIN_VALUE <= num1 % num2 && num1 % num2 <= Integer.MAX_VALUE;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}

