public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:27: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
1 verification failure

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	//@ requires num2 != 0;
            	output = num1 / num2;
		break;

	    case '%':
		//@ requires num2 != 0;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:23: warning: A refining statement is required for statement specifications
            	//@ requires num2 != 0;
            	    ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:28: warning: A refining statement is required for statement specifications
		//@ requires num2 != 0;
		    ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:3:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:35:
    //@ ensures \result == num1 + num2;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:29: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int divide
            	output = num1 / num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:29: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
2 warnings
5 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	//@ requires num2 != 0;
            	//@ assume num1 / num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 / num2;
            	output = num1 / num2;
		break;

	    case '%':
		//@ requires num2 != 0;
		//@ assume num1 % num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 % num2;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:23: warning: A refining statement is required for statement specifications
            	//@ requires num2 != 0;
            	    ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:29: warning: A refining statement is required for statement specifications
		//@ requires num2 != 0;
		    ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:31: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:30: verify: The prover cannot establish an assertion (UndefinedDivideByZero) in method calculate
		//@ assume num1 % num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 % num2;
		                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:31: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:30: verify: The prover cannot establish an assertion (UndefinedDivideByZero) in method calculate
		//@ assume num1 % num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 % num2;
		                ^
2 warnings
4 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	//@ requires num2 != 0;
            	//@ assume num1 / num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 / num2;
            	output = num1 / num2;
		break;

	    case '%':
		//@ requires num2 != 0;
		//@ assume num2 != 0;
		//@ assume num1 % num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 % num2;
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
