public class Absolute {
	
	//@ ensures \result >= 0;
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	//@ ensures \result >= 0;
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	//@ ensures \result >= 0;
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}
/home/max/Documents/JMLGPT/tmp/Absolute.java:8: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
			return (short)-num;	
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
			return -num;
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
			return -num;	
			       ^
3 verification failures

public class Absolute {
	
	//@ ensures \result >= 0;
	public /*@ pure @*/ short Absolute(short num) {
		//@ assume num > Short.MIN_VALUE;
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	//@ ensures \result >= 0;
	public /*@ pure @*/ int Absolute(int num) {
		//@ assume num > Integer.MIN_VALUE;
		if (0 <= num)
			return num;
		else
			return -num;
	}

	//@ ensures \result >= 0;
	public /*@ pure @*/ long Absolute(long num) {
		//@ assume num > Long.MIN_VALUE;
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}

