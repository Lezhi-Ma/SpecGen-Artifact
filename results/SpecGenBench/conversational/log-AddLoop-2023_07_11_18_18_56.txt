public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:15: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method AddLoop: int negation
            int n = -y;
                    ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x - (y - n);
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - y);
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:19: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x - (n - y);
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining n >= 0;
                ^
1 verification failure

public class AddLoop {
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ assume y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x + (y - n);
            //@ decreasing n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ assume -y > Integer.MIN_VALUE;
            //@ maintaining n >= 0;
            //@ maintaining sum == x - (n - (-y));
            //@ decreasing n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
