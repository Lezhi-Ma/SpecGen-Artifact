public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; s.charAt(k) != c1);
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    break;
                j++;
            }
            if(j == s.length())
                return i;
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2 && j < i)
                    return i;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < i) {
                char c2 = s.charAt(j);
                if(c1 == c2)
                    return i;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2 && j < i)
                    return i;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2 && j != i)
                    return i;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2 && j != i)
                    return -1;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:3:) in method uniqueChar
                    return -1;
                    ^
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:19:
    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
        ^
2 verification failures

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2 && j != i)
                    return i;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2 && j != i)
                    return i;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2 && j != i)
                    return i;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

public class UniqueCharNested {

    //@ ensures (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < s.length(); (\forall int j; 0 <= j && j < s.length(); (i != j ==> s.charAt(i) != s.charAt(j))));
    //@ ensures 0 <= \result && \result < s.length() ==> (\forall int j; 0 <= j && j < s.length(); s.charAt(\result) != s.charAt(j));
    public static int uniqueChar(String s) {
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
        //@ decreases s.length() - i;
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            int j = 0;
            //@ maintaining 0 <= j && j <= s.length();
            //@ maintaining (\forall int k; 0 <= k && k < j; (k < i ==> s.charAt(k) != c1));
            //@ decreases s.length() - j;
            while(j < s.length()) {
                char c2 = s.charAt(j);
                if(c1 == c2 && j != i)
                    return i;
                j++;
            }
        }
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method uniqueChar
        //@ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < s.length(); (k != j ==> s.charAt(k) != s.charAt(j))));
            ^
1 verification failure

