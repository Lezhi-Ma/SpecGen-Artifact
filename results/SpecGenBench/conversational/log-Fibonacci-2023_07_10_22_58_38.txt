public class Fibonacci {
   	private /*@ spec_public nullable @*/ long fib[];

	/*@ requires 2 <= size && size <= 93;
	  @ assignable fib;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ assignable fib;
	  @ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]); @*/
	public void fibCompute() {
		int index = 2;
      
		/*@ maintaining 2 <= index && index <= fib.length;
		  @ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		  @ decreases fib.length - index; @*/
		while (index < fib.length) {
	
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: error: Implicit references to 'this' are not permitted in constructor assignable clauses: fib
	  @ assignable fib;
	               ^
1 error

public class Fibonacci {
   	private /*@ spec_public nullable @*/ long fib[];

	/*@ requires 2 <= size && size <= 93;
	  @ assignable this.fib;
	  @ ensures this.fib.length == size;
	  @ ensures this.fib[0] == 0;
	  @ ensures this.fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < this.fib.length;
	  @ ensures \result == this.fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ assignable this.fib;
	  @ ensures (\forall int i; 2 <= i && i < this.fib.length; this.fib[i] == this.fib[i - 2] + this.fib[i - 1]); @*/
	public void fibCompute() {
		int index = 2;
      
		/*@ maintaining 2 <= index && index <= this.fib.length;
		  @ maintaining (\forall int i; 2 <= i && i < index; this.fib[i] == this.fib[i - 2] + this.fib[i - 1]);
		  @ decreases this.fib.length - index; @*/
		while (index < this.fib.length) {
	
			this.fib[index] = this.fib[index - 2] + this.fib[index - 1];
			index++;
                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: error: References to 'this' are not permitted in constructor assignable clauses: this
	  @ assignable this.fib;
	               ^
1 error

public class Fibonacci {
   	private /*@ spec_public nullable @*/ long fib[];

	/*@ requires 2 <= size && size <= 93;
	  @ assignable fib;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ assignable fib;
	  @ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]); @*/
	public void fibCompute() {
		int index = 2;
      
		/*@ maintaining 2 <= index && index <= fib.length;
		  @ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		  @ decreases fib.length - index; @*/
		while (index < fib.length) {
	
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: error: Implicit references to 'this' are not permitted in constructor assignable clauses: fib
	  @ assignable fib;
	               ^
1 error

public class Fibonacci {
   	private /*@ spec_public nullable @*/ long fib[];

	/*@ requires 2 <= size && size <= 93;
	  @ assignable \nothing;
	  @ ensures fib != null;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ assignable fib;
	  @ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]); @*/
	public void fibCompute() {
		int index = 2;
      
		/*@ maintaining 2 <= index && index <= fib.length;
		  @ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i - 2] + fib[i - 1]);
		  @ decreases fib.length - index; @*/
		while (index < fib.length) {
	
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: overflow in long sum
			fib[index] = fib[index - 2] + fib[index - 1];
			                            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: The prover cannot establish an assertion (UndefinedNullDeReference) in method getFib
	/*@ requires 0 <= index && index < fib.length;
	                                      ^
2 verification failures

