public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:26: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:3:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:32:
    //@ ensures \result == num1 + num2;
        ^
3 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:31: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:23: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires operator != '/' || num2 != 0;
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume (long)num1 * (long)num2 <= Integer.MAX_VALUE;
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:32: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures

