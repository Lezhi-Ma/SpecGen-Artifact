public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
			fib[index] = fib[index - 2] + fib[index - 1];
			                            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: overflow in long sum
			fib[index] = fib[index - 2] + fib[index - 1];
			                            ^
2 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			//@ assume Long.MAX_VALUE - fib[index - 2] >= fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:) in method fibCompute
	public void fibCompute() {
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: The prover cannot establish an assertion (UndefinedNegativeIndex) in method fibCompute
			//@ assume Long.MAX_VALUE - fib[index - 2] >= fib[index - 1];
			                               ^
3 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			//@ assume index - 2 == 0 || index - 2 > 0;
			//@ assume index - 1 == 0 || index - 1 > 0;
			//@ assume Long.MAX_VALUE - fib[index - 2] >= fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:37: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
			fib[index] = fib[index - 2] + fib[index - 1];
			                            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:) in method fibCompute
	public void fibCompute() {
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	    ^
3 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			//@ assume index - 2 == 0 || index - 2 > 0;
			//@ assume index - 1 == 0 || index - 1 > 0;
			//@ assume Long.MIN_VALUE + fib[index - 1] <= fib[index - 2];
			//@ assume Long.MAX_VALUE - fib[index - 2] >= fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
			fib[index] = fib[index - 2] + fib[index - 1];
			                            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:) in method fibCompute
	public void fibCompute() {
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	    ^
3 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			//@ assume index - 2 == 0 || index - 2 > 0;
			//@ assume index - 1 == 0 || index - 1 > 0;
			//@ assume Long.MIN_VALUE + fib[index - 1] <= fib[index - 2];
			//@ assume Long.MAX_VALUE - fib[index - 2] >= fib[index - 1];
			fib[index] = Math.addExact(fib[index - 2], fib[index - 1]);
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:) in method fibCompute
	public void fibCompute() {
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	    ^
2 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	//@ requires 2 <= size && size <= 93;
	//@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1;
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			//@ assume index - 2 == 0 || index - 2 > 0;
			//@ assume index - 1 == 0 || index - 1 > 0;
			//@ assume Long.MIN_VALUE + fib[index - 1] <= fib[index - 2];
			//@ assume Long.MAX_VALUE - fib[index - 2] >= fib[index - 1];
			fib[index] = Math.addExact(fib[index - 2], fib[index - 1]);
			index++;
		}
	}

	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibComputeRec() {
		fibComputeRecHelper(2);
	}

	//@ requires 2 <= index && index < fib.length;
	//@ ensures (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	private void fibComputeRecHelper(int index) {
		if (index < fib.length) {
			//@ assume index - 2 == 0 || index - 2 > 0;
			//@ assume index - 1 == 0 || index - 1 > 0;
			//@ assume Long.MIN_VALUE + fib[index - 1] <= fib[index - 2];
			//@ assume Long.MAX_VALUE - fib[index - 2] >= fib[index - 1];
			fib[index] = Math.addExact(fib[index - 2], fib[index - 1]);
			fibComputeRecHelper(index + 1);
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:) in method fibCompute
	public void fibCompute() {
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:50:) in method fibComputeRec
		fibComputeRecHelper(2);
		                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:45:
	private void fibComputeRecHelper(int index) {
	             ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:48: verify: Precondition conjunct is false: index < fib.length
	//@ requires 2 <= index && index < fib.length;
	                                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:50:) in method fibComputeRecHelper
			fibComputeRecHelper(index + 1);
			                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:57:
	private void fibComputeRecHelper(int index) {
	             ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:48: verify: Precondition conjunct is false: index < fib.length
	//@ requires 2 <= index && index < fib.length;
	                                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:49:) in method fibComputeRecHelper
	private void fibComputeRecHelper(int index) {
	             ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:50:
	//@ ensures (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	    ^
10 verification failures

