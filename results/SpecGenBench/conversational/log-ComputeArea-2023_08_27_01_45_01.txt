class ComputeArea {
    //@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        int overlapWidth = (ax2<bx2?ax2:bx2) - (ax1>bx1?ax1:bx1), overlapHeight = (ay2<by2?ay2:by2) - (ay1>by1?ay1:by1);
	int overlapArea = 0;
	//@ maintaining overlapArea == (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
	if (overlapWidth > 0 || overlapHeight > 0) {
		overlapArea = overlapWidth * overlapHeight;
	}
        return area1 + area2 - overlapArea;
    }
}
/home/max/Documents/JMLGPT/tmp/ComputeArea.java:8: error: Loop specifications must immediately precede a loop statement
	//@ maintaining overlapArea == (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
	    ^
1 error

class ComputeArea {
    //@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        int overlapWidth = (ax2<bx2?ax2:bx2) - (ax1>bx1?ax1:bx1), overlapHeight = (ay2<by2?ay2:by2) - (ay1>by1?ay1:by1);
        int overlapArea = 0;
        if (overlapWidth > 0 || overlapHeight > 0) {
            overlapArea = overlapWidth * overlapHeight;
        }
        return area1 + area2 - overlapArea;
    }
}
/home/max/Documents/JMLGPT/tmp/ComputeArea.java:3: error: cannot find symbol
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
                                                                                    ^
  symbol:   variable overlapWidth
  location: class ComputeArea
/home/max/Documents/JMLGPT/tmp/ComputeArea.java:3: error: cannot find symbol
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
                                                                                                        ^
  symbol:   variable overlapHeight
  location: class ComputeArea
/home/max/Documents/JMLGPT/tmp/ComputeArea.java:3: error: cannot find symbol
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
                                                                                                                            ^
  symbol:   variable overlapWidth
  location: class ComputeArea
/home/max/Documents/JMLGPT/tmp/ComputeArea.java:3: error: cannot find symbol
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
                                                                                                                                           ^
  symbol:   variable overlapHeight
  location: class ComputeArea
4 errors

class ComputeArea {
    //@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (overlapWidth > 0 || overlapHeight > 0 ? overlapWidth * overlapHeight : 0);
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        int overlapWidth = (ax2<bx2?ax2:bx2) - (ax1>bx1?ax1:bx1), overlapHeight = (ay2<by2?ay2:by2) - (ay1>by1?ay1:by1);
        int overlapArea = 0;
        if (overlapWidth > 0 || overlapHeight > 0) {
            overlapArea = overlapWidth * overlapHeight;
        }
        //@ assert \result == area1 + area2 - overlapArea;
        return area1 + area2 - overlapArea;
    }
}
