public class Calculator {
    
    /*@ requires Integer.MIN_VALUE + 1 < num1 && num1 < Integer.MAX_VALUE;
      @ requires Integer.MIN_VALUE + 1 < num2 && num2 < Integer.MAX_VALUE;
      @ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
      @ ensures \result == num1 + num2;
      @ also
      @ requires operator == '-' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 - num2;
      @ also
      @ requires operator == '*' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 * num2;
      @ also
      @ requires operator == '/' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 / num2;
      @ also
      @ requires operator == '%' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 % num2;
      @ also
      @ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
      @ ensures \result == -1; @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2
/home/max/Documents/JMLGPT/tmp/Calculator.java:37: error: reached end of file while parsing
            	output = num1 * num2
            	                    ^
1 error

public class Calculator {
    
    /*@ requires Integer.MIN_VALUE + 1 < num1 && num1 < Integer.MAX_VALUE;
      @ requires Integer.MIN_VALUE + 1 < num2 && num2 < Integer.MAX_VALUE;
      @ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
      @ ensures \result == num1 + num2;
      @ also
      @ requires operator == '-' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 - num2;
      @ also
      @ requires operator == '*' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 * num2;
      @ also
      @ requires operator == '/' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 / num2;
      @ also
      @ requires operator == '%' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 % num2;
      @ also
      @ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
      @ ensures \result == -1; @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
                break;

            case '%':
            	output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:45: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
            	output = num1 % num2;
            	              ^
1 verification failure

public class Calculator {
    
    /*@ requires Integer.MIN_VALUE + 1 < num1 && num1 < Integer.MAX_VALUE;
      @ requires Integer.MIN_VALUE + 1 < num2 && num2 < Integer.MAX_VALUE;
      @ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
      @ ensures \result == num1 + num2;
      @ also
      @ requires operator == '-' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 - num2;
      @ also
      @ requires operator == '*' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 * num2;
      @ also
      @ requires operator == '/' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 / num2;
      @ also
      @ requires operator == '%' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 % num2;
      @ also
      @ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
      @ ensures \result == -1; @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	if (num2 != 0) {
            		output = num1 / num2;
            	} else {
            		output = -1;
            	}
                break;

            case '%':
            	if (num2 != 0) {
            		output = num1 % num2;
            	} else {
            		output = -1;
            	}
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:37: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
1 verification failure

public class Calculator {
    
    /*@ requires Integer.MIN_VALUE + 1 < num1 && num1 < Integer.MAX_VALUE;
      @ requires Integer.MIN_VALUE + 1 < num2 && num2 < Integer.MAX_VALUE;
      @ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
      @ ensures \result == num1 + num2;
      @ also
      @ requires operator == '-' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 - num2;
      @ also
      @ requires operator == '*' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 * num2;
      @ also
      @ requires operator == '/' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 / num2;
      @ also
      @ requires operator == '%' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 % num2;
      @ also
      @ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
      @ ensures \result == -1; @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 * num2;
            	output = num1 * num2;
                break;

            case '/':
            	if (num2 != 0) {
            		//@ assume num1 / num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 / num2;
            		output = num1 / num2;
            	} else {
            		output = -1;
            	}
                break;

            case '%':
            	if (num2 != 0) {
            		//@ assume num1 % num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 % num2;
            		output = num1 % num2;
            	} else {
            		output = -1;
            	}
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:33: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int difference
            	output = num1 - num2;
            	              ^
1 verification failure

public class Calculator {
    
    /*@ requires Integer.MIN_VALUE + 1 < num1 && num1 < Integer.MAX_VALUE;
      @ requires Integer.MIN_VALUE + 1 < num2 && num2 < Integer.MAX_VALUE;
      @ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
      @ ensures \result == num1 + num2;
      @ also
      @ requires operator == '-' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 - num2;
      @ also
      @ requires operator == '*' && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 * num2;
      @ also
      @ requires operator == '/' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 / num2;
      @ also
      @ requires operator == '%' && num2 != 0 && num2 != Integer.MIN_VALUE;
      @ ensures \result == num1 % num2;
      @ also
      @ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
      @ ensures \result == -1; @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	//@ assume num1 - num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 - num2;
            	output = num1 - num2;
                break;

            case '*':
            	//@ assume num1 * num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 * num2;
            	output = num1 * num2;
                break;

            case '/':
            	if (num2 != 0) {
            		//@ assume num1 / num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 / num2;
            		output = num1 / num2;
            	} else {
            		output = -1;
            	}
                break;

            case '%':
            	if (num2 != 0) {
            		//@ assume num1 % num2 <= Integer.MAX_VALUE && Integer.MIN_VALUE <= num1 % num2;
            		output = num1 % num2;
            	} else {
            		output = -1;
            	}
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:6:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:63:
      @ ensures \result == num1 + num2;
        ^
2 verification failures

