class CalcComplement {
    //@ ensures \result == num ^ mask;
    public int calcComplement(int num) {
        int highbit = 0;
        //@ maintaining 1 <= i && i <= 30;
        //@ maintaining (\forall int j; 1 <= j && j < i; num < 1 << j ==> highbit == j - 1);
        //@ decreases 30 - i;
        for (int i = 1; i <= 30; ++i) {
            if (num >= 1 << i) {
                highbit = i;
            } else {
                break;
            }            
        }
        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;
        return num ^ mask;
    }
}
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: cannot find symbol
    //@ ensures \result == num ^ mask;
                                 ^
  symbol:   variable mask
  location: class CalcComplement
1 error

class CalcComplement {
    //@ ensures \result == num ^ mask;
    public int calcComplement(int num) {
        int highbit = 0;
        //@ maintaining 1 <= i && i <= 30;
        //@ maintaining (\forall int j; 1 <= j && j < i; num < 1 << j ==> highbit == j - 1);
        //@ decreases 30 - i;
        for (int i = 1; i <= 30; ++i) {
            if (num >= 1 << i) {
                highbit = i;
            } else {
                break;
            }            
        }
        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;
        //@ assert mask == (highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1);
        return num ^ mask;
    }
}
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: cannot find symbol
    //@ ensures \result == num ^ mask;
                                 ^
  symbol:   variable mask
  location: class CalcComplement
1 error

class CalcComplement {
    //@ ensures \result == num ^ (\old(highbit) == 30 ? 0x7fffffff : (1 << (\old(highbit) + 1)) - 1);
    public int calcComplement(int num) {
        int highbit = 0;
        //@ maintaining 1 <= i && i <= 30;
        //@ maintaining (\forall int j; 1 <= j && j < i; num < 1 << j ==> highbit == j - 1);
        //@ decreases 30 - i;
        for (int i = 1; i <= 30; ++i) {
            if (num >= 1 << i) {
                highbit = i;
            } else {
                break;
            }            
        }
        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;
        return num ^ mask;
    }
}
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: cannot find symbol
    //@ ensures \result == num ^ (\old(highbit) == 30 ? 0x7fffffff : (1 << (\old(highbit) + 1)) - 1);
                                       ^
  symbol:   variable highbit
  location: class CalcComplement
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: cannot find symbol
    //@ ensures \result == num ^ (\old(highbit) == 30 ? 0x7fffffff : (1 << (\old(highbit) + 1)) - 1);
                                                                                 ^
  symbol:   variable highbit
  location: class CalcComplement
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: bad operand types for binary operator '^'
    //@ ensures \result == num ^ (\old(highbit) == 30 ? 0x7fffffff : (1 << (\old(highbit) + 1)) - 1);
                               ^
  first type:  boolean
  second type: int
3 errors

class CalcComplement {
    //@ ensures \result == num ^ (\old(highbit) == 30 ? 0x7fffffff : (1 << (\old(highbit) + 1)) - 1);
    public int calcComplement(int num) {
        int highbit = 0;
        //@ maintaining 1 <= i && i <= 30;
        //@ maintaining (\forall int j; 1 <= j && j < i; num < 1 << j ==> highbit == j - 1);
        //@ decreases 30 - i;
        for (int i = 1; i <= 30; ++i) {
            if (num >= 1 << i) {
                highbit = i;
            } else {
                break;
            }            
        }
        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;
        //@ assert mask == (highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1);
        return num ^ mask;
    }
}
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: cannot find symbol
    //@ ensures \result == num ^ (\old(highbit) == 30 ? 0x7fffffff : (1 << (\old(highbit) + 1)) - 1);
                                       ^
  symbol:   variable highbit
  location: class CalcComplement
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: cannot find symbol
    //@ ensures \result == num ^ (\old(highbit) == 30 ? 0x7fffffff : (1 << (\old(highbit) + 1)) - 1);
                                                                                 ^
  symbol:   variable highbit
  location: class CalcComplement
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: bad operand types for binary operator '^'
    //@ ensures \result == num ^ (\old(highbit) == 30 ? 0x7fffffff : (1 << (\old(highbit) + 1)) - 1);
                               ^
  first type:  boolean
  second type: int
3 errors

class CalcComplement {
    //@ ensures \result == num ^ (\old(num) == 30 ? 0x7fffffff : (1 << (\old(num) + 1)) - 1);
    public int calcComplement(int num) {
        int highbit = 0;
        //@ maintaining 1 <= i && i <= 30;
        //@ maintaining (\forall int j; 1 <= j && j < i; num < 1 << j ==> highbit == j - 1);
        //@ decreases 30 - i;
        for (int i = 1; i <= 30; ++i) {
            if (num >= 1 << i) {
                highbit = i;
            } else {
                break;
            }            
        }
        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;
        //@ assert mask == (highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1);
        return num ^ mask;
    }
}
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:2: error: bad operand types for binary operator '^'
    //@ ensures \result == num ^ (\old(num) == 30 ? 0x7fffffff : (1 << (\old(num) + 1)) - 1);
                               ^
  first type:  boolean
  second type: int
1 error

class CalcComplement {
    //@ ensures \result == (num == 0 ? 1 : ~num & ((1 << Integer.toBinaryString(num).length()) - 1));
    public int calcComplement(int num) {
        return (num == 0 ? 1 : ~num & ((1 << Integer.toBinaryString(num).length()) - 1));
    }
}
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Integer.jml:134: Note: Not implemented for static checking: method axioms with old clauses: method toBinaryString(int)
      @   old long pos_i = (1L<<32) + i;
          ^
/home/max/Documents/JMLGPT/tmp/CalcComplement.java:4: verify: The prover cannot establish an assertion (PossiblyLargeShift) in method calcComplement
        return (num == 0 ? 1 : ~num & ((1 << Integer.toBinaryString(num).length()) - 1));
                                          ^
1 verification failure

class CalcComplement {
    //@ ensures \result == (num == 0 ? 1 : ~num & ((1 << 31) - 1));
    public int calcComplement(int num) {
        return (num == 0 ? 1 : ~num & ((1 << 31) - 1));
    }
}

