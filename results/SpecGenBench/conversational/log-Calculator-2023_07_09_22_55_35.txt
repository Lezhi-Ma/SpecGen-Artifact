public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:21: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int difference
            	output = num1 - num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && Integer.MIN_VALUE <= output;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && Integer.MIN_VALUE <= output;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && Integer.MIN_VALUE <= output;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && Integer.MIN_VALUE <= output;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && Integer.MIN_VALUE <= output;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            default:
                output = -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            default:
                output = -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            default:
                output = -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            default:
                output = -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            default:
                output = -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            default:
                output = -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
1 verification failure

public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    //@ ensures \result == num1 - num2;
    //@ ensures \result == num1 * num2;
    //@ ensures \result == num1 / num2;
    //@ ensures \result == num1 % num2;
    //@ ensures \result == -1;
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '-':
            	output = num1 - num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '*':
            	output = num1 * num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            case '/':
            	output = num1 / num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
		break;

	    case '%':
		output = num1 % num2;
                //@ assume output <= Integer.MAX_VALUE && output >= Integer.MIN_VALUE;
                break;

            default:
                output = -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
1 verification failure

