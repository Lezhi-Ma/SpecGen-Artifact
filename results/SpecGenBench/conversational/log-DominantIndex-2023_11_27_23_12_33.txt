class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method dominantIndex
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
            ^
1 verification failure

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
1 error

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
2 errors

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: error: illegal start of statement
        }
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:17: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:32: error: illegal start of statement
        }
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:29: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
4 errors

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:15: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
2 errors

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: error: illegal start of statement
        }
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:17: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
3 errors

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: error: illegal start of statement
        }
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:17: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
3 errors

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: error: illegal start of statement
        }
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:17: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
3 errors

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: error: illegal start of statement
        }
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:17: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
3 errors

class DominantIndex {
    //@ requires 0 <= nums.length && nums.length <= Integer.MAX_VALUE;
    //@ requires (\forall int j; 0 <= j && j < nums.length; Integer.MIN_VALUE <= nums[j] && nums[j] <= Integer.MAX_VALUE);
    //@ ensures \result < nums.length;
    //@ ensures 0 <= \result && \result < nums.length ==> (\forall int i; 0 <= i && i < nums.length && i != \result; 2 * nums[i] <= nums[\result]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < nums.length; 2 * nums[i] <= nums[\result]);
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i; nums[j] <= nums[biggest_index]);
        }

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining 0 <= biggest_index && biggest_index < nums.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            //@ loop_invariant 0 <= i && i <= nums.length;
            //@ loop_invariant 0 <= biggest_index && biggest_index < nums.length;
            //@ loop_invariant (\forall int j; 0 <= j && j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:20: error: illegal start of statement
        }
        ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:17: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: error: Loop specifications must immediately precede a loop statement
            //@ loop_invariant 0 <= i && i <= nums.length;
                ^
3 errors

