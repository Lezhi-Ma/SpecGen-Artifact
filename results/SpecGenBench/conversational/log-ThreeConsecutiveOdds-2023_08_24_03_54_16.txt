public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ ensures \result == true <==> (\exists int i; 0 <= i && i <= arr.length - 3; (arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;
	if (n < 3) {
	    return false;
	}
        //@ loop_invariant 0 <= i && i <= n - 3;
        //@ loop_invariant (\forall int j; 0 <= j && j < i; (arr[j] & 1) != 0);
        //@ decreases n - i;
        for (int i = 0; i <= n - 3; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method threeConsecutiveOdds
        //@ loop_invariant 0 <= i && i <= n - 3;
            ^
1 verification failure

public class ThreeConsecutiveOdds {

    //@ requires arr != null;
    //@ ensures \result == true <==> (\exists int i; 0 <= i && i <= arr.length - 3; (arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0);
    public boolean threeConsecutiveOdds(int[] arr) {
        int n = arr.length;
	if (n < 3) {
	    return false;
	}
        //@ loop_invariant 0 <= i && i <= n - 2;
        //@ loop_invariant (\forall int j; 0 <= j && j < i; (arr[j] & 1) != 0);
        //@ decreases n - i;
        for (int i = 0; i <= n - 2; ++i) {
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                return true;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/ThreeConsecutiveOdds.java:14: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method threeConsecutiveOdds
            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {
                                                                  ^
1 verification failure

