class NegCounter {

    /*@ requires arr != null;
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
      @ ensures (\exists int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result > 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result == arr.length;
      @ pure @*/
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:5:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:7:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result == arr.length;
        ^
4 verification failures

class NegCounter {

    /*@ requires arr != null;
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
      @ ensures (\exists int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result > 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result == (\num_of int i; 0 <= i && i < arr.length; arr[i] < 0);
      @ pure @*/
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:7: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \num_of
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result == (\num_of int i; 0 <= i && i < arr.length; arr[i] < 0);
                                                                                      ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:5:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:7:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result == (\num_of int i; 0 <= i && i < arr.length; arr[i] < 0);
        ^
1 warning
4 verification failures

class NegCounter {

    /*@ requires arr != null;
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
      @ ensures (\exists int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result > 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> (\exists int j; 0 <= j && j < arr.length; arr[j] < 0 && (\forall int k; 0 <= k && k < arr.length; k != j ==> arr[k] >= 0)) && \result == (\num_of int i; 0 <= i && i < arr.length; arr[i] < 0);
      @ pure @*/
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:7: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \num_of
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> (\exists int j; 0 <= j && j < arr.length; arr[j] < 0 && (\forall int k; 0 <= k && k < arr.length; k != j ==> arr[k] >= 0)) && \result == (\num_of int i; 0 <= i && i < arr.length; arr[i] < 0);
                                                                                                                                                                                                                    ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:7:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> (\exists int j; 0 <= j && j < arr.length; arr[j] < 0 && (\forall int k; 0 <= k && k < arr.length; k != j ==> arr[k] >= 0)) && \result == (\num_of int i; 0 <= i && i < arr.length; arr[i] < 0);
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:5:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
        ^
1 warning
4 verification failures

class NegCounter {

    /*@ requires arr != null;
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
      @ ensures (\exists int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result > 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> (\exists int j; 0 <= j && j < arr.length; arr[j] < 0 && (\forall int k; 0 <= k && k < arr.length; k != j ==> arr[k] >= 0)) && (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0 && (\forall int j; 0 <= j && j < arr.length; j != i ==> arr[j] < 0)) ==> \result == 1;
      @ pure @*/
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
        //@ decreases arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method countNegInArray
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
            ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:5:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
        ^
3 verification failures

class NegCounter {

    /*@ requires arr != null;
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
      @ ensures (\exists int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result > 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> (\exists int j; 0 <= j && j < arr.length; arr[j] < 0 && (\forall int k; 0 <= k && k < arr.length; k != j ==> arr[k] >= 0)) && (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0 && (\forall int j; 0 <= j && j < arr.length; j != i ==> arr[j] < 0)) ==> \result == 1;
      @ pure @*/
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
        //@ decreasing arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method countNegInArray
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
            ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:5:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
        ^
3 verification failures

class NegCounter {

    /*@ requires arr != null;
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
      @ ensures (\exists int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result > 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> (\exists int j; 0 <= j && j < arr.length; arr[j] < 0 && (\forall int k; 0 <= k && k < arr.length; k != j ==> arr[k] >= 0)) && (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0 && (\forall int j; 0 <= j && j < arr.length; j != i ==> arr[j] < 0)) ==> \result == 1;
      @ pure @*/
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
        //@ decreasing arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method countNegInArray
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
            ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:5:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
        ^
3 verification failures

class NegCounter {

    /*@ requires arr != null;
      @ ensures \result >= 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
      @ ensures (\exists int i; 0 <= i && i < arr.length; arr[i] < 0) ==> \result > 0;
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] < 0) ==> (\exists int j; 0 <= j && j < arr.length; arr[j] < 0 && (\forall int k; 0 <= k && k < arr.length; k != j ==> arr[k] >= 0)) && (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0 && (\forall int j; 0 <= j && j < arr.length; j != i ==> arr[j] < 0)) ==> \result == 1;
      @ pure @*/
    public int countNegInArray(int[] arr) {
        int cnt = 0;

        //@ maintaining 0 <= i && i <= arr.length;
        //@ maintaining 0 <= cnt && cnt <= i;
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
        //@ decreasing arr.length - i;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i] < 0)
                cnt = cnt + 1;
        }

        return cnt;
    }

}
/home/max/Documents/JMLGPT/tmp/NegCounter.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method countNegInArray
        //@ maintaining (\forall int j; 0 <= j && j < i; arr[j] >= 0);
            ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/NegCounter.java:5:) in method countNegInArray
        return cnt;
        ^
/home/max/Documents/JMLGPT/tmp/NegCounter.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/NegCounter.java:21:
      @ ensures (\forall int i; 0 <= i && i < arr.length; arr[i] >= 0) ==> \result == 0;
        ^
3 verification failures

