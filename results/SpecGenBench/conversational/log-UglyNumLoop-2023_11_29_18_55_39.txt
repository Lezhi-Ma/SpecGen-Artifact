class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: warning: A non-pure method is being called where it is not permitted: UglyNum.isUglySpec(int)
    //@ ensures \result <==> isUglySpec(n);
                                       ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:26:
    //@ ensures \result <==> isUglySpec(n);
        ^
1 warning
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static /*@ pure @*/ boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:26:
    //@ ensures \result <==> isUglySpec(n);
        ^
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || n != 1;
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: warning: A non-pure method is being called where it is not permitted: UglyNum.isUglySpec(int)
    //@ ensures \result <==> isUglySpec(n);
                                       ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27:
    //@ ensures \result <==> isUglySpec(n);
        ^
1 warning
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || n != 1;
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static /*@ pure @*/ boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27:
    //@ ensures \result <==> isUglySpec(n);
        ^
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: warning: A non-pure method is being called where it is not permitted: UglyNum.isUglySpec(int)
    //@ ensures \result <==> isUglySpec(n);
                                       ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:26:
    //@ ensures \result <==> isUglySpec(n);
        ^
1 warning
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || n != 1;
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static /*@ pure @*/ boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27:
    //@ ensures \result <==> isUglySpec(n);
        ^
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || n != 1;
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: warning: A non-pure method is being called where it is not permitted: UglyNum.isUglySpec(int)
    //@ ensures \result <==> isUglySpec(n);
                                       ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27:
    //@ ensures \result <==> isUglySpec(n);
        ^
1 warning
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || n != 1;
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static /*@ pure @*/ boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27:
    //@ ensures \result <==> isUglySpec(n);
        ^
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || n != 1;
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: warning: A non-pure method is being called where it is not permitted: UglyNum.isUglySpec(int)
    //@ ensures \result <==> isUglySpec(n);
                                       ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27:
    //@ ensures \result <==> isUglySpec(n);
        ^
1 warning
2 verification failures

class UglyNum {
    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> isUglySpec(n);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ maintaining n == \old(n) ==> n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || n != 1;
        return n == 1;
    }

    //@ requires Integer.MIN_VALUE <= n && n <= Integer.MAX_VALUE;
    //@ ensures \result <==> n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    public static /*@ pure @*/ boolean isUglySpec(int n) {
        return n > 0 && (n % 2 == 0 || n % 3 == 0 || n % 5 == 0);
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:27:
    //@ ensures \result <==> isUglySpec(n);
        ^
2 verification failures

