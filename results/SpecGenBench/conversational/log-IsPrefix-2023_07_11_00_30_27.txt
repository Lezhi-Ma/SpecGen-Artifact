public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result ==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    //@ ensures !\result ==> pat.length() > txt.length() || (\exists int i; 0 <= i && i < pat.length(); pat.charAt(i) != txt.charAt(i));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:18:
    //@ ensures \result ==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

java
public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result ==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    //@ ensures !\result ==> pat.length() > txt.length() || (\exists int i; 0 <= i && i < pat.length(); pat.charAt(i) != txt.charAt(i));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:1: error: class, interface, enum, or record expected
java
^
1 error

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result ==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
    //@ ensures !\result ==> pat.length() > txt.length() || (\exists int i; 0 <= i && i < pat.length(); pat.charAt(i) != txt.charAt(i));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:20:
    //@ ensures \result ==> pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:17:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:19:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:19:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:19:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:19:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:19:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:19:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:19:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

public class IsPrefix {

    //@ requires pat != null && txt != null;
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
    public boolean isPrefix (String pat, String txt) {
        int i = 0;

        //@ maintaining 0 <= i && i <= pat.length();
        //@ maintaining (\forall int k; 0 <= k && k < i; pat.charAt(k) == txt.charAt(k));
        //@ decreases pat.length() - i;
        while(i < pat.length()) {
            if(i >= txt.length() || pat.charAt(i) != txt.charAt(i))
                return false;
            i = i + 1;
        }

        //@ assert i == pat.length();
        //@ assert (\forall int k; 0 <= k && k < pat.length(); pat.charAt(k) == txt.charAt(k));
        return true;
    }

}
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:4:) in method isPrefix
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsPrefix.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsPrefix.java:19:
    //@ ensures \result <==> (pat.length() <= txt.length() && (\forall int i; 0 <= i && i < pat.length(); pat.charAt(i) == txt.charAt(i)));
        ^
2 verification failures

