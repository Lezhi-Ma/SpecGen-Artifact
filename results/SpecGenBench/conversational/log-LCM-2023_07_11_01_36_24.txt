public class LCM {
    //@ requires 0 <= n;
    //@ requires 0 < d;
    //@ ensures \result == n%d;
    public static int div(int n, int d) { return n%d; }

    //@ requires num1 != 0 && num2 != 0;
    //@ ensures \result == -1 <==> num1 == 0 || num2 == 0;
    //@ ensures \result != -1 ==> \result > 0;
    //@ ensures \result != -1 ==> \result % num1 == 0 && \result % num2 == 0;
    //@ ensures \result != -1 ==> (\forall int i; num1 % i == 0 && num2 % i == 0; \result % i == 0);
    public int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        //@ maintaining result <= Integer.MAX_VALUE;
        //@ maintaining div(result, num1) != 0 || div(result, num2) != 0;
        //@ maintaining (\forall int i; num1 % i == 0 && num2 % i == 0; result % i != 0);
        //@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/LCM.java:25: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining div(result, num1) != 0 || div(result, num2) != 0;
                           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:25: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining div(result, num1) != 0 || div(result, num2) != 0;
                                                     ^
error: An error while executing a proof script for lcm: (error "Solver has unexpectedly terminated")
1 error
2 warnings

public class LCM {
    //@ requires 0 <= n;
    //@ requires 0 < d;
    //@ ensures \result == n%d;
    public static /*@ pure @*/ int div(int n, int d) { return n%d; }

    //@ requires num1 != 0 && num2 != 0;
    //@ ensures \result == -1 <==> num1 == 0 || num2 == 0;
    //@ ensures \result != -1 ==> \result > 0;
    //@ ensures \result != -1 ==> \result % num1 == 0 && \result % num2 == 0;
    //@ ensures \result != -1 ==> (\forall int i; num1 % i == 0 && num2 % i == 0; \result % i == 0);
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        //@ maintaining result <= Integer.MAX_VALUE;
        //@ maintaining div(result, num1) != 0 || div(result, num2) != 0;
        //@ maintaining (\forall int i; num1 % i == 0 && num2 % i == 0; result % i != 0);
        //@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/LCM.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method lcm: int negation
		num1 = -num1;
		       ^
1 verification failure

public class LCM {
    //@ requires 0 <= n;
    //@ requires 0 < d;
    //@ ensures \result == n%d;
    public static /*@ pure @*/ int div(int n, int d) { return n%d; }

    //@ requires num1 != 0 && num2 != 0;
    //@ ensures \result == -1 <==> num1 == 0 || num2 == 0;
    //@ ensures \result != -1 ==> \result > 0;
    //@ ensures \result != -1 ==> \result % num1 == 0 && \result % num2 == 0;
    //@ ensures \result != -1 ==> (\forall int i; num1 % i == 0 && num2 % i == 0; \result % i == 0);
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		//@ assume num1 > Integer.MIN_VALUE;
		num1 = -num1;
	if (num2 < 0)
		//@ assume num2 > Integer.MIN_VALUE;
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        //@ maintaining result <= Integer.MAX_VALUE;
        //@ maintaining div(result, num1) != 0 || div(result, num2) != 0;
        //@ maintaining (\forall int i; num1 % i == 0 && num2 % i == 0; result % i != 0);
        //@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}
/home/max/Documents/JMLGPT/tmp/LCM.java:28: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method lcm
        //@ maintaining (\forall int i; num1 % i == 0 && num2 % i == 0; result % i != 0);
            ^
1 verification failure

public class LCM {
    //@ requires 0 <= n;
    //@ requires 0 < d;
    //@ ensures \result == n%d;
    public static /*@ pure @*/ int div(int n, int d) { return n%d; }

    //@ requires num1 != 0 && num2 != 0;
    //@ ensures \result == -1 <==> num1 == 0 || num2 == 0;
    //@ ensures \result != -1 ==> \result > 0;
    //@ ensures \result != -1 ==> \result % num1 == 0 && \result % num2 == 0;
    //@ ensures \result != -1 ==> (\forall int i; num1 % i == 0 && num2 % i == 0; \result % i == 0);
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		//@ assume num1 > Integer.MIN_VALUE;
		num1 = -num1;
	if (num2 < 0)
		//@ assume num2 > Integer.MIN_VALUE;
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        //@ maintaining result <= Integer.MAX_VALUE;
        //@ maintaining (\forall int i; num1 % i == 0 && num2 % i == 0 && i > 0 && i <= result; result % i != 0);
        //@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}
error: An error while executing a proof script for lcm: (error "Solver has unexpectedly terminated")
1 error

public class LCM {
    //@ requires 0 <= n;
    //@ requires 0 < d;
    //@ ensures \result == n%d;
    public static /*@ pure @*/ int div(int n, int d) { return n%d; }

    //@ requires num1 != 0 && num2 != 0;
    //@ ensures \result == -1 <==> num1 == 0 || num2 == 0;
    //@ ensures \result != -1 ==> \result > 0;
    //@ ensures \result != -1 ==> \result % num1 == 0 && \result % num2 == 0;
    //@ ensures \result != -1 ==> (\forall int i; num1 % i == 0 && num2 % i == 0 && i > 0 && i <= \result; \result % i != 0);
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		//@ assume num1 > Integer.MIN_VALUE;
		num1 = -num1;
	if (num2 < 0)
		//@ assume num2 > Integer.MIN_VALUE;
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        //@ maintaining result <= Integer.MAX_VALUE;
        //@ maintaining (\forall int i; num1 % i == 0 && num2 % i == 0 && i > 0 && i <= result; result % i != 0);
        //@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}
error: An error while executing a proof script for lcm: (error "Solver has unexpectedly terminated")
1 error

