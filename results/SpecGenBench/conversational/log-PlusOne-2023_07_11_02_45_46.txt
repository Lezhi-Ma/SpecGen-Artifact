class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >= 0; i--) {
            digits[i]++;
            digits[i] = digits[i] % 10;
            if (digits[i] != 0) return digits;
        }
        digits = new int[digits.length + 1];
        digits[0] = 1;
        return digits;
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:13: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
        digits = new int[digits.length + 1];
                                       ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >= 0; i--) {
            digits[i]++;
            digits[i] = digits[i] % 10;
            if (digits[i] != 0) return digits;
        }
        int[] newDigits = new int[digits.length + 1];
        newDigits[0] = 1;
        for (int i = 1; i < newDigits.length; i++) {
            newDigits[i] = 0;
        }
        return newDigits;
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:13: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
        int[] newDigits = new int[digits.length + 1];
                                                ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            for (int i = 0; i < digits.length; i++) {
                newDigits[i + 1] = digits[i];
            }
            newDigits[0] = carry;
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 0; i < digits.length; i++) {
                newDigits[i + 1] = digits[i];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

class PlusOne {
    //@ requires digits != null && digits.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] == digits[i]);
    //@ ensures \result[\result.length - 1] == digits[\result.length - 1] + 1;
    //@ ensures (\forall int i; 0 <= i && i < \result.length - 1; \result[i] < 10);
    //@ ensures \result[\result.length - 1] < 10;
    public int[] plusOne(int[] digits) {
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
        }
        if (carry == 0) {
            return digits;
        } else {
            int[] newDigits = new int[digits.length + 1];
            newDigits[0] = carry;
            for (int i = 1; i < newDigits.length; i++) {
                newDigits[i] = digits[i - 1];
            }
            return newDigits;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/PlusOne.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeSize) in method plusOne
            int[] newDigits = new int[digits.length + 1];
                                                    ^
1 verification failure

