
public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
    public short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
    public int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
    public long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:22:) in method Absolute
            return -num;    
            ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:27:
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
        ^
4 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
    public short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
    public int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
    public long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}

/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:22:) in method Absolute
            return -num;    
            ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:27:
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
        ^
4 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
    public short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
    public int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
    public long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:22:) in method Absolute
            return -num;    
            ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:27:
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
        ^
4 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
    public /*@ pure @*/ short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
    public /*@ pure @*/ int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
    public /*@ pure @*/ long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:22:) in method Absolute
            return -num;    
            ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:27:
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
        ^
4 verification failures


public class Absolute {
    //@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
    public short Absolute(short num) {
        if (0 <= num)
            return num;
        else
            return (short)-num;    
    }

    //@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
    public int Absolute(int num) {
        if (0 <= num)
            return num;
        else
            return -num;
    }

    //@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
    public long Absolute(long num) {
        if (0 <= num)
            return num;
        else
            return -num;    
    }
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:9: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
            return (short)-num;    
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
            return -num;
                   ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:22:) in method Absolute
            return -num;    
            ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:27:
    //@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
        ^
4 verification failures


public class Absolute {
	
	//@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
	public short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	//@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
	public int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	//@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	public long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:10: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
			return (short)-num;	
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
			return -num;
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:23:) in method Absolute
			return -num;	
			^
/home/max/Documents/JMLGPT/tmp/Absolute.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:28:
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	    ^
4 verification failures


public class Absolute {
	
	/*@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
	    ensures \result >= 0 && \result <= Short.MAX_VALUE;
	    ensures num >= 0 ==> \result == num;
	    ensures num < 0 ==> \result == -num; @*/
	public short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
	    ensures \result >= 0 && \result <= Integer.MAX_VALUE;
	    ensures num >= 0 ==> \result == num;
	    ensures num < 0 ==> \result == -num; @*/
	public int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
	    ensures \result >= 0 && \result <= Long.MAX_VALUE;
	    ensures num >= 0 ==> \result == num;
	    ensures num < 0 ==> \result == -num; @*/
	public long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:12: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
			return (short)-num;	
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:23: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
			return -num;
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:34: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
			return -num;	
			       ^
3 verification failures


public class Absolute {
	
	/*@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
	    ensures \result >= 0 && \result <= Short.MAX_VALUE;
	    ensures \result == num || \result == -num;
	 */
	public short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
	    ensures \result >= 0 && \result <= Integer.MAX_VALUE;
	    ensures \result == num || \result == -num;
	 */
	public int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
	    ensures \result >= 0 && \result <= Long.MAX_VALUE;
	    ensures \result == num || \result == -num;
	 */
	public long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}

/home/max/Documents/JMLGPT/tmp/Absolute.java:12: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
			return (short)-num;	
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:23: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
			return -num;
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:34: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
			return -num;	
			       ^
3 verification failures


public class Absolute {
	
	/*@ 
		requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
		ensures \result >= 0 && \result <= Short.MAX_VALUE;
		ensures \result == num || \result == -num;
	*/
	public short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@ 
		requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
		ensures \result >= 0 && \result <= Integer.MAX_VALUE;
		ensures \result == num || \result == -num;
	*/
	public int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@ 
		requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
		ensures \result >= 0 && \result <= Long.MAX_VALUE;
		ensures \result == num || \result == -num;
	*/
	public long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}

/home/max/Documents/JMLGPT/tmp/Absolute.java:13: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
			return (short)-num;	
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:25: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
			return -num;
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:37: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: long negation
			return -num;	
			       ^
3 verification failures


public class Absolute {
	
	//@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
	public short Absolute(short num) {
		if (num >= 0)
			return num;
		else
			return (short)-num;	
	}

	//@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
	public int Absolute(int num) {
		if (num >= 0)
			return num;
		else
			return -num;
	}

	//@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	public long Absolute(long num) {
		if (num >= 0)
			return num;
		else
			return -num;	
	}
}


/home/max/Documents/JMLGPT/tmp/Absolute.java:10: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
			return (short)-num;	
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
			return -num;
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:23:) in method Absolute
			return -num;	
			^
/home/max/Documents/JMLGPT/tmp/Absolute.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:28:
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	    ^
4 verification failures


public class Absolute {
	
	//@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
	public short Absolute(short num) {
		if (num >= 0)
			return num;
		else
			return (short)-num;	
	}

	//@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
	public int Absolute(int num) {
		if (num >= 0)
			return num;
		else
			return -num;
	}

	//@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	public long Absolute(long num) {
		if (num >= 0)
			return num;
		else
			return -num;	
	}
}

/home/max/Documents/JMLGPT/tmp/Absolute.java:10: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
			return (short)-num;	
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
			return -num;
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:23:) in method Absolute
			return -num;	
			^
/home/max/Documents/JMLGPT/tmp/Absolute.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:28:
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	    ^
4 verification failures


public class Absolute {
	
	//@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
	public short Absolute(short num) {
		if (num >= 0)
			return num;
		else
			return (short)-num;	
	}

	//@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
	public int Absolute(int num) {
		if (num >= 0)
			return num;
		else
			return -num;
	}

	//@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	public long Absolute(long num) {
		if (num >= 0)
			return num;
		else
			return -num;	
	}
}

/home/max/Documents/JMLGPT/tmp/Absolute.java:10: verify: The prover cannot establish an assertion (ArithmeticCastRange) in method Absolute
			return (short)-num;	
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:19: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method Absolute: int negation
			return -num;
			       ^
/home/max/Documents/JMLGPT/tmp/Absolute.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Absolute.java:23:) in method Absolute
			return -num;	
			^
/home/max/Documents/JMLGPT/tmp/Absolute.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Absolute.java:28:
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	    ^
4 verification failures


public class Absolute {
	
	//@ requires Short.MIN_VALUE <= num && num <= Short.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Short.MAX_VALUE;
	public short Absolute(short num) {
		if (num >= 0)
			return num;
		else
			return (short)-num;	
	}

	//@ requires Integer.MIN_VALUE <= num && num <= Integer.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Integer.MAX_VALUE;
	public int Absolute(int num) {
		if (num >= 0)
			return num;
		else
			return -num;
	}

	//@ requires Long.MIN_VALUE <= num && num <= Long.MAX_VALUE;
	//@ ensures \result >= 0 && \result <= Long.MAX_VALUE;
	public long Absolute(long num) {
		if (num >= 0)
			return num;
		else
			return -num;	
	}
}

