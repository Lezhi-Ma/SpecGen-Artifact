public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[i] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[\result]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:5: error: cannot find symbol
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[i] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
                                                                       ^
  symbol:   variable i
  location: class Biggest
1 error

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[i] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[\result]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:5: error: cannot find symbol
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[i] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
                                                                       ^
  symbol:   variable i
  location: class Biggest
1 error

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[i] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[\result]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:5: error: cannot find symbol
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[i] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
                                                                       ^
  symbol:   variable i
  location: class Biggest
1 error

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[0] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[0]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:17: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method biggest
            if (a[index] > a[biggest]) {
                            ^
1 verification failure

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[0] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[0]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;
        //@ assume index >= 0;
        //@ assume biggest >= 0;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:19: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method biggest
            if (a[index] > a[biggest]) {
                            ^
1 verification failure

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[0] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[0]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;
        //@ assume index >= 0;
        //@ assume biggest >= 0;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (index < a.length) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Biggest.java:6:) in method biggest
        return biggest;
        ^
/home/max/Documents/JMLGPT/tmp/Biggest.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Biggest.java:24:
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[0]);
        ^
2 verification failures

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[0] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[0]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;
        //@ assume index >= 0;
        //@ assume biggest >= 0;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (index < a.length) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        //@ assert 0 <= biggest && biggest < a.length && (\forall int i; 0 <= i && i < biggest; a[biggest] >= a[i]);
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:19: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method biggest
            if (a[index] > a[biggest]) {
                            ^
1 verification failure

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[0] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[0]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;
        //@ assume index >= 0;
        //@ assume biggest >= 0;
        //@ assume index < a.length;
        //@ assume biggest < a.length;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (index < a.length) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        //@ assert 0 <= biggest && biggest < a.length && (\forall int i; 0 <= i && i < biggest; a[biggest] >= a[i]);
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:26: verify: The prover cannot establish an assertion (Assert) in method biggest
        //@ assert 0 <= biggest && biggest < a.length && (\forall int i; 0 <= i && i < biggest; a[biggest] >= a[i]);
            ^
1 verification failure

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[0] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[0]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;
        //@ assume index >= 0;
        //@ assume biggest >= 0;
        //@ assume index < a.length;
        //@ assume biggest < a.length;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (index < a.length) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        //@ assert 0 <= biggest && biggest < a.length;
        //@ assert (\forall int i; 0 <= i && i < biggest; a[biggest] >= a[i]);
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:21: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method biggest
            if (a[index] > a[biggest]) {
                            ^
1 verification failure

public class Biggest {

    //@ requires a.length >= 0 && (\forall int i; 0 <= i && i < a.length; Integer.MIN_VALUE <= a[i] && a[i] <= Integer.MAX_VALUE);
    //@ ensures a.length == 0 ==> \result == -1;
    //@ ensures 0 <= \result && \result < a.length ==> a[\result] >= a[0] && (\forall int i; 0 <= i && i < \result; a[\result] >= a[i]);
    //@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < a.length; a[i] < a[0]);
    static public int biggest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int biggest = 0;
        //@ assume index >= 0;
        //@ assume biggest >= 0;
        //@ assume index < a.length;
        //@ assume biggest < a.length;

        //@ maintaining (\forall int i; 0 <= i && i < index; a[biggest] >= a[i]);
        //@ maintaining (0 <= index && index <= a.length);
        //@ decreases a.length - index;
        while (index < a.length) {
            if (a[index] > a[biggest]) {
                biggest = index;
            }
            index = index + 1;
        }
        //@ assert 0 <= biggest && biggest < a.length;
        //@ assert (\forall int i; 0 <= i && i < biggest; a[biggest] >= a[i]);
        return biggest;
    }
}
/home/max/Documents/JMLGPT/tmp/Biggest.java:21: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method biggest
            if (a[index] > a[biggest]) {
                            ^
1 verification failure

