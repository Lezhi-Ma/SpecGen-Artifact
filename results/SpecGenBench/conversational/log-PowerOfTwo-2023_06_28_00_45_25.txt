class PowerOfTwo {
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i))));
    public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:2: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i))));
                                                                                         ^
1 error

class PowerOfTwo {
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i))));
    public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:2: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i))));
                                                                                         ^
1 error

class PowerOfTwo {
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i))));
    public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:2: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i))));
                                                                                         ^
1 error

class PowerOfTwo {
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i)));
    public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:4: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:2:) in method isPowerOfTwo
        return n > 0 && (n & (n - 1)) == 0;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:4:
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i)));
        ^
2 verification failures

class PowerOfTwo {
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i)));
    public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:4: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:2:) in method isPowerOfTwo
        return n > 0 && (n & (n - 1)) == 0;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwo.java:4:
    //@ ensures \result <==> (n > 0 && (\exists int i; 0 <= i && i <= 31; n == (1 << i)));
        ^
2 verification failures

