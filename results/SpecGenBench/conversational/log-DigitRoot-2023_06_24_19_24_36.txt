class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= num;
            //@ decreases num;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method digitRoot: overflow in int sum
                sum += num % 10;
                    ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method digitRoot
            //@ maintaining sum >= 0 && sum <= num;
                ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

class DigitRoot {
    //@ requires num >= 0 && num <= Integer.MAX_VALUE;
    //@ ensures \result >= 0 && \result <= 9;
    public int digitRoot(int num) {
        //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
        //@ decreases num;
        while (num >= 10) {
            int sum = 0;
            //@ maintaining num >= 0 && num <= Integer.MAX_VALUE;
            //@ maintaining sum >= 0 && sum <= Integer.MAX_VALUE;
            //@ decreases num;
            while (num > 0) {
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                sum += num % 10;
                //@ assert sum <= Integer.MAX_VALUE / 10;
                num /= 10;
            }
            //@ assert sum <= Integer.MAX_VALUE;
            num = sum;
        }
        return num;
    }
}
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:6: verify: The prover cannot establish an assertion (LoopDecreases) in method digitRoot
        //@ decreases num;
            ^
/home/max/Documents/JMLGPT/tmp/DigitalRoot.java:13: verify: The prover cannot establish an assertion (Assert) in method digitRoot
                //@ assert sum <= Integer.MAX_VALUE - (num % 10);
                    ^
2 verification failures

