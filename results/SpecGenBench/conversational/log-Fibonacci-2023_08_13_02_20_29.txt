public class Fibonacci {
   	private  long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]); @*/
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
	
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:4: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	/*@ ensures fib.length == 2;
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	  @ ensures fib[0] == 0;
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:6: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	  @ ensures fib[1] == 1; @*/
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:14: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	  @ ensures fib.length == size;
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:15: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	  @ ensures fib[0] == 0;
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: error: An identifier with private visibility may not be used in a ensures clause with package visibility
	  @ ensures fib[1] == 1; @*/
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:27: error: An identifier with private visibility may not be used in a requires clause with public visibility
	/*@ requires 0 <= index && index < fib.length;
	                                   ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	  @ ensures \result == fib[index]; @*/
	                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]); @*/
	                                          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]); @*/
	                                                      ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]); @*/
	                                                                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]); @*/
	                                                                           ^
12 errors

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]); @*/
	public void fibCompute() {
		int index = 2;

		while (index < fib.length) {

			fib[index] = fib[index - 2] + fib[index - 1];
			index++;

		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method fibCompute
			fib[index] = fib[index - 2] + fib[index - 1];
			                ^
1 verification failure

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]); @*/
	public void fibCompute() {
		int index = 2;

		while (index < fib.length) {
			//@ assume 0 <= index - 2 && index - 2 < fib.length;
			//@ assume 0 <= index - 1 && index - 1 < fib.length;
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:33:) in method fibCompute
	public void fibCompute() {
	            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:34:
	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]); @*/
	    ^
2 verification failures

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib; @*/
	public void fibCompute() {
		int index = 2;

		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: verify: The prover cannot establish an assertion (Assignable: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:34:) in method fibCompute: fib[index]
			fib[index] = fib[index - 2] + fib[index - 1];
			           ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:42:
	  @ assignable fib; @*/
	    ^
2 verification failures

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib[*]; @*/
	public void fibCompute() {
		int index = 2;

		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ assignable fib[index];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: warning: A refining statement is required for statement specifications
			//@ assignable fib[index];
			    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariant) in method fibCompute
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining 2 <= index && index <= fib.length;
		    ^
1 warning
2 verification failures

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib[*]; @*/
	public void fibCompute() {
		int index = 2;

		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ loop_invariant 2 <= index && index <= fib.length;
			//@ loop_invariant (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
			//@ assignable fib[index];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: error: Expected loop specifications while in JML: assignable is not a loop specification keyword
			//@ assignable fib[index];
			    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ loop_invariant 2 <= index && index <= fib.length;
			    ^
2 errors

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib[*]; @*/
	public void fibCompute() {
		int index = 2;

		//@ loop_invariant 2 <= index && index <= fib.length;
		//@ loop_invariant (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		while (index < fib.length) {
			//@ assignable fib[index];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: warning: A refining statement is required for statement specifications
			//@ assignable fib[index];
			    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ loop_invariant 2 <= index && index <= fib.length;
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ loop_invariant 2 <= index && index <= fib.length;
		    ^
1 warning
2 verification failures

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib[*]; @*/
	public void fibCompute() {
		int index = 2;

		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ loop_invariant 2 <= index && index <= fib.length;
			//@ loop_invariant (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
			//@ assignable fib[index];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: error: Expected loop specifications while in JML: assignable is not a loop specification keyword
			//@ assignable fib[index];
			    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ loop_invariant 2 <= index && index <= fib.length;
			    ^
2 errors

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib[*]; @*/
	public void fibCompute() {
		int index = 2;

		//@ loop_invariant 2 <= index && index <= fib.length;
		//@ loop_invariant (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		while (index < fib.length) {
			//@ assignable fib[*];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: warning: A refining statement is required for statement specifications
			//@ assignable fib[*];
			    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariant) in method fibCompute
		//@ loop_invariant (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ loop_invariant 2 <= index && index <= fib.length;
		    ^
1 warning
2 verification failures

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib[*]; @*/
	public void fibCompute() {
		int index = 2;

		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ loop_invariant 2 <= index && index <= fib.length;
			//@ loop_invariant (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
			//@ assignable fib[*];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: error: Expected loop specifications while in JML: assignable is not a loop specification keyword
			//@ assignable fib[*];
			    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ loop_invariant 2 <= index && index <= fib.length;
			    ^
2 errors

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib[*]; @*/
	public void fibCompute() {
		int index = 2;

		//@ loop_invariant 2 <= index && index <= fib.length;
		//@ loop_invariant (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		while (index < fib.length) {
			//@ assignable fib[index];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: warning: A refining statement is required for statement specifications
			//@ assignable fib[index];
			    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ loop_invariant 2 <= index && index <= fib.length;
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ loop_invariant 2 <= index && index <= fib.length;
		    ^
1 warning
2 verification failures

public class Fibonacci {
	private /*@ spec_public @*/ long fib[];

	/*@ ensures fib.length == 2;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures fib[0] == 0;
	  @ ensures fib[1] == 1; @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	/*@ requires 0 <= index && index < fib.length;
	  @ ensures \result == fib[index]; @*/
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-2] + fib[i-1]);
	  @ assignable fib[*]; @*/
	public void fibCompute() {
		int index = 2;

		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
		//@ decreasing fib.length - index;
		while (index < fib.length) {
			//@ loop_invariant 2 <= index && index <= fib.length;
			//@ loop_invariant (\forall int i; 2 <= i && i < index; fib[i] == fib[i-2] + fib[i-1]);
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: error: Loop specifications must immediately precede a loop statement
			//@ loop_invariant 2 <= index && index <= fib.length;
			    ^
1 error

