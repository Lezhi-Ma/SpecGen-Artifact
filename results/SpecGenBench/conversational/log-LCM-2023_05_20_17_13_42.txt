
public class LCM {
    
    //@ requires d != 0;
    //@ ensures \result == n%d;
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE && num2 != Integer.MIN_VALUE && num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE;
      @ ensures \result >= 1 || \result == -1;
      @ ensures \result == -1 <==> num1 == 0 || num2 == 0;
      @ ensures \result > 0 ==> div(\result, num1) == 0 && div(\result, num2) == 0;
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; \result <= i);
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
      @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:11: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures \result > 0 ==> div(\result, num1) == 0 && div(\result, num2) == 0;
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:11: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures \result > 0 ==> div(\result, num1) == 0 && div(\result, num2) == 0;
                                                              ^
/home/max/Documents/JMLGPT/tmp/LCM.java:12: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; \result <= i);
                                            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:12: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; \result <= i);
                                                                 ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                                                 ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                                                                                                          ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                                                                                                                               ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                                                                                                                                                    ^
/home/max/Documents/JMLGPT/tmp/LCM.java:29: verify: The prover cannot establish an assertion (Assignable: /home/max/Documents/JMLGPT/tmp/LCM.java:15:) in method lcm: \everything
            if (div(result, num1) == 0 && div(result, num2) == 0)
                                             ^
/home/max/Documents/JMLGPT/tmp/LCM.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:29:
    public /*@ pure @*/ int lcm(int num1, int num2) 
               ^
/home/max/Documents/JMLGPT/tmp/LCM.java:29: verify: The prover cannot establish an assertion (Assignable: /home/max/Documents/JMLGPT/tmp/LCM.java:15:) in method lcm: \everything
            if (div(result, num1) == 0 && div(result, num2) == 0)
                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:29:
    public /*@ pure @*/ int lcm(int num1, int num2) 
               ^
9 warnings
4 verification failures


public class LCM {
    
    //@ requires d != 0;
    //@ ensures \result == n%d;
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE && num2 != Integer.MIN_VALUE && num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE;
      @ ensures \result >= 1 || \result == -1;
      @ ensures \result == -1 <==> num1 == 0 || num2 == 0;
      @ ensures \result > 0 ==> div(\result, num1) == 0 && div(\result, num2) == 0;
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; \result <= i);
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
      @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        //@ maintaining div(result, num1) == 0 && div(result, num2) == 0;
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; result <= i);
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= result);
        //@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}



/home/max/Documents/JMLGPT/tmp/LCM.java:11: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures \result > 0 ==> div(\result, num1) == 0 && div(\result, num2) == 0;
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:11: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures \result > 0 ==> div(\result, num1) == 0 && div(\result, num2) == 0;
                                                              ^
/home/max/Documents/JMLGPT/tmp/LCM.java:12: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; \result <= i);
                                            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:12: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; \result <= i);
                                                                 ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                                                 ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                                                                                                          ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                                                                                                                               ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
      @ ensures (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < \result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= \result);
                                                                                                                                                                    ^
/home/max/Documents/JMLGPT/tmp/LCM.java:27: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining div(result, num1) == 0 && div(result, num2) == 0;
                           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:27: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining div(result, num1) == 0 && div(result, num2) == 0;
                                                     ^
/home/max/Documents/JMLGPT/tmp/LCM.java:28: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; result <= i);
                                                    ^
/home/max/Documents/JMLGPT/tmp/LCM.java:28: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; result <= i);
                                                                         ^
/home/max/Documents/JMLGPT/tmp/LCM.java:29: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= result);
                                                    ^
/home/max/Documents/JMLGPT/tmp/LCM.java:29: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= result);
                                                                         ^
/home/max/Documents/JMLGPT/tmp/LCM.java:29: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= result);
                                                                                                                                 ^
/home/max/Documents/JMLGPT/tmp/LCM.java:29: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= result);
                                                                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:29: warning: A non-pure method is being called where it is not permitted: LCM.div(int,int)
        //@ maintaining (\forall int i; i > 0 && div(i, num1) == 0 && div(i, num2) == 0; (\exists int j; j > 0 && j < result; div(j, num1) == 0 && div(j, num2) == 0 && div(j, i) == 0) ==> i >= result);
                                                                                                                                                                           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:27: verify: The prover cannot establish an assertion (Assignable: /home/max/Documents/JMLGPT/tmp/LCM.java:15:) in method lcm: \everything
        //@ maintaining div(result, num1) == 0 && div(result, num2) == 0;
                           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:27:
    public /*@ pure @*/ int lcm(int num1, int num2) 
               ^
/home/max/Documents/JMLGPT/tmp/LCM.java:27: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method lcm
        //@ maintaining div(result, num1) == 0 && div(result, num2) == 0;
            ^
18 warnings
3 verification failures

