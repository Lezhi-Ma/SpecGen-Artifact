class ComputeArea {
    //@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(ax1, bx1) <= \min(ax2, bx2) && \max(ay1, by1) <= \min(ay2, by2) ? (\min(ax2, bx2) - \max(ax1, bx1)) * (\min(ay2, by2) - \max(ay1, by1)) : 0);
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        int overlapWidth = (ax2<bx2?ax2:bx2) - (ax1>bx1?ax1:bx1), overlapHeight = (ay2<by2?ay2:by2) - (ay1>by1?ay1:by1);
	int overlapArea = 0;
	if (overlapWidth > 0 || overlapHeight > 0) {
		overlapArea = overlapWidth * overlapHeight;
	}
        return area1 + area2 - overlapArea;
    }
}
/home/max/Documents/JMLGPT/tmp/ComputeArea.java:3: error: illegal start of type
    //@ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(ax1, bx1) <= \min(ax2, bx2) && \max(ay1, by1) <= \min(ay2, by2) ? (\min(ax2, bx2) - \max(ax1, bx1)) * (\min(ay2, by2) - \max(ay1, by1)) : 0);
                                                                                        ^
1 error

class ComputeArea {
    /*@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
      @ ensures \result == (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - (\max(\max(ax1, bx1), \min(ax2, bx2)) <= \min(\min(ax2, bx2), \max(ax1, bx1)) && \max(\max(ay1, by1), \min(ay2, by2)) <= \min(\min(ay2, by2), \max(ay1, by1)) ? (\min(\min(ax2, bx2), \max(ax1, bx1)) - \max(\max(ax1, bx1), \min(ax2, bx2))) * (\min(\min(ay2, by2), \max(ay1, by1)) - \max(\max(ay1, by1), \min(ay2, by2))) : 0);
    @*/
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        int overlapWidth = (ax2<bx2?ax2:bx2) - (ax1>bx1?ax1:bx1), overlapHeight = (ay2<by2?ay2:by2) - (ay1>by1?ay1:by1);
        int overlapArea = 0;
        if (overlapWidth > 0 || overlapHeight > 0) {
            overlapArea = overlapWidth * overlapHeight;
        }
        return area1 + area2 - overlapArea;
    }
}
