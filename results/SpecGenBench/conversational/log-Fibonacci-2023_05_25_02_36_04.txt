public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0);
	  @ ensures fib[1] == 1;
	  @ ensures fib[2] == 1; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == i);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 2; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		//@ maintaining (\forall int i; 0 <= i && i < index - 2; fib[i] <= fib[i + 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:) in method Fibonacci
	 Fibonacci(int size) {
	 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0);
	    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		    ^
4 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0);
	  @ ensures fib[1] == 1;
	  @ ensures fib[2] == 1; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == i);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 2; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		//@ maintaining (\forall int i; 0 <= i && i < index - 2; fib[i] <= fib[i + 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:) in method Fibonacci
	 Fibonacci(int size) {
	 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0);
	    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		    ^
4 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0 || fib[i] == 1);
	  @ ensures fib[1] == 1;
	  @ ensures fib[2] == 1; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == i);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 2; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		//@ maintaining (\forall int i; 0 <= i && i < index - 2; fib[i] <= fib[i + 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:15:) in method Fibonacci
	 Fibonacci(int size) {
	 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:
	  @ ensures fib[2] == 1; @*/
	    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:15: verify: The prover cannot establish an assertion (UndefinedTooLargeIndex) in method Fibonacci
	  @ ensures fib[2] == 1; @*/
	               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: verify: Associated method exit
	}
	 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining 2 <= index && index <= fib.length;
		    ^
6 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0 || fib[i] == 1);
	  @ ensures fib[1] == 1;
	  @ ensures fib[0] == 0; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == i);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 2; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		//@ maintaining (\forall int i; 0 <= i && i < index - 2; fib[i] <= fib[i + 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		    ^
2 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0 || fib[i] == 1);
	  @ ensures fib[1] == 1;
	  @ ensures fib[0] == 0; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == i);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 2; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		//@ maintaining (\forall int i; 0 <= i && i < index - 2; fib[i] <= fib[i + 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining 2 <= index && index <= fib.length;
		    ^
2 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0 || fib[i] == 1);
	  @ ensures fib[1] == 1;
	  @ ensures fib[0] == 0; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == i);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 2; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		//@ maintaining (\forall int i; 0 <= i && i < index - 2; fib[i] <= fib[i + 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining 2 <= index && index <= fib.length;
		    ^
2 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0 || fib[i] == 1);
	  @ ensures fib[1] == 1;
	  @ ensures fib[0] == 0; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == i);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 2; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		//@ maintaining (\forall int i; 0 <= i && i < index - 2; fib[i] <= fib[i + 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining 2 <= index && index <= fib.length;
		    ^
2 verification failures

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < size; fib[i] == 0 || fib[i] == 1);
	  @ ensures fib[1] == 1;
	  @ ensures fib[0] == 0; @*/
	 Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /* pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == i);
	  @ ensures (\forall int i; 0 <= i && i < fib.length; fib[i] >= 0);
	  @ ensures (\forall int i; 0 <= i && i < fib.length - 2; fib[i] <= fib[i + 1]); @*/
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		//@ maintaining (\forall int i; 0 <= i && i < index - 2; fib[i] <= fib[i + 1]);
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; 0 <= i && i < index; fib[i] >= 0);
		    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method fibCompute
		//@ maintaining (\forall int i; index <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
		    ^
2 verification failures

