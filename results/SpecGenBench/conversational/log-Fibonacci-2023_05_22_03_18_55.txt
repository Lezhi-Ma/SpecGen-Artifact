public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == \old(fib[i])); @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 0 <= i && i < 2; fib[i] == \old(fib[i]));
	  @ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]); @*/
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: error: Non-static fields are not allowed in \old environments in postconditions: fib
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == \old(fib[i])); @*/
	                                                            ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == \old(fib[i])); @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 0 <= i && i < 2; fib[i] == \old(fib[i]));
	  @ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]); @*/
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: error: Non-static fields are not allowed in \old environments in postconditions: fib
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == \old(fib[i])); @*/
	                                                            ^
1 error

public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];

	//@ ensures fib.length == 2;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	 	
	/*@ requires 2 <= size && size <= 93;
	  @ ensures fib.length == size;
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == \old(fib[i])); @*/
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}

	/*@ ensures (\forall int i; 0 <= i && i < 2; \old(fib[i]) == fib[i]);
	  @ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]); @*/
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;                        
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: error: Non-static fields are not allowed in \old environments in postconditions: fib
	  @ ensures (\forall int i; 0 <= i && i < 2; fib[i] == \old(fib[i])); @*/
	                                                            ^
1 error

