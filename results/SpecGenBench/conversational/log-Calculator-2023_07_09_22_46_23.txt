public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private /*@ pure @*/ int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private /*@ pure @*/ int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private /*@ pure @*/ int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private /*@ pure @*/ int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private /*@ pure @*/ int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:3: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                 ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:3: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                    ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:3: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                       ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:3: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                          ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:3: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                                             ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:9: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                 ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:9: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                    ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:9: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                       ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:9: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                          ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:9: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                                             ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:15: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                 ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:15: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                    ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:15: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                       ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:15: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                          ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:15: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                                             ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:21: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                 ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:21: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                    ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:21: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                       ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:21: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                          ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:21: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                                             ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:28: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                 ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:28: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                    ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:28: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                       ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:28: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                          ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:28: error: cannot find symbol
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
                                                                                             ^
  symbol:   variable operator
  location: class Calculator
/home/max/Documents/JMLGPT/tmp/Calculator.java:37: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:37: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                                                         ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:37: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                                                                                            ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:37: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                                                                                                                               ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:37: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                                                                                                                                                                ^
30 errors

public class Calculator {
    
    //@ spec_public
    private int num1;
    //@ spec_public
    private int num2;
    //@ spec_public
    private char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private /*@ pure @*/ int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private /*@ pure @*/ int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private /*@ pure @*/ int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private /*@ pure @*/ int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private /*@ pure @*/ int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                                                         ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                                                                                            ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                                                                                                                               ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
                                                                                                                                                                ^
5 errors

public class Calculator {
    
    //@ spec_public
    private /*@ spec_public @*/ int num1;
    //@ spec_public
    private /*@ spec_public @*/ int num2;
    //@ spec_public
    private /*@ spec_public @*/ char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private /*@ pure @*/ int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private /*@ pure @*/ int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private /*@ pure @*/ int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private /*@ pure @*/ int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private /*@ pure @*/ int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:4: error: SpecPublic is not a repeatable annotation type
    private /*@ spec_public @*/ int num1;
                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:6: error: SpecPublic is not a repeatable annotation type
    private /*@ spec_public @*/ int num2;
                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:8: error: SpecPublic is not a repeatable annotation type
    private /*@ spec_public @*/ char operator;
                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                             ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                                        ^
8 errors

java
public class Calculator {
    
    //@ spec_public
    private /*@ spec_public @*/ int num1;
    //@ spec_public
    private /*@ spec_public @*/ int num2;
    //@ spec_public
    private /*@ spec_public @*/ char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private /*@ pure @*/ int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private /*@ pure @*/ int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private /*@ pure @*/ int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private /*@ pure @*/ int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private /*@ pure @*/ int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:1: error: class, interface, enum, or record expected
java
^
1 error

java
public class Calculator {
    
    //@ spec_public
    private /*@ spec_public @*/ int num1;
    //@ spec_public
    private /*@ spec_public @*/ int num2;
    //@ spec_public
    private /*@ spec_public @*/ char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private /*@ pure @*/ int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private /*@ pure @*/ int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private /*@ pure @*/ int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private /*@ pure @*/ int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private /*@ pure @*/ int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:1: error: class, interface, enum, or record expected
java
^
1 error

java
public class Calculator {
    
    //@ public instance model int num1;
    //@ public instance model int num2;
    //@ public instance model char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private static int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private static int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private static int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private static int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private static int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
    public static int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:1: error: class, interface, enum, or record expected
java
^
1 error

java
public class Calculator {
    
    //@ public instance model int num1;
    //@ public instance model int num2;
    //@ public instance model char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private static int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private static int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private static int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private static int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private static int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
    public static int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:1: error: class, interface, enum, or record expected
java
^
1 error

java
public class Calculator {
    
    //@ public instance model int num1;
    //@ public instance model int num2;
    //@ public instance model char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private static int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private static int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private static int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private static int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private static int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(num1, num2) || \result == subtract(num1, num2) || \result == multiply(num1, num2) || \result == divide(num1, num2) || \result == modulo(num1, num2);
    public static int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:1: error: class, interface, enum, or record expected
java
^
1 error

java
public class Calculator {
    
    private int num1;
    private int num2;
    private char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
    public int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:1: error: class, interface, enum, or record expected
java
^
1 error

public class Calculator {
    
    private int num1;
    private int num2;
    private char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
    public int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.add(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.subtract(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                             ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.multiply(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                             ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.divide(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                                                              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.modulo(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                                              ^
15 errors
5 warnings

public class Calculator {
    
    private /*@ spec_public @*/ int num1;
    private /*@ spec_public @*/ int num2;
    private /*@ spec_public @*/ char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
    public int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.add(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.subtract(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.multiply(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                             ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.divide(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: warning: A non-pure method is being called where it is not permitted: Calculator.modulo(int,int)
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                                              ^
5 errors
5 warnings

public class Calculator {
    
    private /*@ spec_public @*/ int num1;
    private /*@ spec_public @*/ int num2;
    private /*@ spec_public @*/ char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private /*@ pure @*/ int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private /*@ pure @*/ int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private /*@ pure @*/ int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private /*@ pure @*/ int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private /*@ pure @*/ int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                           ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                   ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                             ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:41: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
                                                                                                                                                                                                        ^
5 errors

public class Calculator {
    
    private /*@ spec_public @*/ int num1;
    private /*@ spec_public @*/ int num2;
    private /*@ spec_public @*/ char operator;
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 + num2;
    private /*@ pure @*/ int add(int num1, int num2) {
        return num1 + num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 - num2;
    private /*@ pure @*/ int subtract(int num1, int num2) {
        return num1 - num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == num1 * num2;
    private /*@ pure @*/ int multiply(int num1, int num2) {
        return num1 * num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 / num2;
    private /*@ pure @*/ int divide(int num1, int num2) {
        return num1 / num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ requires num2 != 0;
    //@ ensures \result == num1 % num2;
    private /*@ pure @*/ int modulo(int num1, int num2) {
        return num1 % num2;
    }

    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    //@ ensures \result == add(this.num1, this.num2) || \result == subtract(this.num1, this.num2) || \result == multiply(this.num1, this.num2) || \result == divide(this.num1, this.num2) || \result == modulo(this.num1, this.num2);
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        this.num1 = num1;
        this.num2 = num2;
        this.operator = operator;

        int output;

        switch (operator)
        {
            case '+':
                output = add(num1, num2);
                break;

            case '-':
                output = subtract(num1, num2);
                break;

            case '*':
                output = multiply(num1, num2);
                break;

            case '/':
                output = divide(num1, num2);
                break;

            case '%':
                output = modulo(num1, num2);
                break;

            default:
                return -1;
        }
        return output;
    }
}
