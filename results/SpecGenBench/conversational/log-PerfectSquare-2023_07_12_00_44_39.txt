class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num; i++) {
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining 1 <= i && i <= num;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i <= num; i++) {
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:9: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method isPerfectSquare: int multiply overflow
            if(i * i == num)
                 ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i <= num; i++) {
            //@ assume i * i <= Integer.MAX_VALUE && Integer.MIN_VALUE <= i * i;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method isPerfectSquare
                return true;
                ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:11:
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
        ^
2 verification failures

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i <= num; i++) {
            //@ assume i * i <= Integer.MAX_VALUE && Integer.MIN_VALUE <= i * i;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6: verify: The prover cannot establish an assertion (LoopInvariant) in method isPerfectSquare
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i * i <= Integer.MAX_VALUE && Integer.MIN_VALUE <= i * i;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7: verify: The prover cannot establish an assertion (LoopDecreasesNonNegative) in method isPerfectSquare
        //@ decreases num - i;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i * i <= Integer.MAX_VALUE && Integer.MIN_VALUE <= i * i;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:7: verify: The prover cannot establish an assertion (LoopDecreasesNonNegative) in method isPerfectSquare
        //@ decreases num - i;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i * i <= Integer.MAX_VALUE && Integer.MIN_VALUE <= i * i;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method isPerfectSquare: overflow in int sum
        for(int i = 1; i <= num+1; i++) {
                               ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method isPerfectSquare: overflow in int sum
        for(int i = 1; i <= num+1; i++) {
                               ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - i * i && num >= Integer.MIN_VALUE + i * i;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method isPerfectSquare: overflow in int sum
        for(int i = 1; i <= num+1; i++) {
                               ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - i * i && num >= Integer.MIN_VALUE + i * i;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method isPerfectSquare: overflow in int sum
        for(int i = 1; i <= num+1; i++) {
                               ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - i * i && num >= Integer.MIN_VALUE + i * i;
            //@ assume i * i <= Integer.MAX_VALUE && i * i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method isPerfectSquare: overflow in int sum
        for(int i = 1; i <= num+1; i++) {
                               ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method isPerfectSquare: overflow in int sum
        for(int i = 1; i <= num+1; i++) {
                               ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            //@ assume i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: The prover cannot establish an assertion (LoopInvariant) in method isPerfectSquare
        //@ maintaining 1 <= i && i <= num+1;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            //@ assume i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: The prover cannot establish an assertion (LoopInvariant) in method isPerfectSquare
        //@ maintaining 1 <= i && i <= num+1;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            //@ assume i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: The prover cannot establish an assertion (LoopInvariant) in method isPerfectSquare
        //@ maintaining 1 <= i && i <= num+1;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i;
        for(int i = 1; i < num; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            //@ assume i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method isPerfectSquare
        //@ maintaining 1 <= i && i <= num;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            //@ assume i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method isPerfectSquare
                return true;
                ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
        ^
2 verification failures

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            //@ assume i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3:) in method isPerfectSquare
                return true;
                ^
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PerfectSquare.java:14:
    //@ ensures \result <==> (\exists int i; 1 <= i && i < num; i * i == num);
        ^
2 verification failures

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num+1; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            //@ assume i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:5: verify: The prover cannot establish an assertion (LoopInvariant) in method isPerfectSquare
        //@ maintaining 1 <= i && i <= num+1;
            ^
1 verification failure

class PerfectSquare {
    //@ requires num >= 0;
    //@ ensures \result <==> (\exists int i; 1 <= i && i <= num; i * i == num);
    public static boolean isPerfectSquare(int num) {
        //@ maintaining 1 <= i && i <= num+1;
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
        //@ decreases num - i + 1;
        for(int i = 1; i <= num; i++) {
            //@ assume i <= (int) Math.sqrt(Integer.MAX_VALUE) && i >= (int) Math.sqrt(Integer.MIN_VALUE);
            //@ assume num <= Integer.MAX_VALUE - (long) i * i && num >= Integer.MIN_VALUE + (long) i * i;
            //@ assume (long) i * i <= Integer.MAX_VALUE && (long) i * i >= Integer.MIN_VALUE;
            //@ assume i <= Integer.MAX_VALUE && i >= Integer.MIN_VALUE;
            if(i * i == num)
                return true;
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/PerfectSquare.java:6: verify: The prover cannot establish an assertion (LoopInvariant) in method isPerfectSquare
        //@ maintaining (\forall int j; 1 <= j && j < i; j * j != num);
            ^
1 verification failure

