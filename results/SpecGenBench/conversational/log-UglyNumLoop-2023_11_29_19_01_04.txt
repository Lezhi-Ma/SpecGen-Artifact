class UglyNum {
    //@ ensures \result <==> n > 0 && (\exists int i; n == 2^i || n == 3^i || n == 5^i);
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:2: error: bad operand types for binary operator '^'
    //@ ensures \result <==> n > 0 && (\exists int i; n == 2^i || n == 3^i || n == 5^i);
                                                            ^
  first type:  boolean
  second type: int
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:2: error: bad operand types for binary operator '^'
    //@ ensures \result <==> n > 0 && (\exists int i; n == 2^i || n == 3^i || n == 5^i);
                                                                        ^
  first type:  boolean
  second type: int
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:2: error: bad operand types for binary operator '^'
    //@ ensures \result <==> n > 0 && (\exists int i; n == 2^i || n == 3^i || n == 5^i);
                                                                                    ^
  first type:  boolean
  second type: int
3 errors

class UglyNum {
    //@ ensures \result <==> n > 0 && (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:2:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:22:
    //@ ensures \result <==> n > 0 && (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
        ^
2 verification failures

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:23:
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
        ^
2 verification failures

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1;
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3:) in method isUgly
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:24:
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
        ^
2 verification failures

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:23: verify: The prover cannot establish an assertion (Assert) in method isUgly
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
            ^
1 verification failure

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i)) : "n is either 1 or a product of 2, 3, and 5";
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:23: verify: The prover cannot establish an assertion (Assert) in method isUgly: n is either 1 or a product of 2, 3, and 5
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i)) : "n is either 1 or a product of 2, 3, and 5";
            ^
1 verification failure

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i)) : "n is either 1 or a product of 2, 3, or 5";
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:23: verify: The prover cannot establish an assertion (Assert) in method isUgly: n is either 1 or a product of 2, 3, or 5
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i)) : "n is either 1 or a product of 2, 3, or 5";
            ^
1 verification failure

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i)) : "n is either 1 or a product of powers of 2, 3, or 5";
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:23: verify: The prover cannot establish an assertion (Assert) in method isUgly: n is either 1 or a product of powers of 2, 3, or 5
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i)) : "n is either 1 or a product of powers of 2, 3, or 5";
            ^
1 verification failure

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i)) : "n is either 1 or a product of powers of 2, 3, and 5";
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:23: verify: The prover cannot establish an assertion (Assert) in method isUgly: n is either 1 or a product of powers of 2, 3, and 5
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i)) : "n is either 1 or a product of powers of 2, 3, and 5";
            ^
1 verification failure

class UglyNum {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; n == Math.pow(2, i) || n == Math.pow(3, i) || n == Math.pow(5, i));
    public static boolean isUgly(int n) {
        if (n <= 0) {
            return false;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 2 == 0) {
            n /= 2;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 3 == 0) {
            n /= 3;
        }
        //@ maintaining n > 0;
        //@ decreases n;
        while (n % 5 == 0) {
            n /= 5;
        }
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) && n == Math.pow(3, i) && n == Math.pow(5, i)) : "n is either 1 or a product of powers of 2, 3, and 5";
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/UglyNumLoop.java:23: verify: The prover cannot establish an assertion (Assert) in method isUgly: n is either 1 or a product of powers of 2, 3, and 5
        //@ assert n == 1 || (\exists int i; n == Math.pow(2, i) && n == Math.pow(3, i) && n == Math.pow(5, i)) : "n is either 1 or a product of powers of 2, 3, and 5";
            ^
1 verification failure

