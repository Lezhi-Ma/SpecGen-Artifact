public class Fibonacci {
   	private  long fib[];

    //@ requires size == 2;
    //@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	
    //@ requires 2 <= size && size <= 93;
    //@ ensures fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
	public long getFib(int index) {
		return fib[index];
	}

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
	public void fibCompute() {
		int index = 2;
      
		while (index < fib.length) {
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
		}
	}
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:4: error: cannot find symbol
    //@ requires size == 2;
                 ^
  symbol:   variable size
  location: class Fibonacci
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures fib[0] == 0 && fib[1] == 1;
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures fib[0] == 0 && fib[1] == 1;
                               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
                               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
                                                                            ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
                                                                                        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: error: An identifier with private visibility may not be used in a requires clause with public visibility
    //@ requires 0 <= index && index < fib.length;
                                       ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == fib[index];
                           ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
                                              ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
                                                          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
                                                                    ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
                                                                                 ^
13 errors

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires size == 2;
    //@ ensures fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires 2 <= size && size <= 93;
    //@ ensures fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (2 <= size && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: error: cannot find symbol
    //@ requires size == 2;
                 ^
  symbol:   variable size
  location: class Fibonacci
1 error

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: overflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
2 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method fibCompute
    public void fibCompute() {
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: The prover cannot establish an assertion (UndefinedNegativeIndex) in method fibCompute
            //@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
                          ^
3 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume index - 2 == 0 || index - 2 > 0;
            //@ assume index - 1 == 0 || index - 1 > 0;
            //@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method fibCompute
    public void fibCompute() {
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
        ^
3 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume index - 2 == 0 || index - 2 > 0;
            //@ assume index - 1 == 0 || index - 1 > 0;
            //@ assume Long.MIN_VALUE <= fib[index - 2] && fib[index - 1] >= 0 && fib[index - 2] + fib[index - 1] >= 0;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: overflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method fibCompute
    public void fibCompute() {
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
        ^
3 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume index - 2 == 0 || index - 2 > 0;
            //@ assume index - 1 == 0 || index - 1 > 0;
            //@ assume fib[index - 2] <= Long.MAX_VALUE - fib[index - 1] && fib[index - 1] <= Long.MAX_VALUE - fib[index - 2] && fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method fibCompute
    public void fibCompute() {
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
        ^
3 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume index - 2 == 0 || index - 2 > 0;
            //@ assume index - 1 == 0 || index - 1 > 0;
            //@ assume Long.MIN_VALUE <= fib[index - 2] && fib[index - 1] >= -fib[index - 2] && fib[index - 2] + fib[index - 1] >= Long.MIN_VALUE;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method fibCompute
    public void fibCompute() {
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: overflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
3 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume index - 2 == 0 || index - 2 > 0;
            //@ assume index - 1 == 0 || index - 1 > 0;
            //@ assume fib[index - 2] <= Long.MAX_VALUE - fib[index - 1] && fib[index - 1] <= Long.MAX_VALUE - fib[index - 2] && fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method fibCompute
    public void fibCompute() {
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
        ^
3 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume index - 2 == 0 || index - 2 > 0;
            //@ assume index - 1 == 0 || index - 1 > 0;
            //@ assume Long.MIN_VALUE <= fib[index - 2] && fib[index - 1] >= -fib[index - 2] && fib[index - 2] + fib[index - 1] >= Long.MIN_VALUE;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method fibCompute
    public void fibCompute() {
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: overflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
3 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume index - 2 == 0 || index - 2 > 0;
            //@ assume index - 1 == 0 || index - 1 > 0;
            //@ assume fib[index - 2] <= Long.MAX_VALUE - fib[index - 1] && fib[index - 1] <= Long.MAX_VALUE - fib[index - 2] && fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method fibCompute: underflow in long sum
            fib[index] = fib[index - 2] + fib[index - 1];
                                        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method fibCompute
    public void fibCompute() {
                ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
        ^
3 verification failures

public class Fibonacci {
    //@ spec_public
    private long fib[];

    //@ requires true;
    //@ ensures fib.length == 2 && fib[0] == 0 && fib[1] == 1;
    public Fibonacci() {
        fib = new long[2];
        fib[0] = 0;
        fib[1] = 1;
    }

    //@ requires size >= 2 && size <= 93;
    //@ ensures fib.length == size && fib[0] == 0 && fib[1] == 1 && (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
    public Fibonacci(int size) {
        if (size >= 2 && size <= 93) {
            fib = new long[size];
            fib[0] = 0;
            fib[1] = 1;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ requires 0 <= index && index < fib.length;
    //@ ensures \result == fib[index];
    public /*@ pure @*/ long getFib(int index) {
        return fib[index];
    }

    //@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i - 2] + fib[i - 1]);
    public void fibCompute() {
        int index = 2;

        while (index < fib.length) {
            //@ assume index - 2 == 0 || index - 2 > 0;
            //@ assume index - 1 == 0 || index - 1 > 0;
            //@ assume Long.MIN_VALUE <= fib[index - 2] && fib[index - 1] >= -fib[index - 2] && fib[index - 2] + fib[index - 1] >= Long.MIN_VALUE;
            fib[index] = fib[index - 2] + fib[index - 1];
            index++;
        }
    }
}
