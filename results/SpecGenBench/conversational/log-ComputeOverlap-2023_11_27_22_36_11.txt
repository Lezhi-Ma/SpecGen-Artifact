class ComputeOverlap {
    //@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
    //@ ensures \result == (\max(0, \min(ax2, bx2) - \max(ax1, bx1))) * (\max(0, \min(ay2, by2) - \max(ay1, by1)));
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        int overlapWidth = (ax2<bx2?ax2:bx2) - (ax1>bx1?ax1:bx1), overlapHeight = (ay2<by2?ay2:by2) - (ay1>by1?ay1:by1);
        int overlapArea = (overlapWidth>0?overlapWidth:0) * (overlapHeight>0?overlapHeight:0);
        return overlapArea;
    }
}
/home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:3: error: illegal start of type
    //@ ensures \result == (\max(0, \min(ax2, bx2) - \max(ax1, bx1))) * (\max(0, \min(ay2, by2) - \max(ay1, by1)));
                                ^
1 error

class ComputeOverlap {
    //@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
    //@ ensures \result == ((ax2 < bx2 ? ax2 : bx2) - (ax1 > bx1 ? ax1 : bx1)) * ((ay2 < by2 ? ay2 : by2) - (ay1 > by1 ? ay1 : by1));
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        int overlapWidth = (ax2 < bx2 ? ax2 : bx2) - (ax1 > bx1 ? ax1 : bx1), overlapHeight = (ay2 < by2 ? ay2 : by2) - (ay1 > by1 ? ay1 : by1);
        int overlapArea = (overlapWidth > 0 ? overlapWidth : 0) * (overlapHeight > 0 ? overlapHeight : 0);
        return overlapArea;
    }
}
/home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:3:) in method computeOverlapArea
        return overlapArea;
        ^
/home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:8:
    //@ ensures \result == ((ax2 < bx2 ? ax2 : bx2) - (ax1 > bx1 ? ax1 : bx1)) * ((ay2 < by2 ? ay2 : by2) - (ay1 > by1 ? ay1 : by1));
        ^
2 verification failures

class ComputeOverlap {
    //@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
    //@ ensures \result == Math.max(0, Math.min(ax2, bx2) - Math.max(ax1, bx1)) * Math.max(0, Math.min(ay2, by2) - Math.max(ay1, by1));
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        int overlapWidth = Math.max(0, Math.min(ax2, bx2) - Math.max(ax1, bx1)), overlapHeight = Math.max(0, Math.min(ay2, by2) - Math.max(ay1, by1));
        int overlapArea = overlapWidth * overlapHeight;
        return overlapArea;
    }
}

