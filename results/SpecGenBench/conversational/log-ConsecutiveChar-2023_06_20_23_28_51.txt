class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 1 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) != s.charAt(j+1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) == s.charAt(j+1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                ++cnt;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 1 <= i && i <= s.length();
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:15: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method maxConsecutiveChar: overflow in int sum
                ++cnt;
                ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 1 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) != s.charAt(j+1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) == s.charAt(j+1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 1 <= i && i <= s.length();
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) != s.charAt(j+1) || cnt == 1);
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 1 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != s.charAt(j+1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == s.charAt(j+1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == s.charAt(j+1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 1 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 1 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) != s.charAt(j+1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) == s.charAt(j+1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 1 <= i && i <= s.length();
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) != s.charAt(j+1) || cnt == 1);
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) != s.charAt(j+1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == s.charAt(j+1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; s.charAt(j) == s.charAt(j+1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) != s.charAt(j+1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) == s.charAt(j+1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i-1; s.charAt(j) != s.charAt(j+1) || cnt == 1);
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

class ConsecutiveChar {
    //@ requires s != null;
    //@ ensures \result >= 1;
    public int maxConsecutiveChar(String s) {
        int ans = 1, cnt = 1;

        //@ maintaining 1 <= ans;
        //@ maintaining 1 <= cnt;
        //@ maintaining 0 <= i && i <= s.length();
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) != s.charAt(j-1) || cnt == 1);
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
        //@ decreases s.length() - i;
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                //@ assume cnt < Integer.MAX_VALUE;
                ++cnt;
                //@ assume ans < Integer.MAX_VALUE - 1;
                ans = ((ans>cnt)?ans:cnt);
            } else {
                cnt = 1;
            }
        }

        return ans;
    }
}
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining (\forall int j; 0 <= j && j < i; j == 0 || s.charAt(j) == s.charAt(j-1) ==> cnt > 1);
            ^
/home/max/Documents/JMLGPT/tmp/ConsecutiveChar.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method maxConsecutiveChar
        //@ maintaining 0 <= i && i <= s.length();
            ^
2 verification failures

