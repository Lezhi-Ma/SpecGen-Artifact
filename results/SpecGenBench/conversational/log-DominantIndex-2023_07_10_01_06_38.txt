class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:22: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:23: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:25: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        //@ assume index >= -1 && index < nums.length;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:26: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        //@ assume index >= -1 && index < nums.length;
        //@ assume m1 >= m2 * 2 || m1 < m2 * 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        //@ assume index >= -1 && index < nums.length;
        //@ assume m1 >= m2 * 2 || m1 < m2 * 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        //@ assume index >= -1 && index < nums.length;
        //@ assume m1 >= m2 * 2 || m1 < m2 * 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        //@ assume index >= -1 && index < nums.length;
        //@ assume m1 >= m2 * 2 || m1 < m2 * 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        //@ assume index >= -1 && index < nums.length;
        //@ assume m1 >= m2 * 2 || m1 < m2 * 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        //@ assume index >= -1 && index < nums.length;
        //@ assume m1 >= m2 * 2 || m1 < m2 * 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

class DominantIndex {
    //@ requires 0 < nums.length;
    //@ ensures \result == -1 || (0 <= \result && \result < nums.length && (\forall int i; 0 <= i && i < nums.length; nums[i] <= 2 * nums[\result]));
    public int dominantIndex(int[] nums) {
        int m1 = -1, m2 = -1;
        int index = -1;

        //@ maintaining 0 <= i && i <= nums.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; nums[k] <= m1);
        //@ maintaining (\forall int k; 0 <= k && k < i; m2 <= nums[k] && nums[k] <= m1);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > m1) {
                m2 = m1;
                m1 = nums[i];
                index = i;
            } else if (nums[i] > m2) {
                m2 = nums[i];
            }
        }

        //@ assume m1 <= Integer.MAX_VALUE / 2 && m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 <= Integer.MAX_VALUE / 2;
        //@ assume m2 * 2 <= Integer.MAX_VALUE;
        //@ assume index >= -1 && index < nums.length;
        //@ assume m1 >= m2 * 2 || m1 < m2 * 2;
        return m1 >= m2 * 2 ? index : -1;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:27: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method dominantIndex: int multiply overflow
        return m1 >= m2 * 2 ? index : -1;
                        ^
1 verification failure

