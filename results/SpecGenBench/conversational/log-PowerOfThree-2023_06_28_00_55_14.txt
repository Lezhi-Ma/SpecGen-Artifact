class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0; n == Math.pow(3, i));
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0; n == Math.pow(3, i));
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

class PowerOfThree {
    //@ requires n > 0;
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
    public boolean isPowerOfThree(int n) {
        while (n != 0 && n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method isPowerOfThree
        return n == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:
    //@ ensures \result <==> (\exists int i; i >= 0 && (int)Math.pow(3, i) == n);
        ^
2 verification failures

