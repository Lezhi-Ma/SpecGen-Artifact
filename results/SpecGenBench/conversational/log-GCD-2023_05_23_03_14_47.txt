public class GCD {
	
        //@ requires d != 0;
        //@ ensures \result == n % d;
	public static int div(int n, int d) { 
		return n%d; 
	}

	//@ ensures \result >= 0;
	public  int absolute(int num) {
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 != Integer.MIN_VALUE && num2 != Integer.MIN_VALUE;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; div(num1, i) == 0 && div(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	public  int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; div(num1, j) == 0 && div(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:16: warning: A non-pure method is being called where it is not permitted: GCD.div(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; div(num1, i) == 0 && div(num2, i) == 0);
	                                                      ^
/home/max/Documents/JMLGPT/tmp/GCD.java:16: warning: A non-pure method is being called where it is not permitted: GCD.div(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; div(num1, i) == 0 && div(num2, i) == 0);
	                                                                           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:18: error: incomparable types: int and boolean
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	                    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:18: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	                                                   ^
  Reason: Unimplemented option in JmlAttr:isBooleanOrNumeric -- class org.jmlspecs.openjml.JmlTree$JmlBinary
/home/max/Documents/JMLGPT/tmp/GCD.java:18: error: incompatible types: bad type in conditional expression
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	                                       ^
    int cannot be converted to boolean
/home/max/Documents/JMLGPT/tmp/GCD.java:18: error: incompatible types: int cannot be converted to boolean
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	                                              ^
/home/max/Documents/JMLGPT/tmp/GCD.java:33: warning: A non-pure method is being called where it is not permitted: GCD.div(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; div(num1, j) == 0 && div(num2, j) == 0);
		                                                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:33: warning: A non-pure method is being called where it is not permitted: GCD.div(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; div(num1, j) == 0 && div(num2, j) == 0);
		                                                                        ^
4 errors
4 warnings

public class GCD {
	
	//@ requires d != 0;
	//@ ensures \result == n % d;
	public static int mod(int n, int d) { 
		int r = n % d;
		return (r < 0) ? r + d : r;
	}

	//@ ensures \result >= 0;
	public int absolute(int num) {
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 != Integer.MIN_VALUE && num2 != Integer.MIN_VALUE;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	public int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (mod(num1,i) == 0 && mod(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:17: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                      ^
/home/max/Documents/JMLGPT/tmp/GCD.java:17: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                                           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:19: error: incomparable types: int and boolean
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	                    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:19: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	                                                   ^
  Reason: Unimplemented option in JmlAttr:isBooleanOrNumeric -- class org.jmlspecs.openjml.JmlTree$JmlBinary
/home/max/Documents/JMLGPT/tmp/GCD.java:19: error: incompatible types: bad type in conditional expression
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	                                       ^
    int cannot be converted to boolean
/home/max/Documents/JMLGPT/tmp/GCD.java:19: error: incompatible types: int cannot be converted to boolean
	//@ ensures \result == (num1 > num2) ? num1 : num2 <==> num2 == 0 || num1 == 0;
	                                              ^
/home/max/Documents/JMLGPT/tmp/GCD.java:34: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:34: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                                        ^
4 errors
4 warnings

public class GCD {
	
	//@ requires d != 0;
	//@ ensures \result == n % d;
	public static int mod(int n, int d) { 
		int r = n % d;
		return (r < 0) ? r + d : r;
	}

	//@ ensures \result >= 0;
	public int absolute(int num) {
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 != Integer.MIN_VALUE && num2 != Integer.MIN_VALUE;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == ((num1 > num2) ? num1 : num2) <==> num2 == 0 || num1 == 0;
	public int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (mod(num1,i) == 0 && mod(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:17: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                      ^
/home/max/Documents/JMLGPT/tmp/GCD.java:17: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                                           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:34: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:34: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                                        ^
/home/max/Documents/JMLGPT/tmp/GCD.java:12: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method absolute: int negation
		return (0 <= num) ? num : -num;
		                          ^
/home/max/Documents/JMLGPT/tmp/GCD.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:10:) in method absolute
		return (0 <= num) ? num : -num;
		^
/home/max/Documents/JMLGPT/tmp/GCD.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:12:
	//@ ensures \result >= 0;
	    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:19:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	//@ ensures \result == ((num1 > num2) ? num1 : num2) <==> num2 == 0 || num1 == 0;
	    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:18:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:7: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method mod: underflow in int sum
		return (r < 0) ? r + d : r;
		                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:4:) in method mod
		return (r < 0) ? r + d : r;
		^
/home/max/Documents/JMLGPT/tmp/GCD.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:7:
	//@ ensures \result == n % d;
	    ^
4 warnings
10 verification failures

public class GCD {
	
	//@ requires d != 0;
	//@ ensures \result == n % d;
	public static int mod(int n, int d) { 
		int r = n % d;
		return (r < 0) ? r + d : r;
	}

	//@ requires num >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 0;
	public int absolute(int num) {
		assume num >= Integer.MIN_VALUE + 1;
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 >= Integer.MIN_VALUE + 1 && num2 >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == ((num1 > num2) ? num1 : num2) <==> num2 == 0 || num1 == 0;
	public int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (mod(num1,i) == 0 && mod(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:13: error: ';' expected
		assume num >= Integer.MIN_VALUE + 1;
		          ^
/home/max/Documents/JMLGPT/tmp/GCD.java:13: error: not a statement
		assume num >= Integer.MIN_VALUE + 1;
		                                ^
2 errors

public class GCD {
	
	//@ requires d != 0;
	//@ ensures \result == n % d;
	public static int mod(int n, int d) { 
		int r = n % d;
		return (r < 0) ? r + d : r;
	}

	//@ requires num >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 0;
	public int absolute(int num) {
		assume num >= Integer.MIN_VALUE + 1;
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 >= Integer.MIN_VALUE + 1 && num2 >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == ((num1 > num2) ? num1 : num2) <==> num2 == 0 || num1 == 0;
	public int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (mod(num1,i) == 0 && mod(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:13: error: ';' expected
		assume num >= Integer.MIN_VALUE + 1;
		          ^
/home/max/Documents/JMLGPT/tmp/GCD.java:13: error: not a statement
		assume num >= Integer.MIN_VALUE + 1;
		                                ^
2 errors

public class GCD {
	
	//@ requires d != 0;
	//@ ensures \result == n % d;
	public static int mod(int n, int d) { 
		int r = n % d;
		return (r < 0) ? r + d : r;
	}

	//@ requires num >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 0;
	public int absolute(int num) {
		//@ assume num >= Integer.MIN_VALUE + 1;
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 >= Integer.MIN_VALUE + 1 && num2 >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == ((num1 > num2) ? num1 : num2) <==> num2 == 0 || num1 == 0;
	public int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (mod(num1,i) == 0 && mod(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:19: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                      ^
/home/max/Documents/JMLGPT/tmp/GCD.java:19: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                                           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                                        ^
/home/max/Documents/JMLGPT/tmp/GCD.java:38: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method gcd: overflow in int sum
		for (int i = 1; i <= num1 && i <= num2; i++) {
		                                         ^
/home/max/Documents/JMLGPT/tmp/GCD.java:35: verify: The prover cannot establish an assertion (LoopInvariant) in method gcd
		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:7: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method mod: underflow in int sum
		return (r < 0) ? r + d : r;
		                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:4:) in method mod
		return (r < 0) ? r + d : r;
		^
/home/max/Documents/JMLGPT/tmp/GCD.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:7:
	//@ ensures \result == n % d;
	    ^
4 warnings
5 verification failures

public class GCD {
	
	//@ requires d != 0;
	//@ ensures \result == n % d;
	public static int mod(int n, int d) { 
		int r = n % d;
		//@ assume (n >= 0 && d > 0) || (n <= 0 && d < 0);
		return (r < 0) ? r + d : r;
	}

	//@ requires num >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 0;
	public int absolute(int num) {
		//@ assume num >= Integer.MIN_VALUE + 1;
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 >= Integer.MIN_VALUE + 1 && num2 >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == ((num1 > num2) ? num1 : num2) <==> num2 == 0 || num1 == 0;
	public int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (mod(num1,i) == 0 && mod(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:20: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                      ^
/home/max/Documents/JMLGPT/tmp/GCD.java:20: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                                           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                                        ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: verify: The prover cannot establish an assertion (LoopInvariant) in method gcd
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: verify: The prover cannot establish an assertion (LoopInvariant) in method gcd
		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method mod: underflow in int sum
		return (r < 0) ? r + d : r;
		                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:4:) in method mod
		return (r < 0) ? r + d : r;
		^
/home/max/Documents/JMLGPT/tmp/GCD.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:8:
	//@ ensures \result == n % d;
	    ^
4 warnings
5 verification failures

public class GCD {
	
	//@ requires d != 0;
	//@ ensures \result == n % d;
	public static int mod(int n, int d) { 
		int r = n % d;
		//@ assume (n >= 0 && d > 0) || (n <= 0 && d < 0);
		return (r < 0) ? r + d : r;
	}

	//@ requires num >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 0;
	public int absolute(int num) {
		//@ assume num >= Integer.MIN_VALUE + 1;
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 >= Integer.MIN_VALUE + 1 && num2 >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == ((num1 > num2) ? num1 : num2) <==> num2 == 0 || num1 == 0;
	public int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
			//@ assume i <= Integer.MAX_VALUE - num1 && i <= Integer.MAX_VALUE - num2;
            		if (mod(num1,i) == 0 && mod(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:20: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                      ^
/home/max/Documents/JMLGPT/tmp/GCD.java:20: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                                           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                                        ^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: verify: The prover cannot establish an assertion (LoopInvariant) in method gcd
		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: verify: The prover cannot establish an assertion (LoopInvariant) in method gcd
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method mod: underflow in int sum
		return (r < 0) ? r + d : r;
		                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:4:) in method mod
		return (r < 0) ? r + d : r;
		^
/home/max/Documents/JMLGPT/tmp/GCD.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:8:
	//@ ensures \result == n % d;
	    ^
4 warnings
5 verification failures

public class GCD {
	
	//@ requires d != 0;
	//@ ensures \result == n % d;
	public static int mod(int n, int d) { 
		int r = n % d;
		//@ assume (n >= 0 && d > 0) || (n <= 0 && d < 0);
		return (r < 0) ? r + d : r;
	}

	//@ requires num >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 0;
	public int absolute(int num) {
		//@ assume num >= Integer.MIN_VALUE + 1;
		return (0 <= num) ? num : -num;
	}
    
	//@ requires num1 >= Integer.MIN_VALUE + 1 && num2 >= Integer.MIN_VALUE + 1;
	//@ ensures \result >= 1;
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	//@ ensures \result == -1 <==> (num1 == 0 && num2 == 0);
	//@ ensures \result == ((num1 > num2) ? num1 : num2) <==> num2 == 0 || num1 == 0;
	public int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		//@ decreases num1 + num2 - i;
		for (int i = 1; i <= num1 && i <= num2; i++) {
			//@ assume i <= Integer.MAX_VALUE - num1 && i <= Integer.MAX_VALUE - num2;
            		if (mod(num1,i) == 0 && mod(num2,i) == 0) {
               			result = i;
			}
        }
		return result;
	} 
}
/home/max/Documents/JMLGPT/tmp/GCD.java:20: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                      ^
/home/max/Documents/JMLGPT/tmp/GCD.java:20: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
	//@ ensures (\forall int i; i > 0 && i <= \result; mod(num1, i) == 0 && mod(num2, i) == 0);
	                                                                           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: warning: A non-pure method is being called where it is not permitted: GCD.mod(int,int)
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		                                                                        ^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: verify: The prover cannot establish an assertion (LoopInvariant) in method gcd
		//@ maintaining 1 <= i && i <= num1 && i <= num2;
		    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: verify: The prover cannot establish an assertion (LoopInvariant) in method gcd
		//@ maintaining (\forall int j; j > 0 && j < i; mod(num1, j) == 0 && mod(num2, j) == 0);
		    ^
/home/max/Documents/JMLGPT/tmp/GCD.java:8: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method mod: underflow in int sum
		return (r < 0) ? r + d : r;
		                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:4:) in method mod
		return (r < 0) ? r + d : r;
		^
/home/max/Documents/JMLGPT/tmp/GCD.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:8:
	//@ ensures \result == n % d;
	    ^
4 warnings
5 verification failures

