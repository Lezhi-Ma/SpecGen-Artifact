class SmallerThanCurrent {
    /*@ requires nums != null;
      @ requires nums.length > 0;
      @ ensures \result != null;
      @ ensures \result.length == nums.length;
      @ ensures (\forall int i; 0 <= i && i < nums.length; (\forall int j; 0 <= j && j < nums.length; (nums[i] > nums[j]) ==> \result[i] > \result[j]));
      @ ensures (\forall int i; 0 <= i && i < nums.length; (\forall int j; 0 <= j && j < nums.length; (nums[i] == nums[j]) ==> \result[i] == \result[j]));
      @*/
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int n = nums.length;
        int[] ret = new int[n];

        /*@ maintaining 0 <= i && i <= n;
          @ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < n; (nums[k] > nums[j]) ==> ret[k] > ret[j]));
          @ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < n; (nums[k] == nums[j]) ==> ret[k] == ret[j]));
          @ decreases n - i;
          @*/
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            /*@ maintaining 0 <= j && j <= n;
              @ maintaining cnt == (\sum int k; 0 <= k && k < j; (nums[k] < nums[i]) ? 1 : 0);
              @ decreases n - j;
              @*/
            for (int j = 0; j < n; j++) {
                if (nums[j] < nums[i]) {
                    cnt++;
                }
            }
            ret[i] = cnt;
        }
        
        return ret;
    }
}
/home/max/Documents/JMLGPT/tmp/SmallerThanCurrent.java:21: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
              @ maintaining cnt == (\sum int k; 0 <= k && k < j; (nums[k] < nums[i]) ? 1 : 0);
                                    ^
/home/max/Documents/JMLGPT/tmp/SmallerThanCurrent.java:21: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
              @ maintaining cnt == (\sum int k; 0 <= k && k < j; (nums[k] < nums[i]) ? 1 : 0);
                                    ^
/home/max/Documents/JMLGPT/tmp/SmallerThanCurrent.java:21: warning: NOT IMPLEMENTED: Not yet supported feature in converting BasicPrograms to SMTLIB: JML Quantified expression using \sum
              @ maintaining cnt == (\sum int k; 0 <= k && k < j; (nums[k] < nums[i]) ? 1 : 0);
                                    ^
/home/max/Documents/JMLGPT/tmp/SmallerThanCurrent.java:21: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method smallerNumbersThanCurrent
              @ maintaining cnt == (\sum int k; 0 <= k && k < j; (nums[k] < nums[i]) ? 1 : 0);
                ^
/home/max/Documents/JMLGPT/tmp/SmallerThanCurrent.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method smallerNumbersThanCurrent
          @ maintaining (\forall int k; 0 <= k && k < i; (\forall int j; 0 <= j && j < n; (nums[k] > nums[j]) ==> ret[k] > ret[j]));
            ^
3 warnings
2 verification failures

