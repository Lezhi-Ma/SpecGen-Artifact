public class AddLoop {
    /*@ requires true;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining 0 <= n && n <= y;
            //@ maintaining sum == x + (y - n);
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining 0 <= n && n <= -y;
            //@ maintaining sum == x - (y - n);
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x - (y - n);
                ^
1 verification failure

public class AddLoop {
    /*@ requires true;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining 0 <= n && n <= y;
            //@ maintaining sum == x + (y - n);
            //@ decreases n;
            while (n > 0) {
                //@ maintaining 0 <= n && n <= y;
                //@ maintaining sum == x + (y - n);
                //@ decreases n;
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining 0 <= n && n <= -y;
            //@ maintaining sum == x - (y - n);
            //@ decreases n;
            while (n > 0) {
                //@ maintaining 0 <= n && n <= -y;
                //@ maintaining sum == x - (y - n);
                //@ decreases n;
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:12: error: Loop specifications must immediately precede a loop statement
                //@ maintaining 0 <= n && n <= y;
                    ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:24: error: Loop specifications must immediately precede a loop statement
                //@ maintaining 0 <= n && n <= -y;
                    ^
2 errors

public class AddLoop {
    /*@ requires true;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining 0 <= n && n <= y;
            //@ maintaining sum == x + (y - n);
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
                //@ maintaining 0 <= n && n <= y;
                //@ maintaining sum == x + (y - n);
                //@ decreases n;
            }
        } else {
            int n = -y;
            //@ maintaining 0 <= n && n <= -y;
            //@ maintaining sum == x - (y - n);
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
                //@ maintaining 0 <= n && n <= -y;
                //@ maintaining sum == x - (y - n);
                //@ decreases n;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:17: error: illegal start of statement
            }
            ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:14: error: Loop specifications must immediately precede a loop statement
                //@ maintaining 0 <= n && n <= y;
                    ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:29: error: illegal start of statement
            }
            ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:26: error: Loop specifications must immediately precede a loop statement
                //@ maintaining 0 <= n && n <= -y;
                    ^
4 errors

public class AddLoop {
    /*@ requires true;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining 0 <= n && n <= y;
            //@ maintaining sum == x + (y - n);
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining 0 <= n && n <= -y;
            //@ maintaining sum == x - (y - n);
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method AddLoop
            //@ maintaining sum == x - (y - n);
                ^
1 verification failure

public class AddLoop {
    /*@ requires true;
      @ ensures \result == x + y; @*/
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ maintaining 0 <= n && n <= y;
            //@ maintaining sum == x + (y - n);
            //@ decreases n;
            while (n > 0) {
                //@ maintaining 0 <= n && n <= y;
                //@ maintaining sum == x + (y - n);
                //@ decreases n;
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining 0 <= n && n <= -y;
            //@ maintaining sum == x - (y - n);
            //@ decreases n;
            while (n > 0) {
                //@ maintaining 0 <= n && n <= -y;
                //@ maintaining sum == x - (y - n);
                //@ decreases n;
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
/home/max/Documents/JMLGPT/tmp/AddLoop.java:12: error: Loop specifications must immediately precede a loop statement
                //@ maintaining 0 <= n && n <= y;
                    ^
/home/max/Documents/JMLGPT/tmp/AddLoop.java:24: error: Loop specifications must immediately precede a loop statement
                //@ maintaining 0 <= n && n <= -y;
                    ^
2 errors

