
public class Calculator {
    /*@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
      @ ensures operator == '+' ==> \result == num1 + num2;
      @ ensures operator == '-' ==> \result == num1 - num2;
      @ ensures operator == '*' ==> \result == num1 * num2;
      @ ensures operator == '/' ==> \result == num1 / num2;
      @ ensures operator == '%' ==> \result == num1 % num2;
      @ ensures operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ==> \result == -1;
      @*/
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}


/home/max/Documents/JMLGPT/tmp/Calculator.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:18: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
2 verification failures


public class Calculator {
    /*@ requires operator == '+' ==> (num1 + num2) <= Integer.MAX_VALUE;
      @ requires operator == '-' ==> (num1 - num2) >= Integer.MIN_VALUE;
      @ requires operator == '*' ==> (num1 * num2) <= Integer.MAX_VALUE;
      @ requires operator == '/' && num2 != 0 ==> (num1 / num2) >= Integer.MIN_VALUE && (num1 / num2) <= Integer.MAX_VALUE;
      @ requires operator == '%' && num2 != 0 ==> (num1 % num2) >= Integer.MIN_VALUE && (num1 % num2) <= Integer.MAX_VALUE;
      @ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
      @ ensures operator == '+' ==> \result == num1 + num2;
      @ ensures operator == '-' ==> \result == num1 - num2;
      @ ensures operator == '*' ==> \result == num1 * num2;
      @ ensures operator == '/' && num2 != 0 ==> \result == num1 / num2;
      @ ensures operator == '%' && num2 != 0 ==> \result == num1 % num2;
      @*/
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}

/home/max/Documents/JMLGPT/tmp/Calculator.java:30: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:8:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:44:
      @ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
        ^
3 verification failures


public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    //@ ensures operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ==> \result == -1;
    public int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                output = -1;
                break;
        }
        return output;
    }
}


/home/max/Documents/JMLGPT/tmp/Calculator.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
2 verification failures


public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    //@ ensures operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ==> \result == -1;
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}


/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:17: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
2 verification failures


public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public int calculate(int num1, int num2, char operator) 
      //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
      //@ ensures operator == '+' ==> \result == num1 + num2;
      //@ ensures operator == '-' ==> \result == num1 - num2;
      //@ ensures operator == '*' ==> \result == num1 * num2;
      //@ ensures operator == '/' ==> \result == num1 / num2;
      //@ ensures operator == '%' ==> \result == num1 % num2;
    {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}


/home/max/Documents/JMLGPT/tmp/Calculator.java:10: error: ';' expected
      //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
         ^
1 error


public class Calculator {
    
    /*@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
      @ requires operator == '/' ==> num2 != 0;
      @ ensures operator == '+' ==> \result == num1 + num2;
      @ ensures operator == '-' ==> \result == num1 - num2;
      @ ensures operator == '*' ==> \result == num1 * num2;
      @ ensures operator == '/' ==> \result == num1 / num2;
      @ ensures operator == '%' ==> \result == num1 % num2;
      @ ensures operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ==> \result == -1;
      @*/
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}

/home/max/Documents/JMLGPT/tmp/Calculator.java:20: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:20: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
2 verification failures


public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures \result == -1 <==> operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%';
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}


/home/max/Documents/JMLGPT/tmp/Calculator.java:25: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Calculator.java:7:) in method calculate
        return output;
        ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Calculator.java:39:
    //@ ensures operator == '*' ==> \result == num1 * num2;
        ^
3 verification failures


public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    //@ ensures operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ==> \result == -1;
    public int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}


/home/max/Documents/JMLGPT/tmp/Calculator.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: underflow in int sum
            	output = num1 + num2;
            	              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:16: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: overflow in int sum
            	output = num1 + num2;
            	              ^
2 verification failures


public class Calculator {
    
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}


/home/max/Documents/JMLGPT/tmp/Calculator.java:33: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method calculate
		output = num1 % num2;
		              ^
/home/max/Documents/JMLGPT/tmp/Calculator.java:25: verify: The prover cannot establish an assertion (ArithmeticOperationRange) in method calculate: int multiply overflow
            	output = num1 * num2;
            	              ^
2 verification failures


public class Calculator {
    //@ requires operator == '+' || operator == '-' || operator == '*' || operator == '/' || operator == '%';
    //@ ensures operator == '+' ==> \result == num1 + num2;
    //@ ensures operator == '-' ==> \result == num1 - num2;
    //@ ensures operator == '*' ==> \result == num1 * num2;
    //@ ensures operator == '/' ==> \result == num1 / num2;
    //@ ensures operator == '%' ==> \result == num1 % num2;
    public int calculate(int num1, int num2, char operator) {
        int output;

        switch (operator)
        {
            case '+':
                output = num1 + num2;
                break;

            case '-':
                output = num1 - num2;
                break;

            case '*':
                output = num1 * num2;
                break;

            case '/':
                output = num1 / num2;
                break;

            case '%':
                //@ assert num2 != 0;
                output = num1 % num2;
                break;

            default:
                output = -1;
                break;
        }
        return output;
    }
}


