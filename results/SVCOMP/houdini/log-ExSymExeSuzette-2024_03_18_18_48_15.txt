class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z < 1;
  //@ requires z <= 1;
  //@ requires z == 1;
  //@ requires z != 1;
  //@ requires z >= 1;
  //@ requires z > 1;
  //@ requires z < 0;
  //@ requires z <= 0;
  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:186:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:227:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z < 1
  //@ requires z < 1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z <= 1;
  //@ requires z == 1;
  //@ requires z != 1;
  //@ requires z >= 1;
  //@ requires z > 1;
  //@ requires z < 0;
  //@ requires z <= 0;
  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:185:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:226:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z <= 1
  //@ requires z <= 1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z == 1;
  //@ requires z != 1;
  //@ requires z >= 1;
  //@ requires z > 1;
  //@ requires z < 0;
  //@ requires z <= 0;
  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:184:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:225:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z == 1
  //@ requires z == 1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != 1;
  //@ requires z >= 1;
  //@ requires z > 1;
  //@ requires z < 0;
  //@ requires z <= 0;
  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:183:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:224:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != 1
  //@ requires z != 1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z >= 1;
  //@ requires z > 1;
  //@ requires z < 0;
  //@ requires z <= 0;
  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:182:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:223:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z >= 1
  //@ requires z >= 1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z > 1;
  //@ requires z < 0;
  //@ requires z <= 0;
  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:181:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:222:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z > 1
  //@ requires z > 1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z < 0;
  //@ requires z <= 0;
  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:180:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:221:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z < 0
  //@ requires z < 0;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z <= 0;
  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:179:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:220:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z <= 0
  //@ requires z <= 0;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z == 0;
  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:178:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:219:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z == 0
  //@ requires z == 0;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != 0;
  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:177:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:218:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != 0
  //@ requires z != 0;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z >= 0;
  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:176:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:217:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z >= 0
  //@ requires z >= 0;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z > 0;
  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:175:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:216:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z > 0
  //@ requires z > 0;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z < -1;
  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:174:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:215:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z < -1
  //@ requires z < -1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z <= -1;
  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:173:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:214:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z <= -1
  //@ requires z <= -1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z == -1;
  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:213: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:172:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:213:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z == -1
  //@ requires z == -1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:173: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:173:
  //@ ensures \result < 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:171:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:212:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:172: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:172:
  //@ ensures \result <= 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:211: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:170:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:211:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:171: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:171:
  //@ ensures \result == 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:210: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:169:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:210:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:170: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:170:
  //@ ensures \result < 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:209: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:168:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:209:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:169: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:169:
  //@ ensures \result <= 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:208: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:167:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:208:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:168: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:168:
  //@ ensures \result == 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:207: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:166:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:207:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:167: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:167:
  //@ ensures \result < -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:206: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:206:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:166: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:166:
  //@ ensures \result <= -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:205: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:205:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165:
  //@ ensures \result == -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:204: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:204:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < z;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164:
  //@ ensures \result < z;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:203: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:203:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result != z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163:
  //@ ensures \result != z;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:202: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:202:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures \result > z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158:) in method method_b
    if (z > 10) return z++;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162:
  //@ ensures \result > z;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:201: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:201:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162:
  //@ ensures \result != 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:200: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:200:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161:
  //@ ensures \result >= 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:199:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160:
  //@ ensures \result > 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:198:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159:
  //@ ensures \result != 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:197: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:197:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158:
  //@ ensures \result > 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:196:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z != -1;
  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:195: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:195:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z != -1
  //@ requires z != -1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z >= -1;
  //@ requires z > -1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:194: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:194:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z >= -1
  //@ requires z >= -1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires z > -1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152:) in method main
      e.method_b(x);
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:193:
  public int method_b(int z) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: z > -1
  //@ requires z > -1;
                 ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154:
  //@ ensures \result >= 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:194: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:179:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:194:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157: verify: Precondition conjunct is false: arg < 1
  //@ requires arg < 1;
                   ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153:
  //@ ensures \result != -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:178:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:193:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156: verify: Precondition conjunct is false: arg < 1
  //@ requires arg < 1;
                   ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152:
  //@ ensures \result >= -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:192: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:177:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:192:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155: verify: Precondition conjunct is false: arg < 1
  //@ requires arg < 1;
                   ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result > -1;
  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143:) in method method_b
    else return z--;
         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151:
  //@ ensures \result > -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:191: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:176:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:191:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: Precondition conjunct is false: arg < 1
  //@ requires arg < 1;
                   ^
5 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:190: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:175:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:190:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg < 1
  //@ requires arg < 1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:174:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:189:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg <= 1
  //@ requires arg <= 1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:188: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:173:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:188:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg == 1
  //@ requires arg == 1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:187: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:172:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:187:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg != 1
  //@ requires arg != 1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:186: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:171:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:186:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg >= 1
  //@ requires arg >= 1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:185: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:170:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:185:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg > 1
  //@ requires arg > 1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:184: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:169:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:184:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg < 0
  //@ requires arg < 0;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:183: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:168:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:183:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg <= 0
  //@ requires arg <= 0;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:182: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:167:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:182:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg == 0
  //@ requires arg == 0;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:181: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:166:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:181:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg != 0
  //@ requires arg != 0;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:180:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: Precondition conjunct is false: arg > 0
  //@ requires arg > 0;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:179: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:179:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: Precondition conjunct is false: arg < -1
  //@ requires arg < -1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:178: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:178:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: Precondition conjunct is false: arg <= -1
  //@ requires arg <= -1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:177: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:177:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: Precondition conjunct is false: arg == -1
  //@ requires arg == -1;
                   ^
3 verification failures

class Main {
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:50:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x < 1
  //@ requires x < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:176: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:176:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x <= 1
  //@ requires x <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:175: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:175:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x == 1
  //@ requires x == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:174: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:174:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x != 1
  //@ requires x != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:173: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:173:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:150: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:46:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x >= 1
  //@ requires x >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:172: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:172:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:45:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x > 1
  //@ requires x > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:171: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:171:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:148: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:44:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x < 0
  //@ requires x < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:170:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:43:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x <= 0
  //@ requires x <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:169: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:169:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:42:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x == 0
  //@ requires x == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:168: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:168:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:145: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:41:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x != 0
  //@ requires x != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:167: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:167:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:144: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3: verify: Precondition conjunct is false: x > 0
  //@ requires x > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:166: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:166:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:39:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3: verify: Precondition conjunct is false: x < -1
  //@ requires x < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:150:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:165:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:142: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:38:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3: verify: Precondition conjunct is false: x <= -1
  //@ requires x <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:164:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:141: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:37:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3: verify: Precondition conjunct is false: x == -1
  //@ requires x == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:148:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:163:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:140: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y < x
  //@ requires y < x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:162:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:139: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:35:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:150:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:7: verify: Precondition conjunct is false: y == x
  //@ requires y == x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:161:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:138: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:34:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:7: verify: Precondition conjunct is false: y != x
  //@ requires y != x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:145:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:160:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:137: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:33:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:148:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:7: verify: Precondition conjunct is false: y >= x
  //@ requires y >= x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:144:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:159:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:136: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:7: verify: Precondition conjunct is false: y > x
  //@ requires y > x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:158:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:135: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:31:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:9: verify: Precondition conjunct is false: y == 1
  //@ requires y == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:142:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:157:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:134: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:30:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:145:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Precondition conjunct is false: y >= 1
  //@ requires y >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:141:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:156:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:133: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:29:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:144:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Precondition conjunct is false: y > 1
  //@ requires y > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:140:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:155:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:132: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:28:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Precondition conjunct is false: y < 0
  //@ requires y < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:139:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:154:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:131: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:142:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: Precondition conjunct is false: y != 0
  //@ requires y != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:138:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:153:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:130: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:141:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:13: verify: Precondition conjunct is false: y > 0
  //@ requires y > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:137:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:152:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:129: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:25:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:140:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:13: verify: Precondition conjunct is false: y < -1
  //@ requires y < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:136:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:151:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:128: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:139:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:13: verify: Precondition conjunct is false: y <= -1
  //@ requires y <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:135:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:150:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:127: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:23:) in method f
    return ex.test(arg, 0);
                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:138:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:13: verify: Precondition conjunct is false: y == -1
  //@ requires y == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:134:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:149:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:126: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:136: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:130:) in method f
    if (arg < 0 || arg > 10) return true;
                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:136:
  //@ ensures !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:106:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x < 1
  //@ requires x < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:133:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:148:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:125: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
8 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:135: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:131:) in method f
    if (arg < 0 || arg > 10) return true;
                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:135:
  //@ ensures arg >= 0 ==> !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:106:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x < 1
  //@ requires x < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:132:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:125: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
8 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:106:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x < 1
  //@ requires x < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:147:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:105:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x <= 1
  //@ requires x <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:146:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:104:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x == 1
  //@ requires x == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:145:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:103:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x != 1
  //@ requires x != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:144:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:102:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x >= 1
  //@ requires x >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:143:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:101:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x > 1
  //@ requires x > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:142:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:100:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x < 0
  //@ requires x < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:141:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:99:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x <= 0
  //@ requires x <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:140:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:98:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x == 0
  //@ requires x == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:139:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:97:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:32: verify: Precondition conjunct is false: x != 0
  //@ requires x != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:138:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:96:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:33: verify: Precondition conjunct is false: x > 0
  //@ requires x > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:137:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:95:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:33: verify: Precondition conjunct is false: x < -1
  //@ requires x < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:136:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:94:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:33: verify: Precondition conjunct is false: x <= -1
  //@ requires x <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:135:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:93:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:33: verify: Precondition conjunct is false: x == -1
  //@ requires x == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:134:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < x;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:92:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: verify: Precondition conjunct is false: y < x
  //@ requires y < x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:133:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y == x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:91:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:37: verify: Precondition conjunct is false: y == x
  //@ requires y == x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:132:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y != x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:90:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:37: verify: Precondition conjunct is false: y != x
  //@ requires y != x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:131:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y >= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:89:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:37: verify: Precondition conjunct is false: y >= x
  //@ requires y >= x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:130:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y > x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:88:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:37: verify: Precondition conjunct is false: y > x
  //@ requires y > x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:129:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y == 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:87:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:39: verify: Precondition conjunct is false: y == 1
  //@ requires y == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:128:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y >= 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:86:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40: verify: Precondition conjunct is false: y >= 1
  //@ requires y >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:127:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y > 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:85:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40: verify: Precondition conjunct is false: y > 1
  //@ requires y > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:126:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y < 0;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:84:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40: verify: Precondition conjunct is false: y < 0
  //@ requires y < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:125:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y != 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:83:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:42: verify: Precondition conjunct is false: y != 0
  //@ requires y != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:124:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y > 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:82:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:43: verify: Precondition conjunct is false: y > 0
  //@ requires y > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:123:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y < -1;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:81:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:43: verify: Precondition conjunct is false: y < -1
  //@ requires y < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:122:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y <= -1;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:80:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:43: verify: Precondition conjunct is false: y <= -1
  //@ requires y <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:121:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y == -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:79:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:43: verify: Precondition conjunct is false: y == -1
  //@ requires y == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:120:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result < x;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:80: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:46:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:80:
  //@ ensures \result < x;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:119:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result != x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:79: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:79:
  //@ ensures \result != x;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:118:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result > x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:78: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:78:
  //@ ensures \result > x;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:117:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:77: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:77:
  //@ ensures \result < 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:116:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:76: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:76:
  //@ ensures \result <= 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:115:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:75: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:75:
  //@ ensures \result == 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:114:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:74: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:74:
  //@ ensures \result < 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:113:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:73: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:73:
  //@ ensures \result <= 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:112:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:72: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:72:
  //@ ensures \result == 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:111:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:71: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:55:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:71:
  //@ ensures \result < -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:110:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:70: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:55:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:70:
  //@ ensures \result <= -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:109:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:69: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:55:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:69:
  //@ ensures \result == -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:108:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < y;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:68: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:58:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:68:
  //@ ensures \result < y;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:107:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= y;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:58:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:67:
  //@ ensures \result <= y;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:106:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result == y;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:58:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:66:
  //@ ensures \result == y;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:105:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result == x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:69: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47:) in method method_a
    return 0;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:69:
  //@ ensures \result == x;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:104:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result >= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:68: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47:) in method method_a
    return 0;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:68:
  //@ ensures \result >= x;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:103:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48:) in method method_a
    return 0;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:67:
  //@ ensures \result >= 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:102:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48:) in method method_a
    return 0;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:66:
  //@ ensures \result > 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:101:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48:) in method method_a
    return 0;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:65:
  //@ ensures \result != 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:100:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49:) in method method_a
    return 0;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:64:
  //@ ensures \result > 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:99:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != y;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52:) in method method_a
    return 0;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:63:
  //@ ensures \result != y;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:98:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures \result > y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:53:) in method method_a
    return 0;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:62:
  //@ ensures \result > y;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:97:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:27:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:96:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> \result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:17:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26:
  //@ ensures x >= 0 ==> \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:21:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:95:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> \result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:18:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:25:
  //@ ensures y >= 0 ==> \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:94:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:81: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:75:) in method f
    return ex.test(arg, 0);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:81:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
    return true;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26:
  //@ ensures !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:19:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:93:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:80: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:75:) in method f
    return ex.test(arg, 0);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:80:
  //@ ensures arg >= 0 ==> \result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
    return true;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26:
  //@ ensures !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:19:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:92:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
7 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures !\result;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
    return true;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:26:
  //@ ensures !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:19:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:91:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures x >= 0 ==> !\result;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
    return true;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:25:
  //@ ensures x >= 0 ==> !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:18:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:90:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures y >= 0 ==> !\result;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method test
    return true;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24:
  //@ ensures y >= 0 ==> !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:17:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:89:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:88:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:15:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:87:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y < 1
  //@ requires y < 1;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:14:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:86:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= 1
  //@ requires y <= 1;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:13:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:85:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y != 1
  //@ requires y != 1;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:84:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y <= 0
  //@ requires y <= 0;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:11:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:83:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y == 0
  //@ requires y == 0;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= x;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:43:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: Precondition conjunct is false: y <= x
  //@ requires y <= x;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:82:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y < 1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:42:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: Precondition conjunct is false: y < 1
  //@ requires y < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:81:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= 1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:41:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: Precondition conjunct is false: y <= 1
  //@ requires y <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:80:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y != 1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: Precondition conjunct is false: y != 1
  //@ requires y != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:79:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y <= 0;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:39:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: Precondition conjunct is false: y <= 0
  //@ requires y <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:78:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y == 0;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:38:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: verify: Precondition conjunct is false: y == 0
  //@ requires y == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:77:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result >= y;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:34:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:39:
  //@ ensures \result >= y;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:76:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result <= x;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:28:) in method method_a
    if (y > 10) return y;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:40:
  //@ ensures \result <= x;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:75:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
5 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:74:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:9:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:73:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y != -1
  //@ requires y != -1;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:72:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y >= -1
  //@ requires y >= -1;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:7:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:71:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Precondition conjunct is false: y > -1
  //@ requires y > -1;
                 ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= 0;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:31:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: Precondition conjunct is false: y >= 0
  //@ requires y >= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:54:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:69:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:50: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y != -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:30:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: Precondition conjunct is false: y != -1
  //@ requires y != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:53:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:68:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y >= -1;
  //@ requires y > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:29:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: Precondition conjunct is false: y >= -1
  //@ requires y >= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:67:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires y > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:28:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:8:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: Precondition conjunct is false: y > -1
  //@ requires y > -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:51:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:66:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
6 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= 0;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:50:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:65:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:46: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:64:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:46: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg >= -1;
  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:63:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:46: verify: Precondition conjunct is false: arg >= -1
  //@ requires arg >= -1;
                   ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires arg > -1;
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:62:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:46: verify: Precondition conjunct is false: arg > -1
  //@ requires arg > -1;
                   ^
3 verification failures

class Main {
  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:62:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x >= 0
  //@ requires x >= 0;
                 ^
3 verification failures

class Main {
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:5:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:61:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x != -1
  //@ requires x != -1;
                 ^
3 verification failures

class Main {
  //@ requires x >= -1;
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:60:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x >= -1
  //@ requires x >= -1;
                 ^
3 verification failures

class Main {
  //@ requires x > -1;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:59:
  public boolean test(int x, int y) {
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:2: verify: Precondition conjunct is false: x > -1
  //@ requires x > -1;
                 ^
3 verification failures

class Main {
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:23:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: Precondition conjunct is false: x >= 0
  //@ requires x >= 0;
                 ^
3 verification failures

class Main {
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: Precondition conjunct is false: x != -1
  //@ requires x != -1;
                 ^
3 verification failures

class Main {
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= -1;
  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:21:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: Precondition conjunct is false: x >= -1
  //@ requires x >= -1;
                 ^
3 verification failures

class Main {
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x > -1;
  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20:) in method test
    int v = method_a(x, y);
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:4:
  public int method_a(int x, int y) {
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:12: verify: Precondition conjunct is false: x > -1
  //@ requires x > -1;
                 ^
3 verification failures

class Main {
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ ensures \result != 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures x >= 0 ==> \result >= 0;
  //@ ensures y >= 0 ==> \result >= 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures \result <= z;
  //@ ensures \result == z;
  //@ ensures \result >= z;
  //@ ensures z >= 0 ==> \result >= 0;
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

class ExSymExeSuzette {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      e.method_b(x);
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}


