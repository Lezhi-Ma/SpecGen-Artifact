public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator < 1;
  //@ requires numerator <= 1;
  //@ requires numerator == 1;
  //@ requires numerator != 1;
  //@ requires numerator >= 1;
  //@ requires numerator > 1;
  //@ requires numerator < 0;
  //@ requires numerator <= 0;
  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:118:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:158:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator < 1
  //@ requires numerator < 1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator <= 1;
  //@ requires numerator == 1;
  //@ requires numerator != 1;
  //@ requires numerator >= 1;
  //@ requires numerator > 1;
  //@ requires numerator < 0;
  //@ requires numerator <= 0;
  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:117:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:157:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator <= 1
  //@ requires numerator <= 1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator == 1;
  //@ requires numerator != 1;
  //@ requires numerator >= 1;
  //@ requires numerator > 1;
  //@ requires numerator < 0;
  //@ requires numerator <= 0;
  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:116:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:156:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator == 1
  //@ requires numerator == 1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator != 1;
  //@ requires numerator >= 1;
  //@ requires numerator > 1;
  //@ requires numerator < 0;
  //@ requires numerator <= 0;
  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:115:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:155:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator != 1
  //@ requires numerator != 1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= 1;
  //@ requires numerator > 1;
  //@ requires numerator < 0;
  //@ requires numerator <= 0;
  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:114:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:154:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator >= 1
  //@ requires numerator >= 1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator > 1;
  //@ requires numerator < 0;
  //@ requires numerator <= 0;
  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:113:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:153:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator > 1
  //@ requires numerator > 1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator < 0;
  //@ requires numerator <= 0;
  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:112:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:152:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator < 0
  //@ requires numerator < 0;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator <= 0;
  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:111:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:151:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator <= 0
  //@ requires numerator <= 0;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator == 0;
  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:110:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:150:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator == 0
  //@ requires numerator == 0;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator != 0;
  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:109:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:149:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator != 0
  //@ requires numerator != 0;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= 0;
  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:108:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:148:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator >= 0
  //@ requires numerator >= 0;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator > 0;
  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:107:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:147:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator > 0
  //@ requires numerator > 0;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator < -1;
  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:106:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:146:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator < -1
  //@ requires numerator < -1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator <= -1;
  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:105:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:145:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator <= -1
  //@ requires numerator <= -1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator == -1;
  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:104:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:144:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator == -1
  //@ requires numerator == -1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator != -1;
  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:103:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:143:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator != -1
  //@ requires numerator != -1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= -1;
  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:102:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:142:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator >= -1
  //@ requires numerator >= -1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator > -1;
  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:101:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:141:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator > -1
  //@ requires numerator > -1;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator < MIN_INT;
  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:100:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:140:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator < MIN_INT
  //@ requires numerator < MIN_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator <= MIN_INT;
  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:99:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:139:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator <= MIN_INT
  //@ requires numerator <= MIN_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator == MIN_INT;
  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:98:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:138:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator == MIN_INT
  //@ requires numerator == MIN_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator != MIN_INT;
  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:97:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:137:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:8: verify: Precondition conjunct is false: numerator != MIN_INT
  //@ requires numerator != MIN_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator > MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:96:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:136:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator > MIN_INT
  //@ requires numerator > MIN_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator == MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:95:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:135:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:11: verify: Precondition conjunct is false: numerator == MAX_INT
  //@ requires numerator == MAX_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator >= MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:94:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:134:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: numerator >= MAX_INT
  //@ requires numerator >= MAX_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires numerator > MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:93:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:133:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: numerator > MAX_INT
  //@ requires numerator > MAX_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator < numerator;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:92:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:132:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator < numerator
  //@ requires denominator < numerator;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator <= numerator;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:91:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:131:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator <= numerator
  //@ requires denominator <= numerator;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator == numerator;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:90:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:130:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator == numerator
  //@ requires denominator == numerator;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != numerator;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:89:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:129:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != numerator
  //@ requires denominator != numerator;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator >= numerator;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:88:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:128:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator >= numerator
  //@ requires denominator >= numerator;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator > numerator;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:87:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:127:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator > numerator
  //@ requires denominator > numerator;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator < 1;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:86:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:126:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator < 1
  //@ requires denominator < 1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator <= 1;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:85:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:125:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator <= 1
  //@ requires denominator <= 1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator == 1;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:84:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:124:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator == 1
  //@ requires denominator == 1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != 1;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:83:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:123:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != 1
  //@ requires denominator != 1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator >= 1;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:82:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:122:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator >= 1
  //@ requires denominator >= 1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator > 1;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:81:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:121:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator > 1
  //@ requires denominator > 1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator < 0;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:80:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:120:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator < 0
  //@ requires denominator < 0;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator <= 0;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:79:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:119:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator <= 0
  //@ requires denominator <= 0;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator == 0;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:78:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:118:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator == 0
  //@ requires denominator == 0;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != 0;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:77:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:117:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != 0
  //@ requires denominator != 0;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator >= 0;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:76:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:116:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator >= 0
  //@ requires denominator >= 0;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator > 0;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:75:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:115:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator > 0
  //@ requires denominator > 0;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator < -1;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:74:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:114:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator < -1
  //@ requires denominator < -1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator <= -1;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:73:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:113:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator <= -1
  //@ requires denominator <= -1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator == -1;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:72:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:112:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator == -1
  //@ requires denominator == -1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != -1;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:71:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:111:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != -1
  //@ requires denominator != -1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator >= -1;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:70:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:110:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator >= -1
  //@ requires denominator >= -1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator > -1;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:69:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:109:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator > -1
  //@ requires denominator > -1;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator < MIN_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:68:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:108:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator < MIN_INT
  //@ requires denominator < MIN_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator <= MIN_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:67:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:107:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator <= MIN_INT
  //@ requires denominator <= MIN_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator == MIN_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:66:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:106:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator == MIN_INT
  //@ requires denominator == MIN_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator < MAX_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:65:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:105:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:15: verify: Precondition conjunct is false: denominator < MAX_INT
  //@ requires denominator < MAX_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator == MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:64:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:104:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Precondition conjunct is false: denominator == MAX_INT
  //@ requires denominator == MAX_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator != MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:63:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:103:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Precondition conjunct is false: denominator != MAX_INT
  //@ requires denominator != MAX_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator >= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:62:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:102:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Precondition conjunct is false: denominator >= MAX_INT
  //@ requires denominator >= MAX_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ requires denominator > MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:61:) in method main
        divS32(i, j);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:101:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Precondition conjunct is false: denominator > MAX_INT
  //@ requires denominator > MAX_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result < numerator;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:88: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:16:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:88:
  //@ ensures \result < numerator;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result <= numerator;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:87: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:16:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:87:
  //@ ensures \result <= numerator;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result == numerator;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:86: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:16:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:86:
  //@ ensures \result == numerator;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:85: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:19:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:85:
  //@ ensures \result < 1;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:84: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:19:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:84:
  //@ ensures \result <= 1;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:83: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:19:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:83:
  //@ ensures \result == 1;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:82: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:22:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:82:
  //@ ensures \result < 0;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:81: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:22:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:81:
  //@ ensures \result <= 0;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:80: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:22:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:80:
  //@ ensures \result == 0;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:79: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:25:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:79:
  //@ ensures \result < -1;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:78: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:25:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:78:
  //@ ensures \result <= -1;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:77: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:25:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:77:
  //@ ensures \result == -1;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < MIN_INT;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:76: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:28:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:76:
  //@ ensures \result < MIN_INT;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= MIN_INT;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:75: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:28:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:75:
  //@ ensures \result <= MIN_INT;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result == MIN_INT;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:74: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:28:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:74:
  //@ ensures \result == MIN_INT;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result < denominator;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:73: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:31:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:73:
  //@ ensures \result < denominator;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result <= denominator;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:72: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:31:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:72:
  //@ ensures \result <= denominator;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result == denominator;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:71: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:31:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:71:
  //@ ensures \result == denominator;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result < MAX_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:70: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:34:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:70:
  //@ ensures \result < MAX_INT;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result != MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:69: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:36:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:69:
  //@ ensures \result != MAX_INT;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures \result > MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:68: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:37:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:68:
  //@ ensures \result > MAX_INT;
      ^
2 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result >= numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:17:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:67:
  //@ ensures \result >= numerator;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:39:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:80:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result > numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:17:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:66:
  //@ ensures \result > numerator;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:38:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:79:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:18:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:65:
  //@ ensures \result >= 1;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:37:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:78:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result > 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:18:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:64:
  //@ ensures \result > 1;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:36:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:77:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:19:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:63:
  //@ ensures \result >= 0;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:35:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:76:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:19:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:62:
  //@ ensures \result > 0;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:34:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:75:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:20:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:61:
  //@ ensures \result >= -1;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:33:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:74:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result > -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:20:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:60:
  //@ ensures \result > -1;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:32:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:73:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result != MIN_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:20:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:59:
  //@ ensures \result != MIN_INT;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:31:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:72:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result > MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:21:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:58:
  //@ ensures \result > MIN_INT;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:30:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:71:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result >= denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:22:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:57:
  //@ ensures \result >= denominator;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:29:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:70:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result > denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:22:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:56:
  //@ ensures \result > denominator;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:28:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:69:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result == MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:23:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:55:
  //@ ensures \result == MAX_INT;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:27:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:68:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures \result >= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:23:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:54:
  //@ ensures \result >= MAX_INT;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:26:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:67:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:12: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  //@ ensures denominator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:24:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:53:
  //@ ensures denominator >= 0 ==> \result >= 0;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:25:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:66:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator < MAX_INT
  //@ requires numerator < MAX_INT;
                         ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != numerator;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:16:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:52:
  //@ ensures \result != numerator;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:24:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:65:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator < MAX_INT
  //@ requires numerator < MAX_INT;
                         ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != 1;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:16:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:51:
  //@ ensures \result != 1;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:23:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:64:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator < MAX_INT
  //@ requires numerator < MAX_INT;
                         ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != 0;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:16:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:50:
  //@ ensures \result != 0;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:22:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:63:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator < MAX_INT
  //@ requires numerator < MAX_INT;
                         ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result != -1;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:16:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:49:
  //@ ensures \result != -1;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:21:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:62:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator < MAX_INT
  //@ requires numerator < MAX_INT;
                         ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result != denominator;
  //@ ensures \result <= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:17:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:48:
  //@ ensures \result != denominator;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:20:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:61:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator < MAX_INT
  //@ requires numerator < MAX_INT;
                         ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result <= MAX_INT;
  //@ ensures numerator >= 0 ==> \result >= 0;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:18:) in method divS32
    return quotient;
    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:47:
  //@ ensures numerator >= 0 ==> \result >= 0;
      ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:19:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:60:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator < MAX_INT
  //@ requires numerator < MAX_INT;
                         ^
5 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator < MAX_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result <= MAX_INT;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:18:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:59:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:9: verify: Precondition conjunct is false: numerator < MAX_INT
  //@ requires numerator < MAX_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires numerator != MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result <= MAX_INT;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:17:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:58:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:10: verify: Precondition conjunct is false: numerator != MAX_INT
  //@ requires numerator != MAX_INT;
                         ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires denominator != MIN_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result <= MAX_INT;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:16:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:57:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:10: verify: Precondition conjunct is false: denominator != MIN_INT
  //@ requires denominator != MIN_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator > MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result <= MAX_INT;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}


/home/max/Documents/JMLGPT/tmp/Divs32.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Divs32.java:15:) in method main
        divS32(j, i);
              ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Divs32.java:56:
  public static int divS32(int numerator, int denominator) {
                    ^
/home/max/Documents/JMLGPT/tmp/Divs32.java:11: verify: Precondition conjunct is false: denominator > MIN_INT
  //@ requires denominator > MIN_INT;
                           ^
3 verification failures

public class Divs32 {

  //@ spec_public
  static final int MAX_INT = 2147483647;
  //@ spec_public
  static final int MIN_INT = -2147483648;

  //@ requires numerator >= MIN_INT;
  //@ requires numerator <= MAX_INT;
  //@ requires denominator >= MIN_INT;
  //@ requires denominator <= MAX_INT;
  //@ ensures \result >= MIN_INT;
  //@ ensures \result <= MAX_INT;
  public static int divS32(int numerator, int denominator) {
    int quotient;
    int tempAbsQuotient;
    boolean quotientNeedsNegation = false;
    if (denominator == 0) {
      quotient = numerator >= 0 ? MAX_INT : MIN_INT;

      /* Divide by zero handler */
    } else {
      // quotientNeedsNegation = ((numerator < 0) != (denominator < 0));

      if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
      else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
      else quotientNeedsNegation = false;

      int calcDenominator;

      /* replacing this computation
      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) /
              (denominator >= 0 ? denominator : -denominator);*/

      if (denominator >= 0) calcDenominator = denominator;
      else calcDenominator = -denominator;

      tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
      quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
    }

    return quotient;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -10; i <= 10; i += 3)
      for(int j = 10; j >= -10; j -= 3) {
        divS32(i, j);
        divS32(j, i);
      }
    for(int i = -2; i <= 2; i++)
      for(int j = 2; j >= -2; j--) {
        divS32(i, j);
        divS32(j, i);
      }
  }
}



