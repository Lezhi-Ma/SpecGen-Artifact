public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:77:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:89:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:5: verify: Precondition conjunct is false: m == 1
  //@ requires m == 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:76:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:88:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:6: verify: Precondition conjunct is false: m >= 1
  //@ requires m >= 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:75:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:87:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:6: verify: Precondition conjunct is false: m > 1
  //@ requires m > 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:74:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:86:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:6: verify: Precondition conjunct is false: m < 0
  //@ requires m < 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:73:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:85:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:8: verify: Precondition conjunct is false: m != 0
  //@ requires m != 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:72:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:84:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: m > 0
  //@ requires m > 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:71:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:83:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: m < -1
  //@ requires m < -1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:70:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:82:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: m <= -1
  //@ requires m <= -1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:69:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:81:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: m == -1
  //@ requires m == -1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < m;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:68:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:80:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:12: verify: Precondition conjunct is false: n < m
  //@ requires n < m;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n != m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:67:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:79:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:14: verify: Precondition conjunct is false: n != m
  //@ requires n != m;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n > m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:66:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:78:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:15: verify: Precondition conjunct is false: n > m
  //@ requires n > m;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:65:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:77:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: verify: Precondition conjunct is false: n == 1
  //@ requires n == 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:64:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:76:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:18: verify: Precondition conjunct is false: n >= 1
  //@ requires n >= 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:63:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:75:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:18: verify: Precondition conjunct is false: n > 1
  //@ requires n > 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:62:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:74:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:18: verify: Precondition conjunct is false: n < 0
  //@ requires n < 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:61:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:73:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:20: verify: Precondition conjunct is false: n != 0
  //@ requires n != 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:60:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:72:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:21: verify: Precondition conjunct is false: n > 0
  //@ requires n > 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:59:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:71:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:21: verify: Precondition conjunct is false: n < -1
  //@ requires n < -1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:58:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:70:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:21: verify: Precondition conjunct is false: n <= -1
  //@ requires n <= -1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:57:) in method main
    ack(0, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:69:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:21: verify: Precondition conjunct is false: n == -1
  //@ requires n == -1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:24:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:58:
  //@ ensures \result < m;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:24:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:57:
  //@ ensures \result <= m;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:24:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:56:
  //@ ensures \result == m;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:27:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:55:
  //@ ensures \result < 1;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:29:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:54:
  //@ ensures \result != 1;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:30:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:53:
  //@ ensures \result > 1;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:30:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:52:
  //@ ensures \result < 0;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:30:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:51:
  //@ ensures \result <= 0;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:30:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:50:
  //@ ensures \result == 0;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:33:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:49:
  //@ ensures \result < -1;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:33:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:48:
  //@ ensures \result <= -1;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:33:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:47:
  //@ ensures \result == -1;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:36:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:46:
  //@ ensures \result < n;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:36:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:45:
  //@ ensures \result <= n;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:36:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:44:
  //@ ensures \result == n;
      ^
2 verification failures

public class Ackermann {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:41:) in method main
    ack(1, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:54:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:3: verify: Precondition conjunct is false: m < 1
  //@ requires m < 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m != 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:40:) in method main
    ack(1, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:53:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Precondition conjunct is false: m != 1
  //@ requires m != 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:39:) in method main
    ack(1, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:52:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Precondition conjunct is false: m <= 0
  //@ requires m <= 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m == 0;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:38:) in method main
    ack(1, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:51:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Precondition conjunct is false: m == 0
  //@ requires m == 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n == m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:37:) in method main
    ack(1, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:50:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: n == m
  //@ requires n == m;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n >= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:36:) in method main
    ack(1, 0);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:49:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: n >= m
  //@ requires n >= m;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= m;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:35:) in method ack
      return ack(m - 1, 1);
                ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:40:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:8: verify: Precondition conjunct is false: n <= m
  //@ requires n <= m;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:34:) in method ack
      return ack(m - 1, 1);
                ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:39:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:8: verify: Precondition conjunct is false: n < 1
  //@ requires n < 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= 1;
  //@ requires n != 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:33:) in method ack
      return ack(m - 1, 1);
                ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:38:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:32:) in method ack
      return ack(m - 1, 1);
                ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:37:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: n <= 0
  //@ requires n <= 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= 1;
  //@ requires n == 0;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:31:) in method ack
      return ack(m - 1, 1);
                ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:36:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:9: verify: Precondition conjunct is false: n == 0
  //@ requires n == 0;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= 1;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:16:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:32:
  //@ ensures \result <= 1;
      ^
2 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= 1;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:16:) in method ack
      return n + 1;
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:31:
  //@ ensures \result == 1;
      ^
2 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n <= 1;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:28:) in method ack
    return ack(m - 1, ack(m, n - 1));
              ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:35:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:8: verify: Precondition conjunct is false: n <= 1
  //@ requires n <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:28:) in method main
    ack(1, 2);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:44:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:8: verify: Precondition conjunct is false: n <= 1
  //@ requires n <= 1;
                 ^
6 verification failures

public class Ackermann {

  //@ requires m <= 1;
  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:27:) in method main
    ack(2, 1);
       ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:44:
  public static int ack(int m, int n) {
                    ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:3: verify: Precondition conjunct is false: m <= 1
  //@ requires m <= 1;
                 ^
3 verification failures

public class Ackermann {

  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:11:) in method ack
      return ack(m - 1, 1);
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:31:
  //@ ensures \result != m;
      ^
2 verification failures

public class Ackermann {

  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:12:) in method ack
      return ack(m - 1, 1);
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:30:
  //@ ensures \result > m;
      ^
2 verification failures

public class Ackermann {

  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result >= m;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:11:) in method ack
      return ack(m - 1, 1);
      ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:29:
  //@ ensures \result >= m;
      ^
2 verification failures

public class Ackermann {

  //@ requires m >= 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures m >= 0 ==> \result >= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  public static int ack(int m, int n) {
    if (m == 0) {
      return n + 1;
    }
    if (n == 0) {
      return ack(m - 1, 1);
    }
    return ack(m - 1, ack(m, n - 1));
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    ack(0, 0);
    ack(1, 0);
    ack(0, 1);
    ack(1, 1);
    ack(1, 2);
    ack(2, 1);
    ack(2, 2);
    ack(0, 2);
    ack(2, 0);
    ack(2, 3);
    ack(3, 2);
    ack(1, 3);
    ack(3, 1);
    ack(3, 0);
    ack(3, 2);
    ack(2, 3);
    ack(0, 3);
    ack(3, 3);
  }

}


