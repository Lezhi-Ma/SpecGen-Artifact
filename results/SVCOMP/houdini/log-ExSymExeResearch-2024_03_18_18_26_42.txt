class Main {

  //@ requires arg < 1;
  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:25:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:128:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg < 1
  //@ requires arg < 1;
                   ^
3 verification failures

class Main {

  //@ requires arg <= 1;
  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:127:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg <= 1
  //@ requires arg <= 1;
                   ^
3 verification failures

class Main {

  //@ requires arg == 1;
  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:23:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:126:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg == 1
  //@ requires arg == 1;
                   ^
3 verification failures

class Main {

  //@ requires arg != 1;
  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:22:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:125:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != 1
  //@ requires arg != 1;
                   ^
3 verification failures

class Main {

  //@ requires arg >= 1;
  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:21:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:124:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg >= 1
  //@ requires arg >= 1;
                   ^
3 verification failures

class Main {

  //@ requires arg > 1;
  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:20:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:123:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg > 1
  //@ requires arg > 1;
                   ^
3 verification failures

class Main {

  //@ requires arg < 0;
  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:19:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:122:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg < 0
  //@ requires arg < 0;
                   ^
3 verification failures

class Main {

  //@ requires arg <= 0;
  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:121:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg <= 0
  //@ requires arg <= 0;
                   ^
3 verification failures

class Main {

  //@ requires arg == 0;
  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:120:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg == 0
  //@ requires arg == 0;
                   ^
3 verification failures

class Main {

  //@ requires arg != 0;
  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:119:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != 0
  //@ requires arg != 0;
                   ^
3 verification failures

class Main {

  //@ requires arg >= 0;
  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:15:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:118:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg >= 0
  //@ requires arg >= 0;
                   ^
3 verification failures

class Main {

  //@ requires arg > 0;
  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:117:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg > 0
  //@ requires arg > 0;
                   ^
3 verification failures

class Main {

  //@ requires arg < -1;
  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:13:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:116:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg < -1
  //@ requires arg < -1;
                   ^
3 verification failures

class Main {

  //@ requires arg <= -1;
  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:12:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:115:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg <= -1
  //@ requires arg <= -1;
                   ^
3 verification failures

class Main {

  //@ requires arg == -1;
  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:11:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:114:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg == -1
  //@ requires arg == -1;
                   ^
3 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a < 1;
  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:91:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17: verify: Precondition conjunct is false: a < 1
  //@ requires a < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:113:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a <= 1;
  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:90:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17: verify: Precondition conjunct is false: a <= 1
  //@ requires a <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:112:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a == 1;
  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:89:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17: verify: Precondition conjunct is false: a == 1
  //@ requires a == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:111:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a != 1;
  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:88:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17: verify: Precondition conjunct is false: a != 1
  //@ requires a != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:110:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a > 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:87:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18: verify: Precondition conjunct is false: a > 1
  //@ requires a > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:109:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a < 0;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:86:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18: verify: Precondition conjunct is false: a < 0
  //@ requires a < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:108:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a <= 0;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:85:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18: verify: Precondition conjunct is false: a <= 0
  //@ requires a <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:107:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a == 0;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:84:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18: verify: Precondition conjunct is false: a == 0
  //@ requires a == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:106:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a < -1;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:83:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:21: verify: Precondition conjunct is false: a < -1
  //@ requires a < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:105:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a <= -1;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:82:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:21: verify: Precondition conjunct is false: a <= -1
  //@ requires a <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:104:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a == -1;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:81:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:21: verify: Precondition conjunct is false: a == -1
  //@ requires a == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:103:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < a;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:80:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b < a
  //@ requires b < a;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:102:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b <= a;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:79:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b <= a
  //@ requires b <= a;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:101:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b == a;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:78:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b == a
  //@ requires b == a;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:100:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != a;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:77:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b != a
  //@ requires b != a;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:99:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b >= a;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:76:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b >= a
  //@ requires b >= a;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:98:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b > a;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:75:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b > a
  //@ requires b > a;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:97:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b < 1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:74:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b < 1
  //@ requires b < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:96:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b <= 1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:73:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b <= 1
  //@ requires b <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:95:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b == 1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:72:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Precondition conjunct is false: b == 1
  //@ requires b == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:94:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b < 0;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:71:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:27: verify: Precondition conjunct is false: b < 0
  //@ requires b < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:93:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b <= 0;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:70:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:27: verify: Precondition conjunct is false: b <= 0
  //@ requires b <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:92:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b == 0;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:69:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:27: verify: Precondition conjunct is false: b == 0
  //@ requires b == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:91:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b < -1;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:68:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:30: verify: Precondition conjunct is false: b < -1
  //@ requires b < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:90:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b <= -1;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:67:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:30: verify: Precondition conjunct is false: b <= -1
  //@ requires b <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:89:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b == -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:66:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:30: verify: Precondition conjunct is false: b == -1
  //@ requires b == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:88:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
6 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 1;
  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:65:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17: verify: Precondition conjunct is false: a >= 1
  //@ requires a >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:77: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:35:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:77:
  //@ ensures \result == b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:87:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
8 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a != 0;
  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:64:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17: verify: Precondition conjunct is false: a != 0
  //@ requires a != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:76: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:34:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:76:
  //@ ensures \result == b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:86:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
8 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a > 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:63:) in method f
    return inst.test(x, y) != x + y;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18: verify: Precondition conjunct is false: a > 0
  //@ requires a > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:75: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:33:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:75:
  //@ ensures \result == b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:85:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
8 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result == b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:74: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:32:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:74:
  //@ ensures \result == b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:84:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result >= b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:73: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:33:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:73:
  //@ ensures \result >= b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:83:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result > b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:72: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:33:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:72:
  //@ ensures \result > b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:82:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result == a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:71: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:35:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:71:
  //@ ensures \result == a;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:81:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result >= a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:70: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:36:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:70:
  //@ ensures \result >= a;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:80:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result > a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:69: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:36:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:69:
  //@ ensures \result > a;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:79:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:68: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:38:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:68:
  //@ ensures \result == 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:78:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:39:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:67:
  //@ ensures \result >= 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:77:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:39:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:66:
  //@ ensures \result > 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:76:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:39:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:65:
  //@ ensures \result < 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:75:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:41:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:64:
  //@ ensures \result != 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:74:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:63:
  //@ ensures \result > 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:73:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:62:
  //@ ensures \result < -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:72:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:61:
  //@ ensures \result <= -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:71:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:60:
  //@ ensures \result == -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:70:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:7:) in method f
    return inst.test(x, y) != x + y;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:
  //@ ensures !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:33:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:59:
  //@ ensures \result < a;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:69:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
7 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  //@ ensures arg >= 0 ==> !\result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:13: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method f
    return inst.test(x, y) != x + y;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:13:
  //@ ensures arg >= 0 ==> !\result;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:32:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:58:
  //@ ensures \result < a;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:9:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:68:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
7 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result < a;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:31:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:57:
  //@ ensures \result < a;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:67:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result != a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:32:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:56:
  //@ ensures \result != a;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:66:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:36:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:55:
  //@ ensures \result == 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:65:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:36:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:54:
  //@ ensures \result >= 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:64:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:53:
  //@ ensures \result >= -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:63:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  //@ ensures \result > -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:52:
  //@ ensures \result > -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:62:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  //@ ensures a >= 0 ==> \result >= 0;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:51:
  //@ ensures a >= 0 ==> \result >= 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:61:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  //@ ensures b >= 0 ==> \result >= 0;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:50:
  //@ ensures b >= 0 ==> \result >= 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:60:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result < b;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:28:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:49:
  //@ ensures \result < b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:59:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= b;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:28:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:48:
  //@ ensures \result <= b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:58:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result != b;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:28:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:47:
  //@ ensures \result != b;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:57:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:46:
  //@ ensures \result < 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:56:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:45:
  //@ ensures \result <= 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:55:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:44:
  //@ ensures \result != 1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:54:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:43:
  //@ ensures \result <= 0;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:53:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  //@ ensures \result != -1;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42:
  //@ ensures \result != -1;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:52:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
5 verification failures

class Main {

  //@ requires arg != -1;
  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:51:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg != -1
  //@ requires arg != -1;
                   ^
3 verification failures

class Main {

  //@ requires arg >= -1;
  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:7:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:50:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg >= -1
  //@ requires arg >= -1;
                   ^
3 verification failures

class Main {

  //@ requires arg > -1;
  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:6:) in method main
        Main.f(x);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:49:
  public static boolean f(int arg) {
                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Precondition conjunct is false: arg > -1
  //@ requires arg > -1;
                   ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:26:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:49:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b != 1
  //@ requires b != 1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b >= 1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:25:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:48:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b >= 1
  //@ requires b >= 1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b > 1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:47:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b > 1
  //@ requires b > 1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != 0;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:23:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:46:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b != 0
  //@ requires b != 0;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b >= 0;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:22:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:45:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b >= 0
  //@ requires b >= 0;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b > 0;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:21:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:44:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b > 0
  //@ requires b > 0;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b != -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:20:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:43:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b != -1
  //@ requires b != -1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b >= -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:19:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:42:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b >= -1
  //@ requires b >= -1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ requires b > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:41:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Precondition conjunct is false: b > -1
  //@ requires b > -1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= 0;
  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:40:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:12: verify: Precondition conjunct is false: a >= 0
  //@ requires a >= 0;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a != -1;
  //@ requires a >= -1;
  //@ requires a > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:39:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:12: verify: Precondition conjunct is false: a != -1
  //@ requires a != -1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a >= -1;
  //@ requires a > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:15:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:38:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:12: verify: Precondition conjunct is false: a >= -1
  //@ requires a >= -1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ requires a > -1;
  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14:) in method main
        e.test(x, y);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:37:
  public int test(int a, int b) { // invokevirtual
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:12: verify: Precondition conjunct is false: a > -1
  //@ requires a > -1;
                 ^
3 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  //@ ensures \result <= a;
  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:12:) in method test
    return result;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:25:
  //@ ensures \result <= a;
      ^
2 verification failures

class Main {

  //@ ensures \result;
  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3:) in method f
    return inst.test(x, y) != x + y;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:9:
  //@ ensures \result;
      ^
2 verification failures

class Main {

  //@ ensures arg >= 0 ==> \result;
  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3:) in method f
    return inst.test(x, y) != x + y;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeResearch.java:8:
  //@ ensures arg >= 0 ==> \result;
      ^
2 verification failures

class Main {

  public static boolean f(int arg) {
    int x = arg > 0 ? arg : -arg;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y) != x + y;
  }

  public int test(int a, int b) { // invokevirtual
    int result = 0;
    if (a >= 0 && a < 100 && b >= 0 && b < 100) {
      int sum = a + b;
      int diff = a - b;
      int temp;

      if (sum > 0) temp = a;
      else temp = b;
      if (temp < diff) result = temp;
      else result = diff;
    }
    return result;
  }
}

class ExSymExeResearch {
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    Main e = new Main();
    for(int x = -4; x <= 4; x += 1) {
      for(int y = -4; y <= 4; y += 1) {
        Main.f(x);
        e.test(x, y);
      }
    }
  }
}


