public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:25:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:40:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:5: verify: Precondition conjunct is false: i == 1
  //@ requires i == 1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:24:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:39:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:6: verify: Precondition conjunct is false: i >= 1
  //@ requires i >= 1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:23:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:38:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:6: verify: Precondition conjunct is false: i > 1
  //@ requires i > 1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:22:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:37:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:8: verify: Precondition conjunct is false: i == 0
  //@ requires i == 0;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:21:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:36:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:9: verify: Precondition conjunct is false: i >= 0
  //@ requires i >= 0;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:20:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:35:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:9: verify: Precondition conjunct is false: i > 0
  //@ requires i > 0;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:19:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:34:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:11: verify: Precondition conjunct is false: i == -1
  //@ requires i == -1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:18:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:33:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:12: verify: Precondition conjunct is false: i >= -1
  //@ requires i >= -1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i != -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:17:) in method main
    recursion(-2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:32:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:12: verify: Precondition conjunct is false: i > -1
  //@ requires i > -1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i != -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:12:) in method recursion
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:24:
  //@ ensures \result;
      ^
2 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i != -1;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:15:) in method main
    recursion(-1);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:31:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:9: verify: Precondition conjunct is false: i < -1
  //@ requires i < -1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i <= -1;
  //@ requires i != -1;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:14:) in method main
    recursion(-1);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:30:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:10: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i <= -1;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:13:) in method main
    recursion(0);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:30:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:6: verify: Precondition conjunct is false: i < 0
  //@ requires i < 0;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i != 0;
  //@ requires i <= -1;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:12:) in method main
    recursion(0);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:29:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:7: verify: Precondition conjunct is false: i != 0
  //@ requires i != 0;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i <= -1;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:11:) in method main
    recursion(0);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:28:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:7: verify: Precondition conjunct is false: i <= -1
  //@ requires i <= -1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:7:) in method recursion
      return true;
      ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:12:
  //@ ensures !\result;
      ^
2 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:11: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:8:) in method recursion
      return true;
      ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:11:
  //@ ensures i >= 0 ==> !\result;
      ^
2 verification failures

public class boundcheck30 {

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ ensures i >= 0 ==> \result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:8:) in method main
    recursion(1);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:26:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:3: verify: Precondition conjunct is false: i < 1
  //@ requires i < 1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ ensures i >= 0 ==> \result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:7:) in method main
    recursion(1);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:25:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:4: verify: Precondition conjunct is false: i != 1
  //@ requires i != 1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i <= 1;
  //@ requires i <= 0;
  //@ ensures i >= 0 ==> \result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:6:) in method main
    recursion(1);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:24:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:4: verify: Precondition conjunct is false: i <= 0
  //@ requires i <= 0;
                 ^
3 verification failures

public class boundcheck30 {

  //@ requires i <= 1;
  //@ ensures i >= 0 ==> \result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}


/home/max/Documents/JMLGPT/tmp/boundcheck30.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:5:) in method main
    recursion(2);
             ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boundcheck30.java:24:
  private static boolean recursion(int i) {
                         ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:3: verify: Precondition conjunct is false: i <= 1
  //@ requires i <= 1;
                 ^
3 verification failures

public class boundcheck30 {

  //@ ensures i >= 0 ==> \result;
  private static boolean recursion(int i) {
    if (i == 0) {
      return true;
    }
    if (i > 0) {
      return recursion(i - 1);
    }
    if (i < 0) {
      return false;
    }
    return true;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    recursion(-2);
    recursion(-1);
    recursion(0);
    recursion(1);
    recursion(2);
    recursion(3);
    recursion(4);
  }
}



