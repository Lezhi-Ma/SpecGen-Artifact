import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ non_null
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:114: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
1 error

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:60:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:75:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:7: verify: Precondition conjunct is false: index == 200
  //@ requires index == 200;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:59:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:74:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index >= 200
  //@ requires index >= 200;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:58:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:73:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index > 200
  //@ requires index > 200;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:57:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:72:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:10: verify: Precondition conjunct is false: index == 1
  //@ requires index == 1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:56:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:71:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:11: verify: Precondition conjunct is false: index >= 1
  //@ requires index >= 1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:55:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:70:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:11: verify: Precondition conjunct is false: index > 1
  //@ requires index > 1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:54:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:69:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:13: verify: Precondition conjunct is false: index == 0
  //@ requires index == 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:53:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:68:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:14: verify: Precondition conjunct is false: index >= 0
  //@ requires index >= 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:52:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:67:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:14: verify: Precondition conjunct is false: index > 0
  //@ requires index > 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:51:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:66:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:16: verify: Precondition conjunct is false: index == -1
  //@ requires index == -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:50:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:65:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:17: verify: Precondition conjunct is false: index >= -1
  //@ requires index >= -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ requires index > -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:49:) in method main
    f(-2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:64:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:17: verify: Precondition conjunct is false: index > -1
  //@ requires index > -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result == 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:19:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:50:
  //@ ensures \result == 200;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:49:
  //@ ensures \result >= 200;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result > 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:48:
  //@ ensures \result > 200;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result < index;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:47:
  //@ ensures \result < index;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result <= index;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:46:
  //@ ensures \result <= index;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result == index;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:45:
  //@ ensures \result == index;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:25:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:44:
  //@ ensures \result == 1;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:26:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:43:
  //@ ensures \result >= 1;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:26:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:42:
  //@ ensures \result > 1;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:28:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:41:
  //@ ensures \result == 0;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:29:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  //@ ensures \result >= 0;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:29:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:39:
  //@ ensures \result > 0;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:29:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:38:
  //@ ensures \result < -1;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:37:
  //@ ensures \result != -1;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:32:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:36:
  //@ ensures \result > -1;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:33:) in method main
    f(-1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:49:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:14: verify: Precondition conjunct is false: index < -1
  //@ requires index < -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index <= -1;
  //@ requires index != -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:32:) in method main
    f(-1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:48:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:15: verify: Precondition conjunct is false: index != -1
  //@ requires index != -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index <= -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result != index;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:18:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:33:
  //@ ensures \result != index;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index <= -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result > index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:19:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:32:
  //@ ensures \result > index;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index <= -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:29:) in method main
    f(0);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:46:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:11: verify: Precondition conjunct is false: index < 0
  //@ requires index < 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index != 0;
  //@ requires index <= -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:28:) in method main
    f(0);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:45:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:12: verify: Precondition conjunct is false: index != 0
  //@ requires index != 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index <= -1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:) in method main
    f(0);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:44:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:12: verify: Precondition conjunct is false: index <= -1
  //@ requires index <= -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index == 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:140:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:58: verify: Precondition conjunct is false: index == 200
  //@ requires index == 200;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index >= 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:139:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:59: verify: Precondition conjunct is false: index >= 200
  //@ requires index >= 200;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index > 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:138:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:59: verify: Precondition conjunct is false: index > 200
  //@ requires index > 200;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index == 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:137:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:61: verify: Precondition conjunct is false: index == 1
  //@ requires index == 1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index >= 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:136:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:62: verify: Precondition conjunct is false: index >= 1
  //@ requires index >= 1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index > 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:135:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:62: verify: Precondition conjunct is false: index > 1
  //@ requires index > 1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index < 0;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:134:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:62: verify: Precondition conjunct is false: index < 0
  //@ requires index < 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index != 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:133:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:64: verify: Precondition conjunct is false: index != 0
  //@ requires index != 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index > 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:132:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:65: verify: Precondition conjunct is false: index > 0
  //@ requires index > 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index < -1;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:131:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:65: verify: Precondition conjunct is false: index < -1
  //@ requires index < -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index <= -1;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:130:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:65: verify: Precondition conjunct is false: index <= -1
  //@ requires index <= -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index == -1;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:129:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:65: verify: Precondition conjunct is false: index == -1
  //@ requires index == -1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 < ia.length;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:128:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:68: verify: Precondition conjunct is false: 200 < ia.length
  //@ requires 200 < ia.length;
                   ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 != ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:127:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:70: verify: Precondition conjunct is false: 200 != ia.length
  //@ requires 200 != ia.length;
                   ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires 200 > ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:126:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:71: verify: Precondition conjunct is false: 200 > ia.length
  //@ requires 200 > ia.length;
                   ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index == ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:125:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:73: verify: Precondition conjunct is false: index == ia.length
  //@ requires index == ia.length;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires index >= ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:124:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:74: verify: Precondition conjunct is false: index >= ia.length
  //@ requires index >= ia.length;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires index > ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:123:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:74: verify: Precondition conjunct is false: index > ia.length
  //@ requires index > ia.length;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 == ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:122:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:76: verify: Precondition conjunct is false: 1 == ia.length
  //@ requires 1 == ia.length;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 >= ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:121:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:77: verify: Precondition conjunct is false: 1 >= ia.length
  //@ requires 1 >= ia.length;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires 1 > ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:120:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:77: verify: Precondition conjunct is false: 1 > ia.length
  //@ requires 1 > ia.length;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 == ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:119:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:79: verify: Precondition conjunct is false: -1 == ia.length
  //@ requires -1 == ia.length;
                  ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 >= ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:118:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:80: verify: Precondition conjunct is false: -1 >= ia.length
  //@ requires -1 >= ia.length;
                  ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires -1 > ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:117:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:80: verify: Precondition conjunct is false: -1 > ia.length
  //@ requires -1 > ia.length;
                  ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i == 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:116:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i == 200
  //@ requires i == 200;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i >= 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:115:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:83: verify: Precondition conjunct is false: i >= 200
  //@ requires i >= 200;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i > 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:114:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:83: verify: Precondition conjunct is false: i > 200
  //@ requires i > 200;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i == ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:113:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:85: verify: Precondition conjunct is false: i == ia.length
  //@ requires i == ia.length;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i >= ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:112:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:86: verify: Precondition conjunct is false: i >= ia.length
  //@ requires i >= ia.length;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i > ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:111:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:86: verify: Precondition conjunct is false: i > ia.length
  //@ requires i > ia.length;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i < index;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:110:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:86: verify: Precondition conjunct is false: i < index
  //@ requires i < index;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i != index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:109:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:88: verify: Precondition conjunct is false: i != index
  //@ requires i != index;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i > index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:108:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:89: verify: Precondition conjunct is false: i > index
  //@ requires i > index;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:107:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:91: verify: Precondition conjunct is false: i == 1
  //@ requires i == 1;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:106:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:92: verify: Precondition conjunct is false: i >= 1
  //@ requires i >= 1;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:105:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:92: verify: Precondition conjunct is false: i > 1
  //@ requires i > 1;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:104:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:92: verify: Precondition conjunct is false: i < 0
  //@ requires i < 0;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:103:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:94: verify: Precondition conjunct is false: i != 0
  //@ requires i != 0;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:102:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:95: verify: Precondition conjunct is false: i > 0
  //@ requires i > 0;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:101:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:95: verify: Precondition conjunct is false: i < -1
  //@ requires i < -1;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:100:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:95: verify: Precondition conjunct is false: i <= -1
  //@ requires i <= -1;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:99:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:95: verify: Precondition conjunct is false: i == -1
  //@ requires i == -1;
                 ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:19:) in method f
        return 0;
        ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:33:
  //@ ensures \result < 0;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method f
        return 0;
        ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:32:
  //@ ensures \result != 0;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method f
        return 0;
        ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:31:
  //@ ensures \result <= -1;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == -1;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method f
        return 0;
        ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:30:
  //@ ensures \result == -1;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= index;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:94:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i <= index
  //@ requires i <= index;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i == index;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:93:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i == index
  //@ requires i == index;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i >= index;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:92:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i >= index
  //@ requires i >= index;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:91:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i < 1
  //@ requires i < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:90:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i <= 1
  //@ requires i <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:89:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i != 1
  //@ requires i != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:88:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i <= 0
  //@ requires i <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:87:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i == 0
  //@ requires i == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:86:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i >= 0
  //@ requires i >= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:85:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i >= -1;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:84:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i >= -1
  //@ requires i >= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  //@ requires i > -1;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:83:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:27:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:82: verify: Precondition conjunct is false: i > -1
  //@ requires i > -1;
                 ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:28: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
4 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:27: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:21:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:39:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:9: verify: Precondition conjunct is false: index != 1
  //@ requires index != 1;
                     ^
4 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ requires index <= 0;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:26: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:20:) in method main
    f(1);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:38:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:9: verify: Precondition conjunct is false: index <= 0
  //@ requires index <= 0;
                     ^
4 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index < 1;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:79:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:24:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:52: verify: Precondition conjunct is false: index < 1
  //@ requires index < 1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ requires index != 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:78:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:24:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:53: verify: Precondition conjunct is false: index != 1
  //@ requires index != 1;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ requires index <= 0;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:77:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:24:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:53: verify: Precondition conjunct is false: index <= 0
  //@ requires index <= 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ requires index == 0;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:76:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:24:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:53: verify: Precondition conjunct is false: index == 0
  //@ requires index == 0;
                     ^
3 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result >= index;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:12:) in method f
        return 0;
        ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:26:
  //@ ensures \result >= index;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:24: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:18:) in method main
    f(2);
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:37:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:8: verify: Precondition conjunct is false: index <= 1
  //@ requires index <= 1;
                     ^
4 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index <= 1;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:73:) in method f
      __Loop_Invariant_Dummy1(index, ia, i);
                             ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:22:
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:50: verify: Precondition conjunct is false: index <= 1
  //@ requires index <= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:17:) in method main
    f(514);    
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: verify: Precondition conjunct is false: index < 200
  //@ requires index < 200;
                     ^
6 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:23: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:17:) in method main
    f(514);    
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:40:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: verify: Precondition conjunct is false: index < 200
  //@ requires index < 200;
                     ^
4 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index <= 200;
  //@ requires index != 200;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:22: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:16:) in method main
    f(514);    
     ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:39:
  public static int f(int index) {
                    ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: verify: Precondition conjunct is false: index <= 200
  //@ requires index <= 200;
                     ^
4 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index != 200;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures index >= 0 ==> \result >= 0;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:14:) in method f
    if(!(0 <= index && index < ia.length)) return -1;
                                           ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/array_iteration01.java:17:
  //@ ensures index >= 0 ==> \result >= 0;
      ^
2 verification failures

import java.util.Random;

public class array_iteration01 {

  //@ requires index != 200;
  //@ ensures \result < 200;
  //@ ensures \result <= 200;
  //@ ensures \result != 200;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  public static int f(int index) {
    int[] ia = new int[200];
    if(!(0 <= index && index < ia.length)) return -1;
    ia[index] = new Random().nextInt();
    for (int i = 0; i < ia.length; i++) {
      __Loop_Invariant_Dummy1(index, ia, i);
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f(-2);
    f(-1);
    f(0);
    f(1);
    f(2);
    f(3);
    f(4);
    f(114);
    f(514);    
    f(580);
    f(1919);
    f(810);
    f(-514);
  }

  //@ requires index < 200;
  //@ requires index <= 200;
  //@ requires index != 200;
  //@ requires index >= 0;
  //@ requires index != -1;
  //@ requires index >= -1;
  //@ requires index > -1;
  //@ requires 200 <= ia.length;
  //@ requires 200 == ia.length;
  //@ requires 200 >= ia.length;
  //@ requires index < ia.length;
  //@ requires index <= ia.length;
  //@ requires index != ia.length;
  //@ requires 1 < ia.length;
  //@ requires 1 <= ia.length;
  //@ requires 1 != ia.length;
  //@ requires -1 < ia.length;
  //@ requires -1 <= ia.length;
  //@ requires -1 != ia.length;
  //@ requires i < 200;
  //@ requires i <= 200;
  //@ requires i != 200;
  //@ requires i < ia.length;
  //@ requires i <= ia.length;
  //@ requires i != ia.length;
  public static void __Loop_Invariant_Dummy1(int index, int[] ia, int i) {}
}


/home/max/Documents/JMLGPT/tmp/array_iteration01.java:20: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
1 verification failure

