import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:32: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:206: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:267: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:304: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:427: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:488: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:525: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:648: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:709: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:746: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:931: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:992: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1029: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
13 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:205: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:266: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:303: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:426: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:487: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:524: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:647: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:708: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:745: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:930: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:991: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1028: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
12 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:265: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:302: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:425: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:486: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:523: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:646: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:707: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:744: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:929: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:990: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1027: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
11 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:301: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:424: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:485: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:522: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:645: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:706: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:743: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:928: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:989: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1026: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
10 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:423: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:484: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:521: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:644: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:705: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:742: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:927: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:988: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1025: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
9 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:483: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:520: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:643: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:704: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:741: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:926: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:987: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1024: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
8 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:519: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:642: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:703: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:740: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:925: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:986: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1023: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
7 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:641: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:702: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:739: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:924: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:985: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1022: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
6 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:701: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:738: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:923: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:984: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1021: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
5 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:737: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:922: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:983: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1020: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
4 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ non_null
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:921: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:982: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1019: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
3 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ non_null
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:981: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1018: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
2 errors

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ non_null
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1017: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
1 error

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1255: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:134:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1255:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:10: verify: Precondition conjunct is false: N == INFINITY
  //@ requires N == INFINITY;
                 ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 59154432 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14191.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1254: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:133:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1254:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:11: verify: Precondition conjunct is false: N >= INFINITY
  //@ requires N >= INFINITY;
                 ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 33640448 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14248.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1253: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:132:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1253:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:11: verify: Precondition conjunct is false: N > INFINITY
  //@ requires N > INFINITY;
                 ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 58388480 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14277.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1252: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:131:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1252:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:13: verify: Precondition conjunct is false: N == 1
  //@ requires N == 1;
                 ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 48951296 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14305.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1251: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:130:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1251:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:14: verify: Precondition conjunct is false: N >= 1
  //@ requires N >= 1;
                 ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 58966016 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14334.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1250: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:129:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1250:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:14: verify: Precondition conjunct is false: N > 1
  //@ requires N > 1;
                 ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 59813888 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14373.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1249: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:128:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1249:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:14: verify: Precondition conjunct is false: N < 0
  //@ requires N < 0;
                 ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 41574400 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14401.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1248: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:127:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1248:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:16: verify: Precondition conjunct is false: N != 0
  //@ requires N != 0;
                 ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 60891136 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14429.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1247: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:126:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1247:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:17: verify: Precondition conjunct is false: N > 0
  //@ requires N > 0;
                 ^

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1246: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:125:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1246:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:17: verify: Precondition conjunct is false: N < -1
  //@ requires N < -1;
                 ^

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1245: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:124:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1245:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:17: verify: Precondition conjunct is false: N <= -1
  //@ requires N <= -1;
                 ^

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1244: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:123:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1244:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:17: verify: Precondition conjunct is false: N == -1
  //@ requires N == -1;
                 ^

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:122:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1243:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:20: verify: Precondition conjunct is false: INFINITY < D.length
  //@ requires INFINITY < D.length;
                        ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 46133248 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14628.log

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:121:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1242:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:20: verify: Precondition conjunct is false: INFINITY <= D.length
  //@ requires INFINITY <= D.length;
                        ^

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:120:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1241:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:20: verify: Precondition conjunct is false: INFINITY == D.length
  //@ requires INFINITY == D.length;
                        ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:119:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1240:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:23: verify: Precondition conjunct is false: 1 < D.length
  //@ requires 1 < D.length;
                 ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:118:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1239:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:23: verify: Precondition conjunct is false: 1 <= D.length
  //@ requires 1 <= D.length;
                 ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:117:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1238:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:23: verify: Precondition conjunct is false: 1 == D.length
  //@ requires 1 == D.length;
                 ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:116:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1237:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:28: verify: Precondition conjunct is false: -1 == D.length
  //@ requires -1 == D.length;
                  ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:115:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1236:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:29: verify: Precondition conjunct is false: -1 >= D.length
  //@ requires -1 >= D.length;
                  ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1235: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:114:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1235:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:29: verify: Precondition conjunct is false: -1 > D.length
  //@ requires -1 > D.length;
                  ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1234: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:113:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1234:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:29: verify: Precondition conjunct is false: N < D.length
  //@ requires N < D.length;
                 ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:112:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1233:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:31: verify: Precondition conjunct is false: N != D.length
  //@ requires N != D.length;
                 ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:111:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1232:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:32: verify: Precondition conjunct is false: N > D.length
  //@ requires N > D.length;
                 ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:110:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1231:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:34: verify: Precondition conjunct is false: src == INFINITY
  //@ requires src == INFINITY;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:109:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1230:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:35: verify: Precondition conjunct is false: src >= INFINITY
  //@ requires src >= INFINITY;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1229: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:108:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1229:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:35: verify: Precondition conjunct is false: src > INFINITY
  //@ requires src > INFINITY;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1228: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:107:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1228:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:37: verify: Precondition conjunct is false: src == 1
  //@ requires src == 1;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:106:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1227:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:38: verify: Precondition conjunct is false: src >= 1
  //@ requires src >= 1;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:105:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1226:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:38: verify: Precondition conjunct is false: src > 1
  //@ requires src > 1;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:104:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1225:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:38: verify: Precondition conjunct is false: src < 0
  //@ requires src < 0;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:103:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1224:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:40: verify: Precondition conjunct is false: src != 0
  //@ requires src != 0;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:102:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1223:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:41: verify: Precondition conjunct is false: src > 0
  //@ requires src > 0;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:101:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1222:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:41: verify: Precondition conjunct is false: src < -1
  //@ requires src < -1;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:100:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1221:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:41: verify: Precondition conjunct is false: src <= -1
  //@ requires src <= -1;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:99:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1220:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:41: verify: Precondition conjunct is false: src == -1
  //@ requires src == -1;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:98:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1219:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:44: verify: Precondition conjunct is false: src < D.length
  //@ requires src < D.length;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:97:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1218:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:46: verify: Precondition conjunct is false: src != D.length
  //@ requires src != D.length;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:96:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1217:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:47: verify: Precondition conjunct is false: src > D.length
  //@ requires src > D.length;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src >= D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:95:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1216:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:47: verify: Precondition conjunct is false: src < N
  //@ requires src < N;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src >= D.length;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:94:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1215:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:49: verify: Precondition conjunct is false: src != N
  //@ requires src != N;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src >= D.length;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:93:) in method main
      runBellmanFord(V, D, 0); 
                    ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BellmanFord.java:1214:
  static int[] runBellmanFord(int N, int D[], int src) {
               ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:50: verify: Precondition conjunct is false: src > N
  //@ requires src > N;
                   ^
3 verification failures

import java.util.Random;

public class BellmanFord {

  //@ spec_public
  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N != INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N != 1;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N >= 0;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 != D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N >= D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src != INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src != 1;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src >= 0;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src >= D.length;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src >= N;
  //@ ensures \result != null;
  //@ ensures INFINITY < \result.length;
  //@ ensures INFINITY <= \result.length;
  //@ ensures INFINITY == \result.length;
  //@ ensures INFINITY != \result.length;
  //@ ensures INFINITY >= \result.length;
  //@ ensures INFINITY > \result.length;
  //@ ensures 1 < \result.length;
  //@ ensures 1 <= \result.length;
  //@ ensures 1 == \result.length;
  //@ ensures 1 != \result.length;
  //@ ensures 1 >= \result.length;
  //@ ensures 1 > \result.length;
  //@ ensures -1 < \result.length;
  //@ ensures -1 <= \result.length;
  //@ ensures -1 == \result.length;
  //@ ensures -1 != \result.length;
  //@ ensures -1 >= \result.length;
  //@ ensures -1 > \result.length;
  //@ ensures D.length < \result.length;
  //@ ensures D.length <= \result.length;
  //@ ensures D.length == \result.length;
  //@ ensures D.length != \result.length;
  //@ ensures D.length >= \result.length;
  //@ ensures D.length > \result.length;
  //@ ensures src < \result.length;
  //@ ensures src <= \result.length;
  //@ ensures src == \result.length;
  //@ ensures src != \result.length;
  //@ ensures src >= \result.length;
  //@ ensures src > \result.length;
  //@ ensures N < \result.length;
  //@ ensures N <= \result.length;
  //@ ensures N == \result.length;
  //@ ensures N != \result.length;
  //@ ensures N >= \result.length;
  //@ ensures N > \result.length;
  //@ ensures \fresh(\result);
  //@ ensures N >= 0 ==> \result != null;
  //@ ensures D == null ==> \result != null;
  //@ ensures D != null ==> \result != null;
  //@ ensures src >= 0 ==> \result != null;
  static int[] runBellmanFord(int N, int D[], int src) {
    // Initialize distances.
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    for (int i = 0; i < N; i++) { // V+1 branches
      __Loop_Invariant_Dummy1(N, D, src, dist, infinite, i);
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k;
    for (k = 0; k < N; k++) { // V+1 branches
      __Loop_Invariant_Dummy2(N, D, src, dist, infinite, k);
      boolean relaxed = false;
      for (int i = 0; i < N; i++) { // V(V+1) branches
        __Loop_Invariant_Dummy3(N, D, src, dist, infinite, k, relaxed, i);
        for (int j = 0; j < N; j++) { // V^2(V+1) branches
          __Loop_Invariant_Dummy4(N, D, src, dist, infinite, k, relaxed, i, j);
          if (i == j) continue; // V^3 branches
          if (!infinite[i]) { // V^2(V-1) branches
            if (dist[j] > dist[i] + D[i * N + j]) { // V^2(V-1) branches
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed) // V branches
      break;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    }

    // Return the computed distances.
    return dist;
  }

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy1 (int N, int[] D, int src, int[] dist, boolean[] infinite, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  public static void __Loop_Invariant_Dummy2 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  public static void __Loop_Invariant_Dummy3 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i) {}

  //@ requires N < INFINITY;
  //@ requires N <= INFINITY;
  //@ requires N == INFINITY;
  //@ requires N != INFINITY;
  //@ requires N >= INFINITY;
  //@ requires N > INFINITY;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires INFINITY < D.length;
  //@ requires INFINITY <= D.length;
  //@ requires INFINITY == D.length;
  //@ requires INFINITY != D.length;
  //@ requires INFINITY >= D.length;
  //@ requires INFINITY > D.length;
  //@ requires 1 < D.length;
  //@ requires 1 <= D.length;
  //@ requires 1 == D.length;
  //@ requires 1 != D.length;
  //@ requires 1 >= D.length;
  //@ requires 1 > D.length;
  //@ requires -1 < D.length;
  //@ requires -1 <= D.length;
  //@ requires -1 == D.length;
  //@ requires -1 != D.length;
  //@ requires -1 >= D.length;
  //@ requires -1 > D.length;
  //@ requires N < D.length;
  //@ requires N <= D.length;
  //@ requires N == D.length;
  //@ requires N != D.length;
  //@ requires N >= D.length;
  //@ requires N > D.length;
  //@ requires src < INFINITY;
  //@ requires src <= INFINITY;
  //@ requires src == INFINITY;
  //@ requires src != INFINITY;
  //@ requires src >= INFINITY;
  //@ requires src > INFINITY;
  //@ requires src < 1;
  //@ requires src <= 1;
  //@ requires src == 1;
  //@ requires src != 1;
  //@ requires src >= 1;
  //@ requires src > 1;
  //@ requires src < 0;
  //@ requires src <= 0;
  //@ requires src == 0;
  //@ requires src != 0;
  //@ requires src >= 0;
  //@ requires src > 0;
  //@ requires src < -1;
  //@ requires src <= -1;
  //@ requires src == -1;
  //@ requires src != -1;
  //@ requires src >= -1;
  //@ requires src > -1;
  //@ requires src < D.length;
  //@ requires src <= D.length;
  //@ requires src == D.length;
  //@ requires src != D.length;
  //@ requires src >= D.length;
  //@ requires src > D.length;
  //@ requires src < N;
  //@ requires src <= N;
  //@ requires src == N;
  //@ requires src != N;
  //@ requires src >= N;
  //@ requires src > N;
  //@ requires INFINITY < dist.length;
  //@ requires INFINITY <= dist.length;
  //@ requires INFINITY == dist.length;
  //@ requires INFINITY != dist.length;
  //@ requires INFINITY >= dist.length;
  //@ requires INFINITY > dist.length;
  //@ requires 1 < dist.length;
  //@ requires 1 <= dist.length;
  //@ requires 1 == dist.length;
  //@ requires 1 != dist.length;
  //@ requires 1 >= dist.length;
  //@ requires 1 > dist.length;
  //@ requires -1 < dist.length;
  //@ requires -1 <= dist.length;
  //@ requires -1 == dist.length;
  //@ requires -1 != dist.length;
  //@ requires -1 >= dist.length;
  //@ requires -1 > dist.length;
  //@ requires D.length < dist.length;
  //@ requires D.length <= dist.length;
  //@ requires D.length == dist.length;
  //@ requires D.length != dist.length;
  //@ requires D.length >= dist.length;
  //@ requires D.length > dist.length;
  //@ requires src < dist.length;
  //@ requires src <= dist.length;
  //@ requires src == dist.length;
  //@ requires src != dist.length;
  //@ requires src >= dist.length;
  //@ requires src > dist.length;
  //@ requires N < dist.length;
  //@ requires N <= dist.length;
  //@ requires N == dist.length;
  //@ requires N != dist.length;
  //@ requires N >= dist.length;
  //@ requires N > dist.length;
  //@ requires INFINITY < infinite.length;
  //@ requires INFINITY <= infinite.length;
  //@ requires INFINITY == infinite.length;
  //@ requires INFINITY != infinite.length;
  //@ requires INFINITY >= infinite.length;
  //@ requires INFINITY > infinite.length;
  //@ requires 1 < infinite.length;
  //@ requires 1 <= infinite.length;
  //@ requires 1 == infinite.length;
  //@ requires 1 != infinite.length;
  //@ requires 1 >= infinite.length;
  //@ requires 1 > infinite.length;
  //@ requires -1 < infinite.length;
  //@ requires -1 <= infinite.length;
  //@ requires -1 == infinite.length;
  //@ requires -1 != infinite.length;
  //@ requires -1 >= infinite.length;
  //@ requires -1 > infinite.length;
  //@ requires D.length < infinite.length;
  //@ requires D.length <= infinite.length;
  //@ requires D.length == infinite.length;
  //@ requires D.length != infinite.length;
  //@ requires D.length >= infinite.length;
  //@ requires D.length > infinite.length;
  //@ requires dist.length < infinite.length;
  //@ requires dist.length <= infinite.length;
  //@ requires dist.length == infinite.length;
  //@ requires dist.length != infinite.length;
  //@ requires dist.length >= infinite.length;
  //@ requires dist.length > infinite.length;
  //@ requires src < infinite.length;
  //@ requires src <= infinite.length;
  //@ requires src == infinite.length;
  //@ requires src != infinite.length;
  //@ requires src >= infinite.length;
  //@ requires src > infinite.length;
  //@ requires N < infinite.length;
  //@ requires N <= infinite.length;
  //@ requires N == infinite.length;
  //@ requires N != infinite.length;
  //@ requires N >= infinite.length;
  //@ requires N > infinite.length;
  //@ requires k < src;
  //@ requires k <= src;
  //@ requires k == src;
  //@ requires k != src;
  //@ requires k >= src;
  //@ requires k > src;
  //@ requires k < D.length;
  //@ requires k <= D.length;
  //@ requires k == D.length;
  //@ requires k != D.length;
  //@ requires k >= D.length;
  //@ requires k > D.length;
  //@ requires k < -1;
  //@ requires k <= -1;
  //@ requires k == -1;
  //@ requires k != -1;
  //@ requires k >= -1;
  //@ requires k > -1;
  //@ requires k < infinite.length;
  //@ requires k <= infinite.length;
  //@ requires k == infinite.length;
  //@ requires k != infinite.length;
  //@ requires k >= infinite.length;
  //@ requires k > infinite.length;
  //@ requires k < N;
  //@ requires k <= N;
  //@ requires k == N;
  //@ requires k != N;
  //@ requires k >= N;
  //@ requires k > N;
  //@ requires k < dist.length;
  //@ requires k <= dist.length;
  //@ requires k == dist.length;
  //@ requires k != dist.length;
  //@ requires k >= dist.length;
  //@ requires k > dist.length;
  //@ requires k < INFINITY;
  //@ requires k <= INFINITY;
  //@ requires k == INFINITY;
  //@ requires k != INFINITY;
  //@ requires k >= INFINITY;
  //@ requires k > INFINITY;
  //@ requires k < 1;
  //@ requires k <= 1;
  //@ requires k == 1;
  //@ requires k != 1;
  //@ requires k >= 1;
  //@ requires k > 1;
  //@ requires k < 0;
  //@ requires k <= 0;
  //@ requires k == 0;
  //@ requires k != 0;
  //@ requires k >= 0;
  //@ requires k > 0;
  //@ requires relaxed;
  //@ requires !relaxed;
  //@ requires i < src;
  //@ requires i <= src;
  //@ requires i == src;
  //@ requires i != src;
  //@ requires i >= src;
  //@ requires i > src;
  //@ requires i < D.length;
  //@ requires i <= D.length;
  //@ requires i == D.length;
  //@ requires i != D.length;
  //@ requires i >= D.length;
  //@ requires i > D.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < k;
  //@ requires i <= k;
  //@ requires i == k;
  //@ requires i != k;
  //@ requires i >= k;
  //@ requires i > k;
  //@ requires i < infinite.length;
  //@ requires i <= infinite.length;
  //@ requires i == infinite.length;
  //@ requires i != infinite.length;
  //@ requires i >= infinite.length;
  //@ requires i > infinite.length;
  //@ requires i < N;
  //@ requires i <= N;
  //@ requires i == N;
  //@ requires i != N;
  //@ requires i >= N;
  //@ requires i > N;
  //@ requires i < dist.length;
  //@ requires i <= dist.length;
  //@ requires i == dist.length;
  //@ requires i != dist.length;
  //@ requires i >= dist.length;
  //@ requires i > dist.length;
  //@ requires i < INFINITY;
  //@ requires i <= INFINITY;
  //@ requires i == INFINITY;
  //@ requires i != INFINITY;
  //@ requires i >= INFINITY;
  //@ requires i > INFINITY;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires j < src;
  //@ requires j <= src;
  //@ requires j == src;
  //@ requires j != src;
  //@ requires j >= src;
  //@ requires j > src;
  //@ requires j < D.length;
  //@ requires j <= D.length;
  //@ requires j == D.length;
  //@ requires j != D.length;
  //@ requires j >= D.length;
  //@ requires j > D.length;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < k;
  //@ requires j <= k;
  //@ requires j == k;
  //@ requires j != k;
  //@ requires j >= k;
  //@ requires j > k;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < infinite.length;
  //@ requires j <= infinite.length;
  //@ requires j == infinite.length;
  //@ requires j != infinite.length;
  //@ requires j >= infinite.length;
  //@ requires j > infinite.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < dist.length;
  //@ requires j <= dist.length;
  //@ requires j == dist.length;
  //@ requires j != dist.length;
  //@ requires j >= dist.length;
  //@ requires j > dist.length;
  //@ requires j < INFINITY;
  //@ requires j <= INFINITY;
  //@ requires j == INFINITY;
  //@ requires j != INFINITY;
  //@ requires j >= INFINITY;
  //@ requires j > INFINITY;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy4 (int N, int[] D, int src, int[] dist, boolean[] infinite, int k, boolean relaxed, int i, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int V = 1; V <= 100; V=V+10) {
      final int D[] = new int[V * V];

      for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
          if (i == j) continue;
          int tmp = new Random().nextInt() % V;
          D[i * V + j] = tmp;
        }
      }
      runBellmanFord(V, D, 0); 
    }
  }
}


/home/max/Documents/JMLGPT/tmp/BellmanFord.java:1209: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method main
          int tmp = new Random().nextInt() % V;
                                           ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:101: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method runBellmanFord
    dist[src] = 0;
        ^
2 verification failures

