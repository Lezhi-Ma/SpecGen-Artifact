public class SortedListInsert {

  private static class List {
    //@ invariant x < 1;
    //@ invariant x <= 1;
    //@ invariant x == 1;
    //@ invariant x != 1;
    //@ invariant x >= 1;
    //@ invariant x > 1;
    //@ invariant x < 0;
    //@ invariant x <= 0;
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:17: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:18: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:19: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:20: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:21: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:53: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
19 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x <= 1;
    //@ invariant x == 1;
    //@ invariant x != 1;
    //@ invariant x >= 1;
    //@ invariant x > 1;
    //@ invariant x < 0;
    //@ invariant x <= 0;
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:17: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:18: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:19: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:20: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:52: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
18 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x == 1;
    //@ invariant x != 1;
    //@ invariant x >= 1;
    //@ invariant x > 1;
    //@ invariant x < 0;
    //@ invariant x <= 0;
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:17: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:18: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:19: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:51: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
17 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x != 1;
    //@ invariant x >= 1;
    //@ invariant x > 1;
    //@ invariant x < 0;
    //@ invariant x <= 0;
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:17: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:18: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:50: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
16 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x >= 1;
    //@ invariant x > 1;
    //@ invariant x < 0;
    //@ invariant x <= 0;
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:17: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:49: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
15 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x > 1;
    //@ invariant x < 0;
    //@ invariant x <= 0;
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:48: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
14 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x < 0;
    //@ invariant x <= 0;
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:47: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
13 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x <= 0;
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:46: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
12 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x == 0;
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:13: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:45: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
11 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x != 0;
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:12: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
10 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x >= 0;
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:43: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
9 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x > 0;
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > 0;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:42: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
8 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x < -1;
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x < -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
7 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x <= -1;
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x <= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:8: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:40: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
6 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x == -1;
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x == -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:7: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:39: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
5 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x != -1;
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x != -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:38: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
4 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x >= -1;
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x >= -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:5: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:37: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
3 errors

public class SortedListInsert {

  private static class List {
    //@ invariant x > -1;
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:4: error: An identifier with public visibility may not be used in a invariant clause with package visibility
    //@ invariant x > -1;
                  ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:36: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
2 errors

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    //@ non_null
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: error: This JML modifier is not allowed for a constructor declaration
    //@ non_null
        ^
1 error

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < x;
    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:74:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:87:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: verify: Precondition conjunct is false: data < x
    //@ requires data < x;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data <= x;
    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:73:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:86:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: verify: Precondition conjunct is false: data <= x
    //@ requires data <= x;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data == x;
    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:72:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:85:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: verify: Precondition conjunct is false: data == x
    //@ requires data == x;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data != x;
    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:71:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:84:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: verify: Precondition conjunct is false: data != x
    //@ requires data != x;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data >= x;
    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:70:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:83:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: verify: Precondition conjunct is false: data >= x
    //@ requires data >= x;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data > x;
    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:69:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:82:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: verify: Precondition conjunct is false: data > x
    //@ requires data > x;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data == 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:68:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:81:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:46: verify: Precondition conjunct is false: data == 1
    //@ requires data == 1;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data >= 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:67:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:80:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:47: verify: Precondition conjunct is false: data >= 1
    //@ requires data >= 1;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data > 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:66:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:79:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:47: verify: Precondition conjunct is false: data > 1
    //@ requires data > 1;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data < 0;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:65:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:78:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:47: verify: Precondition conjunct is false: data < 0
    //@ requires data < 0;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data != 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:64:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:77:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:49: verify: Precondition conjunct is false: data != 0
    //@ requires data != 0;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data > 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:63:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:76:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:50: verify: Precondition conjunct is false: data > 0
    //@ requires data > 0;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data < -1;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:62:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:75:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:50: verify: Precondition conjunct is false: data < -1
    //@ requires data < -1;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data <= -1;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:61:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:74:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:50: verify: Precondition conjunct is false: data <= -1
    //@ requires data <= -1;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data == -1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:60:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:73:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:50: verify: Precondition conjunct is false: data == -1
    //@ requires data == -1;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data == SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:59:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:72:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:55: verify: Precondition conjunct is false: data == SENTINEL
    //@ requires data == SENTINEL;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data >= SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:58:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:71:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:56: verify: Precondition conjunct is false: data >= SENTINEL
    //@ requires data >= SENTINEL;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    //@ requires data > SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:57:) in method main
    lst.insert(0);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:70:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:56: verify: Precondition conjunct is false: data > SENTINEL
    //@ requires data > SENTINEL;
                      ^
5 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data < 1;
    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: verify: The prover cannot establish an assertion (NullField) in method insert
    public List next;
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:56:) in method main
    lst.insert(4);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:70:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: verify: Precondition conjunct is false: data < 1
    //@ requires data < 1;
                      ^
6 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data <= 1;
    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: verify: The prover cannot establish an assertion (NullField) in method insert
    public List next;
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:55:) in method main
    lst.insert(4);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:69:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:44: verify: Precondition conjunct is false: data <= 1
    //@ requires data <= 1;
                      ^
6 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data != 1;
    //@ requires data <= 0;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: verify: The prover cannot establish an assertion (NullField) in method insert
    public List next;
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:54:) in method main
    lst.insert(4);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:68:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:45: verify: Precondition conjunct is false: data <= 0
    //@ requires data <= 0;
                      ^
6 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data != 1;
    //@ requires data == 0;
    //@ requires data >= 0;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: verify: The prover cannot establish an assertion (NullField) in method insert
    public List next;
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:53:) in method main
    lst.insert(4);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:67:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:45: verify: Precondition conjunct is false: data == 0
    //@ requires data == 0;
                      ^
6 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data != 1;
    //@ requires data >= 0;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: verify: The prover cannot establish an assertion (NullField) in method insert
    public List next;
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:52:) in method main
    lst.insert(-514);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:69:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:45: verify: Precondition conjunct is false: data >= 0
    //@ requires data >= 0;
                      ^
6 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data != 1;
    //@ requires data != -1;
    //@ requires data >= -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: verify: The prover cannot establish an assertion (NullField) in method insert
    public List next;
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:51:) in method main
    lst.insert(-514);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:68:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:46: verify: Precondition conjunct is false: data >= -1
    //@ requires data >= -1;
                      ^
6 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data != 1;
    //@ requires data != -1;
    //@ requires data > -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: verify: The prover cannot establish an assertion (NullField) in method insert
    public List next;
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:50:) in method main
    lst.insert(-514);
              ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:67:
    public void insert(int data) {
                ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:46: verify: Precondition conjunct is false: data > -1
    //@ requires data > -1;
                      ^
6 verification failures

public class SortedListInsert {

  private static class List {
    public int x;
    //@ non_null
    public List next;

    //@ spec_public
    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires x < SENTINEL;
    //@ requires x <= SENTINEL;
    //@ requires x == SENTINEL;
    //@ requires x != SENTINEL;
    //@ requires x >= SENTINEL;
    //@ requires x > SENTINEL;
    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    public List() {
      this(SENTINEL, null);
    }

    //@ requires data != 1;
    //@ requires data != -1;
    //@ requires data < SENTINEL;
    //@ requires data <= SENTINEL;
    //@ requires data != SENTINEL;
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    List lst = new List();
    lst.insert(0);
    lst.insert(4);
    lst.insert(5);
    lst.insert(114);
    lst.insert(-514);
    lst.insert(514);
    lst.insert(1919810);
  }
  
}


/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35:) in method List: next in List(int,SortedListInsert.List)
      this(SENTINEL, null);
                     ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:41:
    private List(int x, List next) {
                        ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:6: verify: The prover cannot establish an assertion (NullField) in method insert
    public List next;
                ^
3 verification failures

