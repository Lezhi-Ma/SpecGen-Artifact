public class Addition {

    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < m;
    //@ ensures \result <= m;
    //@ ensures \result == m;
    //@ ensures \result != m;
    //@ ensures \result >= m;
    //@ ensures \result > m;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures m >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int addition(int m, int n) {
        if (n == 0) {
            return m;
        }
        if (n > 0) {
            return addition(m + 1, n - 1);
        } else {
            return addition(m - 1, n + 1);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addition(0, 0);
        addition(1, 0);
        addition(0, 1);
        addition(1, 1);
        addition(1, 2);
        addition(2, 1);
        addition(2, 2);
        addition(0, 2);
        addition(2, 0);
        addition(2, 3);
        addition(3, 2);
        addition(1, 3);
        addition(3, 1);
        addition(3, 0);
        addition(3, 2);
        addition(2, 3);
        addition(0, 3);
        addition(3, 3);
        addition(114, 514);
        addition(10, 9);
        addition(4, 4);
        addition(3, 65);
        addition(2, 115);
        addition(1919, 810);
        addition(-1, 0);
        addition(0, -1);
        addition(-1, -1);
        addition(-1, 1);        
        addition(1, -1);
        addition(1, -2);
        addition(-2, 1);
        addition(-2, -2);
        addition(0, -2);
        addition(-2, 0);
        addition(-2, 3);
        addition(-3, 2);
        addition(1, -3);
        addition(3, -1);
        addition(3, 0);
        addition(-3, 2);
        addition(2, -3);
        addition(0, -3);
        addition(-3, 3);
        addition(114, -514);
        addition(-10, 9);
        addition(-4, 4);
        addition(-3, 65);
        addition(2, -115);
        addition(-1919, -810);
    }
}

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1888)
	at java.base/java.util.HashMap.putVal(HashMap.java:631)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:516)
	at java.base/java.util.HashMap.putAll(HashMap.java:785)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2$VarMap.putAll(BasicBlocker2.java:2513)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.initMap(BasicBlocker2.java:809)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:545)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:152)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.startBlock(BasicBlockerParent.java:463)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:404)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.visitTry(BasicBlockerParent.java:1048)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCTry.accept(JCTree.java:1401)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processStats(BasicBlockerParent.java:426)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processCurrentBlock(BasicBlockerParent.java:418)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:405)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.convertMethodBody(BasicBlocker2.java:617)
	at jdk.compiler/org.jmlspecs.openjml.esc.MethodProverSMT.prove(MethodProverSMT.java:361)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.doMethod(JmlEsc.java:329)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitMethodDef(JmlEsc.java:221)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlMethodDecl(JmlTreeScanner.java:238)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitClassDef(JmlEsc.java:169)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlClassDecl(JmlTreeScanner.java:106)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:117)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
/home/max/Documents/JMLGPT/tmp/Addition.java:89: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
    public static void main(String[] args) {
                       ^
  Reason: Prover aborted with exception: ZZZZZ
1 error

