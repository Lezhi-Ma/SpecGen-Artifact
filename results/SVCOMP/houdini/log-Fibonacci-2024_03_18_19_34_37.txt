class Fibonacci {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:45:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:58:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:44:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:57:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:43:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:56:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:42:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:55:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:41:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:54:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:40:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:53:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:39:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:52:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:38:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:51:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:37:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:50:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:36:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:49:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:35:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:48:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n >= 0
    //@ requires n >= 0;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:34:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:47:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:33:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:46:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:45:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:44:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:7:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    //@ ensures \result == 1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:43:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:8:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:
    //@ ensures \result >= 1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:42:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:8:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:
    //@ ensures \result > 1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:28:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:41:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:8:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:
    //@ ensures \result < 0;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:27:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:40:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:10:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:28:
    //@ ensures \result != 0;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:26:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:39:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:27:
    //@ ensures \result > 0;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:25:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:38:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:26:
    //@ ensures \result < -1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:24:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:37:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:25:
    //@ ensures \result <= -1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:23:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:36:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:24:
    //@ ensures \result == -1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:22:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:35:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:14:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:23:
    //@ ensures \result < n;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:34:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:22:
    //@ ensures \result != n;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:20:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:33:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:17:) in method fibonacci
          return 0;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:
    //@ ensures \result > n;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:32:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:5:) in method fibonacci
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:22:
    //@ ensures \result < 1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:18:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:31:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:6:) in method fibonacci
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:
    //@ ensures \result != 1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:17:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:30:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:6:) in method fibonacci
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:20:
    //@ ensures \result <= 0;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:16:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:29:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 0;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:6:) in method fibonacci
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:
    //@ ensures \result == 0;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:15:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:28:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibonacci
          return fibonacci(n - 1) + fibonacci(n - 2);
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:20:
    //@ ensures \result == n;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:14:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:27:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method fibonacci
          return fibonacci(n - 1) + fibonacci(n - 2);
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:19:
    //@ ensures \result >= n;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:13:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:26:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:5:) in method fibonacci
          return fibonacci(n - 1) + fibonacci(n - 2);
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:18:
    //@ ensures \result <= 1;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:12:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:25:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:9:) in method fibonacci
          return fibonacci(n - 1) + fibonacci(n - 2);
          ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:17:
    //@ ensures \result <= n;
        ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:11:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:24:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Fibonacci {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:10:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:23:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:9:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:22:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n >= -1
    //@ requires n >= -1;
                   ^
3 verification failures

class Fibonacci {
    //@ requires n > -1;
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}

/home/max/Documents/JMLGPT/tmp/Fibonacci.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:8:) in method main
        fibonacci(i);
                 ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Fibonacci.java:21:
    static int fibonacci(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Fibonacci.java:2: verify: Precondition conjunct is false: n > -1
    //@ requires n > -1;
                   ^
3 verification failures

class Fibonacci {
    //@ ensures \result >= 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures n >= 0 ==> \result >= 0;
    static int fibonacci(int n) {
        if (n < 1) {
          return 0;
        } else if (n == 1) {
          return 1;
        } else {
          return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //@ requires \nonnullelements(args);
    public static void main (String[] args) {
      for(int i = -5; i < 10; i++)
        fibonacci(i);
    }
}


