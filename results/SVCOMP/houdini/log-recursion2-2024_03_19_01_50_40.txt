class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth == 1;
  //@ requires depth != 1;
  //@ requires depth >= 1;
  //@ requires depth > 1;
  //@ requires depth < 0;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth != 0;
  //@ requires depth >= 0;
  //@ requires depth > 0;
  //@ requires depth < -1;
  //@ requires depth <= -1;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:51:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:10: verify: Precondition conjunct is false: depth == 1
  //@ requires depth == 1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth >= 1;
  //@ requires depth > 1;
  //@ requires depth < 0;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth != 0;
  //@ requires depth >= 0;
  //@ requires depth > 0;
  //@ requires depth < -1;
  //@ requires depth <= -1;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:50:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:11: verify: Precondition conjunct is false: depth >= 1
  //@ requires depth >= 1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth > 1;
  //@ requires depth < 0;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth != 0;
  //@ requires depth >= 0;
  //@ requires depth > 0;
  //@ requires depth < -1;
  //@ requires depth <= -1;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:49:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:11: verify: Precondition conjunct is false: depth > 1
  //@ requires depth > 1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth < 0;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth != 0;
  //@ requires depth >= 0;
  //@ requires depth > 0;
  //@ requires depth < -1;
  //@ requires depth <= -1;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:48:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:11: verify: Precondition conjunct is false: depth < 0
  //@ requires depth < 0;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth != 0;
  //@ requires depth >= 0;
  //@ requires depth > 0;
  //@ requires depth < -1;
  //@ requires depth <= -1;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:47:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:13: verify: Precondition conjunct is false: depth != 0
  //@ requires depth != 0;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth >= 0;
  //@ requires depth > 0;
  //@ requires depth < -1;
  //@ requires depth <= -1;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:46:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:14: verify: Precondition conjunct is false: depth > 0
  //@ requires depth > 0;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth >= 0;
  //@ requires depth < -1;
  //@ requires depth <= -1;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:45:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:14: verify: Precondition conjunct is false: depth < -1
  //@ requires depth < -1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth >= 0;
  //@ requires depth <= -1;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:44:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:14: verify: Precondition conjunct is false: depth <= -1
  //@ requires depth <= -1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth >= 0;
  //@ requires depth == -1;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:43:) in method f
    return recursion_test(0) == 10;
                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:14: verify: Precondition conjunct is false: depth == -1
  //@ requires depth == -1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth < 1;
  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:42:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:43:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:8: verify: Precondition conjunct is false: depth < 1
  //@ requires depth < 1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth <= 1;
  //@ requires depth != 1;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:41:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:42:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:9: verify: Precondition conjunct is false: depth != 1
  //@ requires depth != 1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth <= 1;
  //@ requires depth <= 0;
  //@ requires depth == 0;
  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:40:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:41:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:9: verify: Precondition conjunct is false: depth <= 0
  //@ requires depth <= 0;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth <= 1;
  //@ requires depth == 0;
  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:39:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:40:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:9: verify: Precondition conjunct is false: depth == 0
  //@ requires depth == 0;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth <= 1;
  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:38:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                                         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:39:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:8: verify: Precondition conjunct is false: depth <= 1
  //@ requires depth <= 1;
                     ^
3 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:14:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:39:
  //@ ensures \result == 1;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:15:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:38:
  //@ ensures \result >= 1;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:15:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:37:
  //@ ensures \result > 1;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:15:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:36:
  //@ ensures \result < 0;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:17:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:35:
  //@ ensures \result != 0;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:18:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:34:
  //@ ensures \result > 0;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:18:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:33:
  //@ ensures \result < -1;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:18:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:32:
  //@ ensures \result <= -1;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:18:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:31:
  //@ ensures \result == -1;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result == depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:23:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:30:
  //@ ensures \result == depth;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result != depth;
  //@ ensures \result >= depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:24:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:29:
  //@ ensures \result >= depth;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result != depth;
  //@ ensures \result > depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:24:) in method recursion_test
    else return 0;
         ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:28:
  //@ ensures \result > depth;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:12:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:26:
  //@ ensures \result < 1;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:13:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:25:
  //@ ensures \result != 1;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:13:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:24:
  //@ ensures \result <= 0;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:13:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:23:
  //@ ensures \result == 0;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < depth;
  //@ ensures \result <= depth;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:17:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:22:
  //@ ensures \result < depth;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= depth;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:17:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:21:
  //@ ensures \result <= depth;
      ^
2 verification failures

class recursion2 {
  //@ ensures \result;
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:2:) in method f
    return recursion_test(0) == 10;
    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:5:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:17:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:20:
  //@ ensures \result != depth;
      ^
4 verification failures

class recursion2 {
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= 0;
  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:18:) in method main
      recursion_test(i);
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:28:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:7: verify: Precondition conjunct is false: depth >= 0
  //@ requires depth >= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:16:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:19:
  //@ ensures \result != depth;
      ^
5 verification failures

class recursion2 {
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth != -1;
  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:17:) in method main
      recursion_test(i);
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:27:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:7: verify: Precondition conjunct is false: depth != -1
  //@ requires depth != -1;
                     ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:15:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:18:
  //@ ensures \result != depth;
      ^
5 verification failures

class recursion2 {
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth >= -1;
  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:16:) in method main
      recursion_test(i);
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:26:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:7: verify: Precondition conjunct is false: depth >= -1
  //@ requires depth >= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:14:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:17:
  //@ ensures \result != depth;
      ^
5 verification failures

class recursion2 {
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ requires depth > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:15:) in method main
      recursion_test(i);
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:25:
  static int recursion_test(int depth) {
             ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:7: verify: Precondition conjunct is false: depth > -1
  //@ requires depth > -1;
                     ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:13:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:16:
  //@ ensures \result != depth;
      ^
5 verification failures

class recursion2 {
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:7:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:15:
  //@ ensures \result <= 1;
      ^
2 verification failures

class recursion2 {
  //@ ensures !\result;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:4: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:2:) in method f
    return recursion_test(0) == 10;
    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:4:
  //@ ensures !\result;
      ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:11:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:14:
  //@ ensures \result != depth;
      ^
4 verification failures

class recursion2 {
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != depth;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}


/home/max/Documents/JMLGPT/tmp/recursion2.java:13: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:10:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:13:
  //@ ensures \result != depth;
      ^
2 verification failures

class recursion2 {
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures depth >= 0 ==> \result >= 0;
  static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }


  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f();
    for(int i = -5; i <= 15; i++) {
      recursion_test(i);
    }
  }
}



